@page "/Properties"
@using PokeAByte.Domain.Models.Properties
@using PokeAByte.Web.Services.Mapper
@using PokeAByte.Web.Services.Navigation
@using PokeAByte.Web.Services.Notifiers
@using PokeAByte.Web.Services.Properties
@using PokeAByte.Web.Components.PropertyManager
@implements IDisposable
@if (_finishedLoading)
{
    <MudStack>
        <MudStack Row="true">
            @if (string.IsNullOrEmpty(_gameName))
            {
                <MudText Typo="Typo.h6" Class="pa-2">Properties</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Class="pa-2">Properties for @_gameName</MudText>
            }
            <MudButton Style="align-self: center;"
                       Color="Color.Secondary"
                       Variant="Variant.Filled"
                       Size="Size.Small"
                       OnClick="OnClickUnloadMapper">
                Unload Mapper
            </MudButton>
        </MudStack>
        @if (_gameName.Contains("Deprecated", StringComparison.InvariantCultureIgnoreCase))
        {
            <MudText Typo="Typo.body2" Color="Color.Error" Class="px-6 pb-2" Style="width: 100%;">
                This mapper is deprecated! As such, it will not be updated with new features. 
                It will not have the same level of features or support as the latest mappers. 
                This one is provided so that users can continue to use software that was programmed 
                using these property paths.
            </MudText>
        }
        @if (_gameName.Contains("Beta", StringComparison.InvariantCultureIgnoreCase))
        {
        <MudText Typo="Typo.body2" Color="Color.Error" Class="px-6 pb-2" Style="width: 100%;">
            This is a beta mapper, it may contain errors such as incorrect address, missing properties, or
            properties that return incorrect values.
        </MudText>
        }
        @if (!string.IsNullOrWhiteSpace(_error))
        {
            <MudText Typo="Typo.body2" 
                     Color="Color.Error" 
                     Class="px-6 pb-2" 
                     Style="width: 100%;">
                @_error
            </MudText>
        }
        <PropertyTreeView Context="@PropertyService.PropertyTree" @ref="_propertyTreeView"/>
        <MudPaper Width="100%">
            @if (_propertyErrorList.Count != 0)
            {
                <PropertyErrors Context="@_propertyErrorList"/>
            }
        </MudPaper>
    </MudStack>
}
else
{
    <MudText Typo="Typo.h5">
        Loading properties, please wait...
    </MudText>
}


@code {
    [Inject] public required MapperClientService ClientService { get; set; }
    [Inject] public required NavigationService NavService { get; set; }
    [Inject] public required ChangeNotificationService ChangeNotificationService { get; set; }
    [Inject] public required PropertyUpdateService PropertyUpdateService { get; set; }
    [Inject] public required PropertyService PropertyService { get; set; }
    private PropertyTreeView? _propertyTreeView { get; set; }
    private List<PropertyModel> _propertyErrorList = [];
    private bool _finishedLoading = false;
    private string _gameName = "";
    private string _error = "";
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!ClientService.IsCurrentlyConnected)
        {
            NavService.Navigate(NavigationService.Pages.MapperManager);
        }

        var metadata = ClientService.GetMetaData();
        if (metadata.IsSuccess)
            _gameName = metadata.ResultValue?.GameName ?? "";
        var result = PropertyService.GenerateTree();
        _error = result.IsSuccess ? "" : result.ToString();
        _propertyErrorList = ClientService
            .Properties
            .Where(x => x.Address is null && x.Value is null && !string.IsNullOrWhiteSpace(x.OriginalAddressString))
            .ToList();
        PropertyService.RemoveEventHandlers();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            PropertyService.SetEventHandlers(HandlePropertyUpdate);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async void HandlePropertyUpdate(object? sender, PropertyUpdateEventArgs propertyUpdateEventArgs)
    {
        PropertyService.UpdateProperty(propertyUpdateEventArgs.Path);
        //await InvokeAsync(StateHasChanged);
        if (_propertyTreeView is not null)
            await InvokeAsync(_propertyTreeView.RefreshChildren);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_finishedLoading == false)
        {
            _finishedLoading = true;
            StateHasChanged();
        }
    }

    private async Task Clear()
    {
        PropertyService.ResetTree();
        await ClientService!.UnloadMapper();
        StateHasChanged();
        ChangeNotificationService.NotifyDataChanged();
        NavService.Navigate(NavigationService.Pages.MapperManager);
    }

    private async Task OnClickUnloadMapper()
    {
        await Clear();
    }

    public void Dispose()
    {
        PropertyService.RemoveEventHandlers();
    }
}