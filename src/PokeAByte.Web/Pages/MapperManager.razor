@page "/MapperManager"
@using PokeAByte.Web.Services
@using PokeAByte.Web.Components.MapperManager
@using PokeAByte.Web.Components.MapperManager.ArchiveManager
@using PokeAByte.Web.Components.MapperManager.RemoteMapperManager
@using PokeAByte.Web.Services.Notifiers

@using PokeAByte.Web.Services.Mapper
<PageTitle>@PageTitle - Mappers</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Mapper Manager</MudText>
<MudStack Row="true" Justify="Justify.FlexStart" Class="d-flex pb-2 align-center">
    <MudText Typo="Typo.body1">Mapper Status:</MudText>

    @if (MapperConnectionService!.IsCurrentlyConnected)
    {
        <MudText Typo="Typo.body1">
            @_mapperName
        </MudText>
        <MudButton DisableElevation="true"
                   Color="Color.Secondary"
                   Variant="Variant.Filled"
                   Size="Size.Small"
                   OnClick="OnClickUnloadMapper">
            Unload Mapper
        </MudButton>
    }
</MudStack>
<MudTabs Elevation="2" 
         Rounded="false" 
         ApplyEffectsToContainer="true"
         PanelClass="pa-6"
         MinimumTabWidth="128px"
         Color="Color.Dark"
         Centered="true"
         Class="d-flex justify-center align-content-center">
    <MudTabPanel Text="Load">
        <MudContainer Fixed="true" Style="@PanelStyle">
            <LoadMapper @ref="LoadMapperRef"/>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Download" Disabled="@(LoadMapperRef?.IsLoading is true)">
        <MudContainer Style="height: auto">
            <RemoteManager IsDownloadMappersPage="true" />
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Update" Disabled="@(LoadMapperRef?.IsLoading is true)">
        <MudContainer Style="height: auto">
            <RemoteManager IsDownloadMappersPage="false"/>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Backup" Disabled="@(LoadMapperRef?.IsLoading ?? false)">
        <MudContainer Fixed="true" Style="@PanelStyle">
            <BackupArchive />
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Restore" Disabled="@(LoadMapperRef?.IsLoading ?? false)">
        <MudContainer Fixed="true" Style="@PanelStyle">
            <RestoreArchive />
        </MudContainer>
    </MudTabPanel>
</MudTabs>

<style>
    .mud-tabs-toolbar-content {
        display: flex;
        justify-content: center;
    }
</style>

@code {
    private const string PanelStyle = "height:55vh;";
    [CascadingParameter] public string? PageTitle { get; set; }
    [Inject] private MapperClientService? MapperConnectionService { get; set; }
    [Inject] private ChangeNotificationService ChangeNotificationService { get; set; }
    public LoadMapper? LoadMapperRef { get; set; }

    private Color _currentStatusColor = Color.Info;
    private string _currentStatusName = "Not Found";
    private string _mapperName = "";
    protected override void OnInitialized()
    {
        base.OnInitialized();
        MapperConnectionService!.OnReadExceptionHandler(OnReadExceptionOccuredHandler);
        var metaResult = MapperConnectionService!.GetMetaData();
        if (metaResult.IsSuccess)
            _mapperName = $"{metaResult.ResultValue?.GameName}";
        _currentStatusColor = MapperConnectionService?.GetCurrentConnectionColor() ?? Color.Dark;
        _currentStatusName = MapperConnectionService?.GetCurrentConnectionName() ?? "Not Found";
    }

    private async Task Clear()
    {
        _mapperName = "";
        await MapperConnectionService!.UnloadMapper();
        StateHasChanged();
        ChangeNotificationService.NotifyDataChanged();
    }
    private async Task OnClickUnloadMapper()
    {
        await Clear();
    }
    private async void OnReadExceptionOccuredHandler()
    {
        await InvokeAsync(async() =>
        {
            await Clear();
        });
    }
}