@using PokeAByte.Web.Models
@if (_isDataLoading)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="500px"/>
    <MudOverlay Visible="_isDataLoading" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
    </MudOverlay>
}
else
{
    <MudText Typo="Typo.h6" Class="py-6">
        @_archivedMappers.Count(x => x.Type == ArchiveType.Archived) Archive(s), 
        @_archivedMappers.Count(x => x.Type == ArchiveType.BackUp) Back-Up(s) and
        @_archivedMappers.SelectMany(y => y.MapperModels).Count() files found
    </MudText>
    <MudStack Row="true" Class="pb-2">
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="OnClickOpenMapperDirectory">
            Open Mapper Folder
        </MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="OnClickOpenArchiveDirectory">
            Open Archive/Backup Folder
        </MudButton>
    </MudStack>
    <MudStack Row="true">
        <MudTextField @bind-Value="_mapperListFilter"
                      Class="py-4"
                      Label="Filter Updates"
                      Immediate="true"
                      Variant="Variant.Filled"/>
        <MudButton Color="Color.Info"
                   Variant="Variant.Filled"
                   OnClick="OnClickReloadMapperList"
                   Style="height:40px; align-self: center;">
            Reload Mapper List
        </MudButton>
    </MudStack>
    @if (ArchivedMapperListFiltered.Count == 0)
    {
        <MudText Typo="Typo.h6" Class="pb-3">No Archives/Backups Found</MudText>
    }
    else if(ArchivedMapperListFiltered.Count > 0 && !string.IsNullOrEmpty(_mapperListFilter))
    {
        <MudText Typo="Typo.h6" Class="pb-3">
            @ArchivedMapperListFiltered.Count / @_archivedMappers.Count Filtered
        </MudText>
    }
    @foreach (var item in ArchivedMapperListFiltered)
    {
        <MudPaper Class="pa-1 mb-2" Elevation="4">
            <MudStack Row="true" Justify="Justify.FlexStart" StretchItems="StretchItems.Start">
                <MudGrid Spacing="8" Justify="Justify.FlexStart">
                    <MudItem Class="align-start">
                        <MudIconButton Icon="@Icons.Material.Filled.CatchingPokemon"
                                       Color="@SetIconColor(item.IsExpanded)"
                                       aria-label="expand-panel"
                                       Class="ml-auto mud-width-full d-flex"
                                       OnClick="() => item.IsExpanded = !item.IsExpanded"/>
                    </MudItem>
                    <MudItem Class="align-content-center">
                        <MudText Typo="Typo.body2" Class="d-flex justify-start">
                            @item.BasePath
                        </MudText>
                    </MudItem>
                    <MudItem Class="align-content-center">
                        <MudText Typo="Typo.body2" Class="d-flex justify-start">
                            (@item.MapperModels.Count files)
                        </MudText>
                    </MudItem>
                    <MudItem Class="align-content-center">
                        <MudStack Row="true" Spacing="1" Class="align-content-center align-center">
                            <MudText Typo="Typo.body2">
                                Name: 
                            </MudText>
                            <MudTextField T="string"
                                          Margin="Margin.Dense"
                                          Variant="Variant.Text"
                                          ShrinkLabel="true"
                                          ReadOnly="@(!item.IsChangingName)"
                                          Immediate="true"
                                          AutoGrow="false"
                                          OnKeyDown="(args) => OnKeyDownHandler(args, item)"
                                          @bind-Value="@item.DisplayName"/>
                        </MudStack>
                    </MudItem>
                    <MudItem Class="align-content-center">
                        <MudText Typo="Typo.body2" Class="d-flex justify-start" Style="width: 110px;">
                            @GetTypeName(item.Type)
                        </MudText>
                    </MudItem>
                    <MudItem Class="align-content-center">

                    </MudItem>
                </MudGrid>
                <MudGrid Style="width: 500px;"Justify="Justify.FlexEnd" Spacing="2">
                    <MudItem Class="align-content-center align-end">
                        @if (!item.IsChangingName)
                        {
                            <MudButton Color="Color.Success"
                                       OnClick="() => { item.IsChangingName = !item.IsChangingName; }"
                                       Class="ml-auto mud-width-full d-flex"
                                       Variant="Variant.Filled"
                                       Style="height: 35px;">
                                Change Name
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Color="Color.Success"
                                       OnClick="() => OnClickSaveNameButton(item)"
                                       Class="ml-auto mud-width-full d-flex"
                                       Variant="Variant.Filled"
                                       Style="height: 35px;">
                                Save Name
                            </MudButton>
                        }
                    </MudItem>
                    <MudItem Class="align-content-center align-end">
                        <MudButton Color="Color.Success"
                                   OnClick="() => OnClickRestoreButton(item)"
                                   Class="ml-auto mud-width-full d-flex"
                                   Variant="Variant.Filled"
                                   Style="height: 35px;">
                            Restore
                        </MudButton>
                    </MudItem>
                    <MudItem Class="align-content-center align-end">
                        <MudButton Color="Color.Error"
                                   OnClick="() => OnClickDeleteButton(item)"
                                   Class="ml-auto mud-width-full d-flex"
                                   Variant="Variant.Filled"
                                   Style="height: 35px;">
                            Delete
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudStack>
            <div style="@(item.IsExpanded ? "display:block;" : "display:none;")">
                <MudDivider Vertical="false"
                            Light="false"
                            DividerType="DividerType.FullWidth"
                            Class="mb-3"/>
                <MapperArchiveData Context="@item.MapperModels"/>
            </div>
        </MudPaper>
    }
}