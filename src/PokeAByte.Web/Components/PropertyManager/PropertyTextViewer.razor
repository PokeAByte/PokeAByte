@using PokeAByte.Web.Models
@using PokeAByte.Web.Services.Properties
@implements IDisposable

<MudIcon Icon="@SetIcon(Presenter)"
         Class="pr-2"/>
<MudText Typo="Typo.body2" Class="py-1" Style="width:15px">@Presenter.Text</MudText>
<MudText Typo="Typo.body2" Class="py-1" Style="@($"width:{GetWidth(Presenter, GetAdditionalInfo(Presenter))}px;")">
    @GetAdditionalInfo(Presenter)
</MudText>
<MudText Typo="Typo.body2" Class="py-1" Style="color:#616161">@ChildrenCount Entries</MudText>

@code {
    [Parameter] public required int ChildrenCount { get; set; }
    [Parameter] public required PropertyTreePresenter Presenter { get; set; }
    [Parameter] public required PropertyTreeView Parent { get; set; }
    [Inject] public required PropertyService PropertyService { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Parent.DetachRefreshEvent(RefreshSelf);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Parent.AttachRefreshEvent(RefreshSelf);
        }
        base.OnAfterRender(firstRender);
    }
    protected override bool ShouldRender()
    {
        if (Presenter.Parent?.IsDisabled is true) return false;
        if (Presenter.IsDisabled) return false;
        if (Presenter.Parent?.Expanded is false) return false;
        return true;
    }
    private void RefreshSelf()
    {
        StateHasChanged();
    }
    private string GetWidth(PropertyTreePresenter presenter, string additionalInfo)
    {
        List<TreeItemData<PropertyTreeItem>>? children;
        //Get the parent
        if (presenter.Parent is not null)
        {
            children = presenter.Parent.Children;
        }
        else
        {
            //This is the root nodes just get a list of root nodes
            children = PropertyService
                .PropertyTree
                .Where(x => x.HasChildren)
                .ToList();
        }
        //Failed to find children just make the length the size of the entry (8*16 ~= 125 px)
        if (children is null) return (presenter.Text?.Length ?? 16 * 8).ToString();
        //Iterate through the children and get the largest text size
        var length = children
            .Aggregate(0, (max, current) =>
                Math.Max(max, current.Text?.Length ?? 16)) * 10;
        if (length < 75) length = 75;
        if (!string.IsNullOrWhiteSpace(additionalInfo))
        {
            length += additionalInfo.Length * 10;
        }
        return length.ToString();
    }
    private string SetIcon(TreeItemData<PropertyTreeItem> context)
    {        
        return context.HasChildren
            ? (context.Expanded ? Icons.Material.Filled.FolderOpen : Icons.Material.Filled.Folder)
            : Icons.Material.Filled.Folder;
    }
    private string GetAdditionalInfo(TreeItemData<PropertyTreeItem> context)
    {
        var intConvert = int.TryParse(context.Text, out var result);
        if (!intConvert) return "";
        var firstChild =
            (context.HasChildren ? 
                context.Children?.FirstOrDefault(x => x.Value?.Name is "species") : 
                null) ?? (context.HasChildren ? 
                context.Children?.First() : 
                null);
        if (firstChild?.Value?.PropertyModel == null) return "";

		// Only make the "ToString()" call once:
		var propertyValueString = firstChild.Value.PropertyModel.Value?.ToString();
        return string.IsNullOrWhiteSpace(propertyValueString) ? "" : $" ({propertyValueString})";
    }

    public void Dispose()
    {
        Parent.DetachRefreshEvent(RefreshSelf);
    }

}