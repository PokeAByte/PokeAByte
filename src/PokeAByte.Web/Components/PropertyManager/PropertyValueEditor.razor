@using PokeAByte.Web.Models
@using PokeAByte.Web.Services.Mapper
@implements IDisposable
@if(Context is not null)
{
    <MudStack Row="true" Style="cursor: default !important;">
        @if (Context.Type is "string")
        {
            <MudTextField @bind-Value="Context.ValueString"
                          Variant="Variant.Text"
                          Margin="Margin.Dense"
                          OnBlur="InputFocusLostHandler"
                          ShrinkLabel="true"
                          Class="pad-input"
                          ReadOnly="Context.IsReadOnly"
                          Disabled="Context.IsReadOnly"
                          Immediate="true"
                          AutoGrow="false"
                          MaxLength="@(Context.Length ?? 30)"
                          TextChanged="OnTextChangedHandler"
                          OnKeyDown="OnKeyDownHandler"/>
        }
        else if(!string.IsNullOrEmpty(Context.Reference))
        {
            <MudAutocomplete SearchFunc="SearchForIntReference"
                             T="IntegerValueReference?"
                             Dense="true"
                             Margin="Margin.Dense"
                             Class="mt-n1 pab-text"
                             Style="height: 25px;"
                             Adornment="Adornment.None"
                             OnBlur="InputFocusLostHandler"
                             ShrinkLabel="true"
                             MaxItems="15"
                             Value="Context.ReferenceValue"
                             ValueChanged="OnIntValueChanged"
                             Immediate="true"
                             OnKeyDown="(key) => OnKeyDownIntAutoCompleteHandler(key, Context)"
                             OnInternalInputChanged="OnInputChanged"
                             ToStringFunc="@(e => e is not null && string.IsNullOrEmpty(e.value) ? "" : e?.value ?? "")">
                <BeforeItemsTemplate>
                    <MudText Typo="Typo.body2" Class="px-2">Type to Search Entries...</MudText>
                </BeforeItemsTemplate>
            </MudAutocomplete> 
        }
        else if (Context.Type is "int" or "uint" or "nibble")
        {
            <MudTextField @bind-Value="Context.ValueString"
                          Variant="Variant.Text"
                          Style="height: 25px"
                          Class="pab-int"
                          Margin="Margin.Dense"
                          OnBlur="InputFocusLostHandler"
                          ShrinkLabel="true"
                          Immediate="true"
                          ReadOnly="Context.IsReadOnly"
                          Disabled="Context.IsReadOnly"
                          TextChanged="OnTextChangedHandler"
                          OnKeyDown="OnKeyDownHandler"/>
        }
        else if (Context.Type is "bit" or "bool")
        {
            <MudSwitch @bind-Value="Context.ValueString"
                       Color="Color.Success"
                       Size="Size.Small"
                       Converter="MudSwitchConverter"
                       ReadOnly="Context.IsReadOnly"
                       Disabled="Context.IsReadOnly"
                       UnCheckedColor="@Color.Secondary"/>
        }
        else
        {
            <MudText Class="pab-text">
                @FormatString(Context.ValueString)
            </MudText>  
        }
        <MudIconButton Icon="@Icons.Material.Filled.Save"
                       id="saveButtonIcon"
                       Title="Save"
                       Style="padding-top: 5px;"
                       Disabled="!Context.IsEditing || Context.IsReadOnly"
                       OnClick="SaveBtnOnClickHandler"/>
        <MudIconButton Icon="@FreezeIcon"
                       Title="Freeze"
                       Style="padding-top: 5px;"
                       OnClick="OnClickFreezeHandler"/>
    </MudStack>
}
<style>
    span.mud-switch-base {
        padding: 5px !important;
    }
    .pab-int input {
        padding: 6px 0 0 !important;
    }
    .pab-int {
        margin: 1px 0 0 !important;
    }
    .pab-text {
        margin: 4px 0 0 !important;
    }
    .pab-text input {
        padding: 3px 0 0 !important;
    }
    .pad-input input {
        padding: 4px 0 0 !important;
    }
</style>
@code {
    [Inject] public required MapperClientService MapperClientService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Parameter] public EditPropertyModel? Context { get; set; }
    [Parameter] public bool IsShortDisplay { get; set; }
    private string FreezeIcon => Context?.IsFrozen is true
        ? PokeAByteIcons.SnowflakeIcon
        : PokeAByteIcons.SnowflakeIconDisabled;
    private readonly string _copyBtnViewBox = "0 0 30 30"; 
    
    public Action<IntegerValueReference?>? OnIntValueChanged { get; set; }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnIntValueChanged += OnIntValueChangedHandler;
        if (string.IsNullOrEmpty(Context?.Reference) || Context.GlossaryReference is null) return;
        var foundVal = Context.GlossaryReference
            .FirstOrDefault(x => x.Value == Context.ValueString);
        if (!string.IsNullOrEmpty(foundVal.Value))
        {
            Context!.ReferenceValue = new IntegerValueReference(foundVal.Key, foundVal.Value);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(!firstRender || Context?.GlossaryReference is null) return;
        var foundVal = Context.GlossaryReference
            .FirstOrDefault(x => x.Value == Context.ValueString);
        if (!string.IsNullOrEmpty(foundVal.Value))
        {
            Context!.ReferenceValue = new IntegerValueReference(foundVal.Key, foundVal.Value);
        }
    }

    public async Task Save()
    {
        var result = await MapperClientService.WritePropertyData(Context!.Path,
            Context.ValueString,
            Context.IsFrozen ?? false);
        if (!result.IsSuccess)
        {
            Snackbar.Add(result.ToString(), Severity.Error);
        }
        else
        {
            Snackbar.Add("Saved successful!", Severity.Success);
        }

        Context.IsEditing = false;
        StateHasChanged();
    }
    
    private string FormatString(string val)
    {
        if (!IsShortDisplay || val.Length <= 15) return val;
        return $"{val[..5]}...{val[^5..]}";
    }
    public readonly MudBlazor.Converter<string?, bool?> MudSwitchConverter = new()
    {
        SetFunc = text => text?.ToLowerInvariant() == "true",
        GetFunc = val => val?.ToString().ToLowerInvariant() ?? "false",
    };
    //For some reason without this handler (even if it does nothing at all) the input will not update right away.
    //It would only update when the user clicks out of the textbox then back into it... However, adding in this empty
    //handler it will update when it loses focus. I am not a fan of leaving in empty methods but if it works, it works
    private void InputFocusLostHandler(FocusEventArgs obj)
    {
    }

    private void OnInputChanged(ChangeEventArgs obj)
    {
    }
    private void OnTextChangedHandler(string obj)
    {
        Context?.UpdateByteArray();
        StateHasChanged();
    }
    private async Task OnKeyDownHandler(KeyboardEventArgs args)
    {
        /*if(Context is not null)
            Context.IsEditing = true;*/
        if (args.Code is "Enter" or "NumpadEnter")
        {
            await Save();
        }
    }
    private Task<IEnumerable<IntegerValueReference>> SearchForIntReference(string arg1, CancellationToken arg2)
    {
        if (string.IsNullOrEmpty(Context!.Reference) || Context.GlossaryReference is null)
            return Task.FromResult<IEnumerable<IntegerValueReference>>(Array.Empty<IntegerValueReference>());
        if (string.IsNullOrEmpty(arg1))
            return Task.FromResult(Context.GlossaryReference
                .Where(x => !string.IsNullOrWhiteSpace(x.Value))
                .Select(g => new IntegerValueReference(g.Key, g.Value)));
        return Task.FromResult(Context.GlossaryReference
            .Where(x => 
                !string.IsNullOrWhiteSpace(x.Value) &&
                x.Value.Contains(arg1, StringComparison.InvariantCultureIgnoreCase))
            .Select(g => new IntegerValueReference(g.Key, g.Value)));
    }
    private void OnIntValueChangedHandler(IntegerValueReference val)
    {
        Context!.ReferenceValue = val;
    }
    private async Task OnKeyDownIntAutoCompleteHandler(KeyboardEventArgs key, EditPropertyModel context)
    {
        await Task.Delay(500);
        if (key.Code is "Enter" or "NumpadEnter" && !string.IsNullOrEmpty(Context?.ReferenceValue?.key.ToString()))
        {
            await Save();
        }
    }
    private async Task SaveBtnOnClickHandler(MouseEventArgs obj)
    {
        await Save();
    }    
    private async Task OnClickFreezeHandler()
    {
        Context!.IsFrozen = !Context.IsFrozen;
        await Save();
    }

    public void Dispose()
    {
        Snackbar.Dispose();
        OnIntValueChanged -= OnIntValueChangedHandler;
    }

}