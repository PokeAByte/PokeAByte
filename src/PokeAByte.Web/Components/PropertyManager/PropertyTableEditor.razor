@using PokeAByte.Web.Models

@if (Context is not null)
{
<MudSimpleTable Style="overflow-x: auto;"
                Bordered="true"
                Dense="true">
    <tbody>
        <tr>
            <td class="name copyable" @onclick="() => CopyToClipboard(Context.ValueString)">
                 Value
            </td>

            <td class="copyBtn" @onclick="() => CopyToClipboard(Context.ValueString)" >
                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"
                         Size="Size.Small"
                         ViewBox="@_copyBtnViewBox"/>
            </td>
            <td style="@($"width:100%")">
                <PropertyValueEditor Context="Context" IsShortDisplay="true"/>
            </td>
        </tr>
        <tr>
            <td class="name copyable" @onclick="() => CopyToClipboard(Context.Path)">Path</td>
            <td class="copyBtn" @onclick="() => CopyToClipboard(Context.Path)">
                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"
                         Size="Size.Small"
                         ViewBox="@_copyBtnViewBox" />
            </td>
            <td>
                @Context.Path
            </td>
        </tr>
        <tr>
            <td class="name">Type</td>
            <td class="copyBtn">
                <MudIcon Size="Size.Small"
                         ViewBox="@_copyBtnViewBox" />
            </td>
            <td>@Context.Type</td>
        </tr>
        <tr>
            <td class="name copyable" @onclick="() => CopyToClipboard(Context.AddressString)">Address</td>
            <td class="copyBtn" @onclick="() => CopyToClipboard(Context.AddressString)" >
                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"
                         Size="Size.Small"
                         ViewBox="@_copyBtnViewBox"/>
            </td>
            <td>@Context.AddressString</td>
        </tr>
        <tr>
            <td class="name">Length</td>
            <td class="copyBtn">
                <MudIcon Size="Size.Small"
                         ViewBox="@_copyBtnViewBox" />
            </td>
            <td>@Context.Length</td>
        </tr>
        <tr>
            <td class="name">Size</td>
            <td class="copyBtn">
                <MudIcon Size="Size.Small"
                         ViewBox="@_copyBtnViewBox" />
            </td>
            <td>@Context.Size</td>
        </tr>
        <tr>
            <td class="name copyable" @onclick="() => CopyToClipboard(Context.GetReference)">Reference</td>
            <td class="copyBtn" @onclick="() => CopyToClipboard(Context.GetReference)">
                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"
                         Size="Size.Small"
                         ViewBox="@_copyBtnViewBox"/>
            </td>
            <td>
                @Context.Reference
            </td>
        </tr>
        <tr>
            <td class="name copyable" @onclick="() => CopyToClipboard(Context.ByteArray.ToString())">
                Bytes
            </td>
            <td class="copyBtn" @onclick="() => CopyToClipboard(Context.ByteArray.ToString())" >
                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"
                         Size="Size.Small"
                         ViewBox="@_copyBtnViewBox"/>
            </td>
            <td>
                <PropertyByteEditor Context="Context" PropertyValueEditor="@PropertyValueEditor" />
            </td>
        </tr>
    </tbody>
</MudSimpleTable>
}
<style>
    table {
        table-layout: fixed;
        /*width: @($"{_tableWidth}px") !important;*/
        width: 100%;
    }
    td.name {
        width: @($"{_nameWidth}px");
    }
    td.copyable {
        cursor: pointer !important;
    }
    td.copyBtn {
        padding-top: 8px !important;
        width: @($"{_copyWidth}px");
        cursor: pointer !important;
    }
    .mud-simple-table.mud-table-dense * tr td {
        padding: 2px 8px 2px 7px;
    }
</style>
@code {
    [Inject] public IJSRuntime JSRuntime { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }
    [Inject] public ILogger<PropertyTableEditor> Logger { get; set; }
    [Parameter] public required EditPropertyModel? Context { get; set; }
    [Parameter] public required PropertyValueEditor PropertyValueEditor { get; set; }

    private int _valueWidth = 150;
    private readonly int _nameWidth = 95;
    private readonly int _copyWidth = 35;
    private int _tableWidth = 250 + 95 + 35;
    private readonly string _copyBtnViewBox = "0 0 30 30"; 
    
    private async Task CopyToClipboard(string copy)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", copy);
            Snackbar.Add($"Copied {copy} to the clipboard!", 
                Severity.Info);
        }
        catch (Exception e)
        {
            var msg = "Failed to copy to clipboard!";
            Logger.LogError(e, msg);
            Snackbar.Add(msg, Severity.Error);
        }
    }
}