@using PokeAByte.Web.Models

@implements IDisposable
<MudPaper Width="100%"
          Class="d-flex align-center rounded ml-n4 px-2"
          Elevation="0"
          Style="cursor: pointer; background-color:var(--mud-palette-surface);overflow-y: hidden">
    <MudStack Class="flex-grow-1">
        <MudGrid Spacing="3"
                 Justify="Justify.FlexStart">
            <MudItem Class="d-flex align-content-center justify-center">
                <MudIcon Icon="@Icons.Material.Filled.CatchingPokemon"
                         Color="IconColor"
                         @onclick="OnClickExpand"
                         Class="ml-1 mud-width-full py-1 align-center align-self-center"/>
            </MudItem>
            <MudItem Class="align-content-center"
                     @onclick="OnClickExpand">
                <MudText Typo="Typo.body2" Style="@Width" Class="d-flex justify-start" id="mudText">
                    @Context.Value!.Name:
                </MudText>
            </MudItem>
            <MudItem Class="align-center cursor-default">
                <MudIcon Icon="@Icons.Material.Filled.ContentCopy"
                         Size="Size.Small"
                         Style="margin-top:7px;"
                         Class="cursor-pointer"
                         @onclick="() => CopyToClipboard(Context.Value?.PropertyModel?.ValueString)"/>
            </MudItem>
            <MudItem Class="align-center cursor-default">
                <PropertyValueEditor Context="Context.Value?.PropertyModel" IsShortDisplay="true" @ref="PropertyValueEditor"/>
            </MudItem>
            <MudItem @onclick="OnClickExpand"
                     Class="align-content-center flex-grow-1" Style="width: auto;"></MudItem>
        </MudGrid>
        <MudContainer Fixed="true" Style="@DisplayContent" Class="cursor-default">
            <PropertyTableEditor Context="Context.Value?.PropertyModel" PropertyValueEditor="PropertyValueEditor"/>
        </MudContainer>
    </MudStack>
</MudPaper>

@code {
    [Parameter] public required PropertyTreePresenter Context { get; set; }
    [Parameter] public required PropertyTreeView Parent { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Inject] public required IJSRuntime JsRuntime { get; set; }
    
    private int _textWidth = 125;
    private string Width => $"width:{_textWidth}px; text-overflow: ellipsis;";
    private string DisplayContent => 
        Context.Value?.IsPropertyExpanded is true ? "display:block;" : "display:none;";
    public Color IconColor =>
        Context.Value!.IsPropertyExpanded ? Color.Info : Color.Default;

    public PropertyValueEditor PropertyValueEditor { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Context.Parent is not null)
        {
            _textWidth = Context.Parent.GetMaxLength() * 10;
        }
        else
        {
            _textWidth = string.IsNullOrEmpty(Context.Text) ? 125 : Context.Text.Length * 10;
        }
        Parent.DetachRefreshEvent(RefreshSelf);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Parent.AttachRefreshEvent(RefreshSelf);
        }
        base.OnAfterRender(firstRender);
    }

    private void RefreshSelf()
    {
        StateHasChanged();
    }
    public void Dispose()
    {
        Parent.DetachRefreshEvent(RefreshSelf);
    }
    private void OnClickExpand()
    {
        Context.Value!.IsPropertyExpanded = !Context.Value.IsPropertyExpanded;
    }    
    private async Task CopyToClipboard(object? copy)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", copy);
            Snackbar.Add($"Copied {copy} to the clipboard!", 
                Severity.Info);
        }
        catch (Exception e)
        {
            var msg = "Failed to copy to clipboard!";
            Snackbar.Add(msg, Severity.Error);
        }
    }
}