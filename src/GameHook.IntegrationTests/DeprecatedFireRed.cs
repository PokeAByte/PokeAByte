using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenAPI.GameHook;
using System;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class Deprecated_Pokemon_FireRed : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBA_PokemonFireRedDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x20245B0, [205, 189, 201, 206, 206, 255, 255, 255], "SCOTT");
            mapper.AssertAreEqual("player.gender", 0x20245B8, [0], "Male");
            mapper.AssertAreEqual("player.teamCount", 0x20244E9, [85], 85);
            mapper.AssertAreEqual("player.team.0.personalityValue", 2999519075);
            mapper.AssertAreEqual("player.team.0.checksum", 0x1C, [147, 106], 27283);
            mapper.AssertAreEqual("player.team.0.otID", 0x4, [189, 65, 155, 141], 2375762365);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [188, 207, 198, 188, 187, 255, 255, 255, 255, 255], "BULBA");
            mapper.AssertAreEqual("player.team.0.speciesArray", 0x20, [1, 0], " pokedexNumber: 1, name: 'Bulbasaur' ");
            mapper.AssertAreEqual("player.team.0.species", 0x20, [1, 0], "Bulbasaur");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0x20, [1, 0], "1");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [8], 8);
            mapper.AssertAreEqual("player.team.0.expPoints", 0x24, [73, 1, 0, 0], 329);
            mapper.AssertAreEqual("player.team.0.nature", 0);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.hp", 0x56, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.maxHp", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.attack", 0x5A, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.defense", 0x5C, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.speed", 0x5E, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0x60, [15, 0], 15);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0x62, [17, 0], 17);
            mapper.AssertAreEqual("player.team.0.ivEggAbilityBlock", 0x48, [35, 42, 93, 60], 1012738595);
            mapper.AssertAreEqual("player.team.0.ivHp", 0x48, [35, 42, 93, 60], 3);
            mapper.AssertAreEqual("player.team.0.ivAttack", 0x48, [35, 42, 93, 60], 17);
            mapper.AssertAreEqual("player.team.0.ivDefense", 0x48, [35, 42, 93, 60], 10);
            mapper.AssertAreEqual("player.team.0.ivSpeed", 0x48, [35, 42, 93, 60], 26);
            mapper.AssertAreEqual("player.team.0.ivSpecialAttack", 0x48, [35, 42, 93, 60], 5);
            mapper.AssertAreEqual("player.team.0.ivSpecialDefense", 0x48, [35, 42, 93, 60], 30);
            mapper.AssertAreEqual("player.team.0.isEgg", 0x48, [35, 42, 93, 60], false);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [35, 42, 93, 60], false);
            mapper.AssertAreEqual("player.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpeed", 0x3B, [6], 6);
            mapper.AssertAreEqual("player.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.0.move2", 0x2E, [45, 0], "GROWL");
            mapper.AssertAreEqual("player.team.0.move3", 0x30, [73, 0], "LEECH SEED");
            mapper.AssertAreEqual("player.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.0.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.move3pp", 0x36, [10], 10);
            mapper.AssertAreEqual("player.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.otName", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            mapper.AssertAreEqual("player.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.pokerusStatus", 0x24, [73], 73);
            mapper.AssertAreEqual("player.team.0.metLocation", 0x25, [1], 1);
            mapper.AssertAreEqual("player.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.robbinsObedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("player.team.1.personalityValue", 79808973);
            mapper.AssertAreEqual("player.team.1.checksum", 0x1C, [133, 92], 23685);
            mapper.AssertAreEqual("player.team.1.otID", 0x4, [189, 65, 155, 141], 2375762365);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [204, 187, 206, 255, 255, 255, 255, 255, 255, 255], "RAT");
            mapper.AssertAreEqual("player.team.1.speciesArray", 0x20, [19, 0], " pokedexNumber: 19, name: 'Rattata' ");
            mapper.AssertAreEqual("player.team.1.species", 0x20, [19, 0], "Rattata");
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0x20, [19, 0], "19");
            mapper.AssertAreEqual("player.team.1.level", 0x54, [2], 2);
            mapper.AssertAreEqual("player.team.1.expPoints", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("player.team.1.nature", 23);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.maxHp", 0x58, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("player.team.1.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.speed", 0x5E, [8, 0], 8);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0x60, [5, 0], 5);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0x62, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.ivEggAbilityBlock", 0x48, [96, 195, 157, 173], 2912797536);
            mapper.AssertAreEqual("player.team.1.ivHp", 0x48, [96, 195, 157, 173], 0);
            mapper.AssertAreEqual("player.team.1.ivAttack", 0x48, [96, 195, 157, 173], 27);
            mapper.AssertAreEqual("player.team.1.ivDefense", 0x48, [96, 195, 157, 173], 16);
            mapper.AssertAreEqual("player.team.1.ivSpeed", 0x48, [96, 195, 157, 173], 27);
            mapper.AssertAreEqual("player.team.1.ivSpecialAttack", 0x48, [96, 195, 157, 173], 25);
            mapper.AssertAreEqual("player.team.1.ivSpecialDefense", 0x48, [96, 195, 157, 173], 22);
            mapper.AssertAreEqual("player.team.1.isEgg", 0x48, [96, 195, 157, 173], false);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [96, 195, 157, 173], true);
            mapper.AssertAreEqual("player.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.1.move2", 0x2E, [39, 0], "TAIL WHIP");
            mapper.AssertAreEqual("player.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.1.move2pp", 0x35, [30], 30);
            mapper.AssertAreEqual("player.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.1.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.1.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.otName", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            mapper.AssertAreEqual("player.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.pokerusStatus", 0x24, [8], 8);
            mapper.AssertAreEqual("player.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.robbinsObedience", 0x2C, [33, 0, 39, 0], 2555937);
            mapper.AssertAreEqual("player.team.2.personalityValue", 0);
            mapper.AssertAreEqual("player.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nature", 0);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.personalityValue", 0);
            mapper.AssertAreEqual("player.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nature", 0);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.personalityValue", 0);
            mapper.AssertAreEqual("player.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nature", 0);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.personalityValue", 0);
            mapper.AssertAreEqual("player.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nature", 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.vsSeeker.stepsUntilUse", 0x2025B8C, [0], 0);
            mapper.AssertAreEqual("player.vsSeeker.stepsUntilCharged", 0x2025B8D, [0], 0);
            mapper.AssertAreEqual("player.bag.quantityDecyptionKey", 0x20254D0, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.0.item", 0x2025864, [13, 0], "POTION");
            mapper.AssertAreEqual("player.bag.items.0.quantity", 0x2025866, [194, 34], 8898);
            mapper.AssertAreEqual("player.bag.items.1.item", 0x2025868, [14, 0], "ANTIDOTE");
            mapper.AssertAreEqual("player.bag.items.1.quantity", 0x202586A, [194, 34], 8898);
            mapper.AssertAreEqual("player.bag.items.2.item", 0x202586C, [18, 0], "PARALYZE HEAL");
            mapper.AssertAreEqual("player.bag.items.2.quantity", 0x202586E, [192, 34], 8896);
            mapper.AssertAreEqual("player.bag.items.3.item", 0x2025870, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.3.quantity", 0x2025872, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.4.item", 0x2025874, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.4.quantity", 0x2025876, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.5.item", 0x2025878, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.5.quantity", 0x202587A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.6.item", 0x202587C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.6.quantity", 0x202587E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.7.item", 0x2025880, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.7.quantity", 0x2025882, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.8.item", 0x2025884, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.8.quantity", 0x2025886, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.9.item", 0x2025888, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.9.quantity", 0x202588A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.10.item", 0x202588C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.10.quantity", 0x202588E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.11.item", 0x2025890, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.11.quantity", 0x2025892, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.12.item", 0x2025894, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.12.quantity", 0x2025896, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.13.item", 0x2025898, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.13.quantity", 0x202589A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.14.item", 0x202589C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.14.quantity", 0x202589E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.15.item", 0x20258A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.15.quantity", 0x20258A2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.16.item", 0x20258A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.16.quantity", 0x20258A6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.17.item", 0x20258A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.17.quantity", 0x20258AA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.18.item", 0x20258AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.18.quantity", 0x20258AE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.19.item", 0x20258B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.19.quantity", 0x20258B2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.20.item", 0x20258B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.20.quantity", 0x20258B6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.21.item", 0x20258B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.21.quantity", 0x20258BA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.22.item", 0x20258BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.22.quantity", 0x20258BE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.23.item", 0x20258C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.23.quantity", 0x20258C2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.24.item", 0x20258C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.24.quantity", 0x20258C6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.25.item", 0x20258C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.25.quantity", 0x20258CA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.26.item", 0x20258CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.26.quantity", 0x20258CE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.27.item", 0x20258D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.27.quantity", 0x20258D2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.28.item", 0x20258D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.28.quantity", 0x20258D6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.29.item", 0x20258D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.29.quantity", 0x20258DA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.30.item", 0x20258DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.30.quantity", 0x20258DE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.31.item", 0x20258E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.31.quantity", 0x20258E2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.32.item", 0x20258E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.32.quantity", 0x20258E6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.33.item", 0x20258E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.33.quantity", 0x20258EA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.34.item", 0x20258EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.34.quantity", 0x20258EE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.35.item", 0x20258F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.35.quantity", 0x20258F2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.36.item", 0x20258F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.36.quantity", 0x20258F6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.37.item", 0x20258F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.37.quantity", 0x20258FA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.38.item", 0x20258FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.38.quantity", 0x20258FE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.39.item", 0x2025900, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.39.quantity", 0x2025902, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.40.item", 0x2025904, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.40.quantity", 0x2025906, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.items.41.item", 0x2025908, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.41.quantity", 0x202590A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.0.item", 0x202590C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.0.quantity", 0x202590E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.1.item", 0x2025910, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.1.quantity", 0x2025912, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.2.item", 0x2025914, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.2.quantity", 0x2025916, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.3.item", 0x2025918, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.3.quantity", 0x202591A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.4.item", 0x202591C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.4.quantity", 0x202591E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.5.item", 0x2025920, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.5.quantity", 0x2025922, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.6.item", 0x2025924, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.6.quantity", 0x2025926, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.7.item", 0x2025928, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.7.quantity", 0x202592A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.8.item", 0x202592C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.8.quantity", 0x202592E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.9.item", 0x2025930, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.9.quantity", 0x2025932, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.10.item", 0x2025934, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.10.quantity", 0x2025936, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.11.item", 0x2025938, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.11.quantity", 0x202593A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.12.item", 0x202593C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.12.quantity", 0x202593E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.13.item", 0x2025940, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.13.quantity", 0x2025942, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.14.item", 0x2025944, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.14.quantity", 0x2025946, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.15.item", 0x2025948, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.15.quantity", 0x202594A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.16.item", 0x202594C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.16.quantity", 0x202594E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.17.item", 0x2025950, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.17.quantity", 0x2025952, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.18.item", 0x2025954, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.18.quantity", 0x2025956, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.19.item", 0x2025958, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.19.quantity", 0x202595A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.20.item", 0x202595C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.20.quantity", 0x202595E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.21.item", 0x2025960, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.21.quantity", 0x2025962, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.22.item", 0x2025964, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.22.quantity", 0x2025966, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.23.item", 0x2025968, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.23.quantity", 0x202596A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.24.item", 0x202596C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.24.quantity", 0x202596E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.25.item", 0x2025970, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.25.quantity", 0x2025972, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.26.item", 0x2025974, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.26.quantity", 0x2025976, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.27.item", 0x2025978, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.27.quantity", 0x202597A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.28.item", 0x202597C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.28.quantity", 0x202597E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.keyItems.29.item", 0x2025980, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.29.quantity", 0x2025982, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.0.item", 0x2025984, [4, 0], "POKE BALL");
            mapper.AssertAreEqual("player.bag.pokeBalls.0.quantity", 0x2025986, [198, 34], 8902);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.item", 0x2025988, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.quantity", 0x202598A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.item", 0x202598C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.quantity", 0x202598E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.item", 0x2025990, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.quantity", 0x2025992, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.item", 0x2025994, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.quantity", 0x2025996, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.item", 0x2025998, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.quantity", 0x202599A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.item", 0x202599C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.quantity", 0x202599E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.item", 0x20259A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.quantity", 0x20259A2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.item", 0x20259A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.quantity", 0x20259A6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.item", 0x20259A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.quantity", 0x20259AA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.item", 0x20259AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.quantity", 0x20259AE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.item", 0x20259B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.quantity", 0x20259B2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.item", 0x20259B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.quantity", 0x20259B6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.0.item", 0x20259B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.0.quantity", 0x20259BA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.1.item", 0x20259BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.1.quantity", 0x20259BE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.2.item", 0x20259C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.2.quantity", 0x20259C2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.3.item", 0x20259C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.3.quantity", 0x20259C6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.4.item", 0x20259C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.4.quantity", 0x20259CA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.5.item", 0x20259CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.5.quantity", 0x20259CE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.6.item", 0x20259D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.6.quantity", 0x20259D2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.7.item", 0x20259D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.7.quantity", 0x20259D6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.8.item", 0x20259D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.8.quantity", 0x20259DA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.9.item", 0x20259DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.9.quantity", 0x20259DE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.10.item", 0x20259E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.10.quantity", 0x20259E2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.11.item", 0x20259E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.11.quantity", 0x20259E6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.12.item", 0x20259E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.12.quantity", 0x20259EA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.13.item", 0x20259EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.13.quantity", 0x20259EE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.14.item", 0x20259F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.14.quantity", 0x20259F2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.15.item", 0x20259F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.15.quantity", 0x20259F6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.16.item", 0x20259F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.16.quantity", 0x20259FA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.17.item", 0x20259FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.17.quantity", 0x20259FE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.18.item", 0x2025A00, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.18.quantity", 0x2025A02, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.19.item", 0x2025A04, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.19.quantity", 0x2025A06, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.20.item", 0x2025A08, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.20.quantity", 0x2025A0A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.21.item", 0x2025A0C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.21.quantity", 0x2025A0E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.22.item", 0x2025A10, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.22.quantity", 0x2025A12, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.23.item", 0x2025A14, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.23.quantity", 0x2025A16, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.24.item", 0x2025A18, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.24.quantity", 0x2025A1A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.25.item", 0x2025A1C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.25.quantity", 0x2025A1E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.26.item", 0x2025A20, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.26.quantity", 0x2025A22, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.27.item", 0x2025A24, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.27.quantity", 0x2025A26, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.28.item", 0x2025A28, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.28.quantity", 0x2025A2A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.29.item", 0x2025A2C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.29.quantity", 0x2025A2E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.30.item", 0x2025A30, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.30.quantity", 0x2025A32, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.31.item", 0x2025A34, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.31.quantity", 0x2025A36, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.32.item", 0x2025A38, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.32.quantity", 0x2025A3A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.33.item", 0x2025A3C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.33.quantity", 0x2025A3E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.34.item", 0x2025A40, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.34.quantity", 0x2025A42, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.35.item", 0x2025A44, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.35.quantity", 0x2025A46, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.36.item", 0x2025A48, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.36.quantity", 0x2025A4A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.37.item", 0x2025A4C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.37.quantity", 0x2025A4E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.38.item", 0x2025A50, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.38.quantity", 0x2025A52, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.39.item", 0x2025A54, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.39.quantity", 0x2025A56, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.40.item", 0x2025A58, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.40.quantity", 0x2025A5A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.41.item", 0x2025A5C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.41.quantity", 0x2025A5E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.42.item", 0x2025A60, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.42.quantity", 0x2025A62, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.43.item", 0x2025A64, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.43.quantity", 0x2025A66, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.44.item", 0x2025A68, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.44.quantity", 0x2025A6A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.45.item", 0x2025A6C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.45.quantity", 0x2025A6E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.46.item", 0x2025A70, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.46.quantity", 0x2025A72, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.47.item", 0x2025A74, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.47.quantity", 0x2025A76, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.48.item", 0x2025A78, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.48.quantity", 0x2025A7A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.49.item", 0x2025A7C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.49.quantity", 0x2025A7E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.50.item", 0x2025A80, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.50.quantity", 0x2025A82, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.51.item", 0x2025A84, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.51.quantity", 0x2025A86, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.52.item", 0x2025A88, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.52.quantity", 0x2025A8A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.53.item", 0x2025A8C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.53.quantity", 0x2025A8E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.54.item", 0x2025A90, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.54.quantity", 0x2025A92, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.55.item", 0x2025A94, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.55.quantity", 0x2025A96, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.56.item", 0x2025A98, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.56.quantity", 0x2025A9A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.tmhm.57.item", 0x2025A9C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.57.quantity", 0x2025A9E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.0.item", 0x2025AA0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.0.quantity", 0x2025AA2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.1.item", 0x2025AA4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.1.quantity", 0x2025AA6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.2.item", 0x2025AA8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.2.quantity", 0x2025AAA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.3.item", 0x2025AAC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.3.quantity", 0x2025AAE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.4.item", 0x2025AB0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.4.quantity", 0x2025AB2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.5.item", 0x2025AB4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.5.quantity", 0x2025AB6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.6.item", 0x2025AB8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.6.quantity", 0x2025ABA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.7.item", 0x2025ABC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.7.quantity", 0x2025ABE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.8.item", 0x2025AC0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.8.quantity", 0x2025AC2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.9.item", 0x2025AC4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.9.quantity", 0x2025AC6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.10.item", 0x2025AC8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.10.quantity", 0x2025ACA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.11.item", 0x2025ACC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.11.quantity", 0x2025ACE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.12.item", 0x2025AD0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.12.quantity", 0x2025AD2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.13.item", 0x2025AD4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.13.quantity", 0x2025AD6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.14.item", 0x2025AD8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.14.quantity", 0x2025ADA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.15.item", 0x2025ADC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.15.quantity", 0x2025ADE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.16.item", 0x2025AE0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.16.quantity", 0x2025AE2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.17.item", 0x2025AE4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.17.quantity", 0x2025AE6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.18.item", 0x2025AE8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.18.quantity", 0x2025AEA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.19.item", 0x2025AEC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.19.quantity", 0x2025AEE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.20.item", 0x2025AF0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.20.quantity", 0x2025AF2, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.21.item", 0x2025AF4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.21.quantity", 0x2025AF6, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.22.item", 0x2025AF8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.22.quantity", 0x2025AFA, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.23.item", 0x2025AFC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.23.quantity", 0x2025AFE, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.24.item", 0x2025B00, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.24.quantity", 0x2025B02, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.25.item", 0x2025B04, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.25.quantity", 0x2025B06, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.26.item", 0x2025B08, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.26.quantity", 0x2025B0A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.27.item", 0x2025B0C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.27.quantity", 0x2025B0E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.28.item", 0x2025B10, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.28.quantity", 0x2025B12, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.29.item", 0x2025B14, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.29.quantity", 0x2025B16, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.30.item", 0x2025B18, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.30.quantity", 0x2025B1A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.31.item", 0x2025B1C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.31.quantity", 0x2025B1E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.32.item", 0x2025B20, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.32.quantity", 0x2025B22, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.33.item", 0x2025B24, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.33.quantity", 0x2025B26, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.34.item", 0x2025B28, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.34.quantity", 0x2025B2A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.35.item", 0x2025B2C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.35.quantity", 0x2025B2E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.36.item", 0x2025B30, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.36.quantity", 0x2025B32, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.37.item", 0x2025B34, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.37.quantity", 0x2025B36, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.38.item", 0x2025B38, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.38.quantity", 0x2025B3A, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.39.item", 0x2025B3C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.39.quantity", 0x2025B3E, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.40.item", 0x2025B40, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.40.quantity", 0x2025B42, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.41.item", 0x2025B44, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.41.quantity", 0x2025B46, [195, 34], 8899);
            mapper.AssertAreEqual("player.bag.berries.42.item", 0x2025B48, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.42.quantity", 0x2025B4A, [195, 34], 8899);
            mapper.AssertAreEqual("player.pcItems.0.item", 0x20257EC, [13, 0], "POTION");
            mapper.AssertAreEqual("player.pcItems.0.quantity", 0x20257EE, [1, 0], 1);
            mapper.AssertAreEqual("player.pcItems.1.item", 0x20257F0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.1.quantity", 0x20257F2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.2.item", 0x20257F4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.2.quantity", 0x20257F6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.3.item", 0x20257F8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.3.quantity", 0x20257FA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.4.item", 0x20257FC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.4.quantity", 0x20257FE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.5.item", 0x2025800, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.5.quantity", 0x2025802, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.6.item", 0x2025804, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.6.quantity", 0x2025806, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.7.item", 0x2025808, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.7.quantity", 0x202580A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.8.item", 0x202580C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.8.quantity", 0x202580E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.9.item", 0x2025810, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.9.quantity", 0x2025812, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.10.item", 0x2025814, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.10.quantity", 0x2025816, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.11.item", 0x2025818, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.11.quantity", 0x202581A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.12.item", 0x202581C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.12.quantity", 0x202581E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.13.item", 0x2025820, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.13.quantity", 0x2025822, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.14.item", 0x2025824, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.14.quantity", 0x2025826, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.15.item", 0x2025828, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.15.quantity", 0x202582A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.16.item", 0x202582C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.16.quantity", 0x202582E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.17.item", 0x2025830, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.17.quantity", 0x2025832, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.18.item", 0x2025834, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.18.quantity", 0x2025836, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.19.item", 0x2025838, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.19.quantity", 0x202583A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.20.item", 0x202583C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.20.quantity", 0x202583E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.21.item", 0x2025840, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.21.quantity", 0x2025842, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.22.item", 0x2025844, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.22.quantity", 0x2025846, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.23.item", 0x2025848, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.23.quantity", 0x202584A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.24.item", 0x202584C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.24.quantity", 0x202584E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.25.item", 0x2025850, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.25.quantity", 0x2025852, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.26.item", 0x2025854, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.26.quantity", 0x2025856, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.27.item", 0x2025858, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.27.quantity", 0x202585A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.28.item", 0x202585C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.28.quantity", 0x202585E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.29.item", 0x2025860, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.29.quantity", 0x2025862, [0, 0], 0);
            mapper.AssertAreEqual("overworld.mapName", 0x2031DBC, [3, 1], "VIRIDIAN_CITY");
            mapper.AssertAreEqual("battle.outcome", 0x2023E8A, [1], "WON");
            mapper.AssertAreEqual("battle.type.double", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.is_battle", 0x2022B4C, [4, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.trainer", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.first_battle", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link_in_battle", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.multi", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.safari", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.battle_tower", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.old_man_tutorial", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.roamer", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.eReader_trainer", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.kyogre_groudon", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost_unveiled", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.regi", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.pokedude", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.wild_scripted", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.legenadry_frlg", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.trainer_tower", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.opponent", 0x20386AE, [72, 1], "RIVAL_OAKS_LAB_CHARMANDER");
            mapper.AssertAreEqual("battle.trainer.opponentId", 0x20386AE, [72, 1], 328);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0x202402A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.personalityValue", 848199057);
            mapper.AssertAreEqual("battle.trainer.team.0.checksum", 0x1C, [156, 35], 9116);
            mapper.AssertAreEqual("battle.trainer.team.0.otID", 0x4, [189, 65, 155, 141], 2375762365);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0x8, [204, 187, 206, 206, 187, 206, 187, 255, 0, 0], "RATTATA");
            mapper.AssertAreEqual("battle.trainer.team.0.speciesArray", 0x20, [19, 0], " pokedexNumber: 19, name: 'Rattata' ");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0x20, [19, 0], "Rattata");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0x20, [19, 0], "19");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0x54, [4], 4);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0x24, [64, 0, 0, 0], 64);
            mapper.AssertAreEqual("battle.trainer.team.0.nature", 7);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0x58, [16, 0], 16);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0x5A, [10, 0], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0x5C, [8, 0], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0x5E, [10, 0], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0x60, [7, 0], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0x62, [8, 0], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.ivEggAbilityBlock", 0x48, [172, 171, 47, 143], 2402266028);
            mapper.AssertAreEqual("battle.trainer.team.0.ivHp", 0x48, [172, 171, 47, 143], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.ivAttack", 0x48, [172, 171, 47, 143], 29);
            mapper.AssertAreEqual("battle.trainer.team.0.ivDefense", 0x48, [172, 171, 47, 143], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpeed", 0x48, [172, 171, 47, 143], 31);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialAttack", 0x48, [172, 171, 47, 143], 18);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialDefense", 0x48, [172, 171, 47, 143], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.isEgg", 0x48, [172, 171, 47, 143], false);
            mapper.AssertAreEqual("battle.trainer.team.0.ability", 0x48, [172, 171, 47, 143], true);
            mapper.AssertAreEqual("battle.trainer.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0x2E, [39, 0], "TAIL WHIP");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0x34, [34], 34);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0x35, [27], 27);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.trainer.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("battle.trainer.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.otName", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            mapper.AssertAreEqual("battle.trainer.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerusStatus", 0x24, [64], 64);
            mapper.AssertAreEqual("battle.trainer.team.0.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.robbinsObedience", 0x2C, [33, 0, 39, 0], 2555937);
            mapper.AssertAreEqual("battle.trainer.team.1.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0x2023BCE, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0x2023C14, [188, 207, 198, 188, 187, 255, 0, 0, 33, 0, 0], "BULBA");
            mapper.AssertAreEqual("battle.yourPokemon.species", 0x2023BE4, [1, 0], "Bulbasaur");
            mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0x2023BE4, [1, 0], "1");
            mapper.AssertAreEqual("battle.yourPokemon.speciesArray", 0x2023BE4, [1, 0], " pokedexNumber: 1, name: 'Bulbasaur' ");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0x2023C0E, [8], 8);
            mapper.AssertAreEqual("battle.yourPokemon.expPoints", 0x2023C28, [41, 1, 0, 0], 297);
            mapper.AssertAreEqual("battle.yourPokemon.friendship", 0x2023C0F, [85], 85);
            mapper.AssertAreEqual("battle.yourPokemon.personalityValue", 0x2023C2C, [99, 7, 201, 178], 2999519075);
            mapper.AssertAreEqual("battle.yourPokemon.ability", 0x2023C04, [65], "OVERGROW");
            mapper.AssertAreEqual("battle.yourPokemon.heldItem", 0x2023C12, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0x2023C10, [25, 0], 25);
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0x2023C0C, [19, 0], 19);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0x2023BE6, [14, 0], 14);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0x2023BE8, [13, 0], 13);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0x2023BEA, [14, 0], 14);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0x2023BEC, [15, 0], 15);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0x2023BEE, [17, 0], 17);
            mapper.AssertAreEqual("battle.yourPokemon.ivEggAbilityBlock", 0x2023BF8, [35, 42, 93, 60], 1012738595);
            mapper.AssertAreEqual("battle.yourPokemon.ivHp", 0x2023BF8, [35, 42, 93, 60], 3);
            mapper.AssertAreEqual("battle.yourPokemon.ivAttack", 0x2023BF8, [35, 42, 93, 60], 17);
            mapper.AssertAreEqual("battle.yourPokemon.ivDefense", 0x2023BF8, [35, 42, 93, 60], 10);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpeed", 0x2023BF8, [35, 42, 93, 60], 26);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialAttack", 0x2023BF8, [35, 42, 93, 60], 5);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialDefense", 0x2023BF8, [35, 42, 93, 60], 30);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0x2023BF0, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0x2023BF2, [45, 0], "GROWL");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0x2023BF4, [73, 0], "LEECH SEED");
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0x2023BF6, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0x2023C08, [26], 26);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0x2023C09, [40], 40);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0x2023C0A, [10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0x2023C0B, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0x2023BFD, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0x2023BFE, [3], "-3");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0x2023BFF, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0x2023C00, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0x2023C01, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0x2023C02, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0x2023C03, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.focusEnergy", 0x2023C36, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0x2023C05, [12], "Grass");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0x2023C06, [3], "Poison");
            mapper.AssertAreEqual("battle.yourPokemon.status1", 0x2023C30, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.status2", 0x2023C30, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.otName", 0x2023C20, [205, 189, 201, 206, 206, 255, 255, 255], "SCOTT");
            mapper.AssertAreEqual("battle.yourSecondPokemon.partyPos", 0x2023BD2, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.nickname", 0x2023CC4, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.yourSecondPokemon.species", 0x2023C94, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.pokedexNumber", 0x2023C94, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speciesArray", 0x2023C94, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.level", 0x2023CBE, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.expPoints", 0x2023CD8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.friendship", 0x2023CBF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.personalityValue", 0x2023CDC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ability", 0x2023CB4, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.heldItem", 0x2023CC2, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.maxHp", 0x2023CC0, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.hp", 0x2023CBC, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.attack", 0x2023C96, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.defense", 0x2023C98, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speed", 0x2023C9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialAttack", 0x2023C9C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialDefense", 0x2023C9E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivEggAbilityBlock", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivHp", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivAttack", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivDefense", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpeed", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialAttack", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialDefense", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1", 0x2023CA0, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2", 0x2023CA2, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3", 0x2023CA4, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4", 0x2023CA6, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1pp", 0x2023CB8, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2pp", 0x2023CB9, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3pp", 0x2023CBA, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4pp", 0x2023CBB, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAttack", 0x2023CAD, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageDefense", 0x2023CAE, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpeed", 0x2023CAF, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialAttack", 0x2023CB0, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialDefense", 0x2023CB1, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAccuracy", 0x2023CB2, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageEvasion", 0x2023CB3, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.focusEnergy", 0x2023CE6, [0], false);
            mapper.AssertAreEqual("battle.yourSecondPokemon.type1", 0x2023CB5, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.type2", 0x2023CB6, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.status1", 0x2023CE0, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.status2", 0x2023CE0, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.otName", 0x2023CD0, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0x2023BD0, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.nickname", 0x2023C6C, [204, 187, 206, 206, 187, 206, 187, 255, 33, 0, 0], "RATTATA");
            mapper.AssertAreEqual("battle.enemyPokemon.species", 0x2023C3C, [19, 0], "Rattata");
            mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0x2023C3C, [19, 0], "19");
            mapper.AssertAreEqual("battle.enemyPokemon.speciesArray", 0x2023C3C, [19, 0], " pokedexNumber: 19, name: 'Rattata' ");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0x2023C66, [4], 4);
            mapper.AssertAreEqual("battle.enemyPokemon.expPoints", 0x2023C80, [64, 0, 0, 0], 64);
            mapper.AssertAreEqual("battle.enemyPokemon.friendship", 0x2023C67, [70], 70);
            mapper.AssertAreEqual("battle.enemyPokemon.personalityValue", 0x2023C84, [145, 125, 142, 50], 848199057);
            mapper.AssertAreEqual("battle.enemyPokemon.ability", 0x2023C5C, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0x2023C6A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0x2023C68, [16, 0], 16);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0x2023C64, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0x2023C3E, [10, 0], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0x2023C40, [8, 0], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0x2023C42, [10, 0], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0x2023C44, [7, 0], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0x2023C46, [8, 0], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.ivEggAbilityBlock", 0x2023C50, [172, 171, 47, 143], 2402266028);
            mapper.AssertAreEqual("battle.enemyPokemon.ivHp", 0x2023C50, [172, 171, 47, 143], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.ivAttack", 0x2023C50, [172, 171, 47, 143], 29);
            mapper.AssertAreEqual("battle.enemyPokemon.ivDefense", 0x2023C50, [172, 171, 47, 143], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpeed", 0x2023C50, [172, 171, 47, 143], 31);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialAttack", 0x2023C50, [172, 171, 47, 143], 18);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialDefense", 0x2023C50, [172, 171, 47, 143], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0x2023C48, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0x2023C4A, [39, 0], "TAIL WHIP");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0x2023C4C, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0x2023C4E, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0x2023C60, [34], 34);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0x2023C61, [27], 27);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0x2023C62, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0x2023C63, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0x2023C55, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0x2023C56, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0x2023C57, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0x2023C58, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0x2023C59, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0x2023C5A, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0x2023C5B, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.focusEnergy", 0x2023C8E, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0x2023C5D, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0x2023C5E, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyPokemon.status1", 0x2023C88, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.status2", 0x2023C88, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.otName", 0x2023C78, [205, 189, 201, 206, 206, 255, 255, 255], "SCOTT");
            mapper.AssertAreEqual("battle.enemySecondPokemon.partyPos", 0x2023BD4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.nickname", 0x2023D1C, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.enemySecondPokemon.species", 0x2023CEC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.pokedexNumber", 0x2023CEC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speciesArray", 0x2023CEC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.level", 0x2023D16, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.expPoints", 0x2023D30, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.friendship", 0x2023D17, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.personalityValue", 0x2023D34, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ability", 0x2023D0C, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.heldItem", 0x2023D1A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.maxHp", 0x2023D18, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.hp", 0x2023D14, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.attack", 0x2023CEE, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.defense", 0x2023CF0, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speed", 0x2023CF2, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialAttack", 0x2023CF4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialDefense", 0x2023CF6, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivEggAbilityBlock", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivHp", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivAttack", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivDefense", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpeed", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialAttack", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialDefense", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1", 0x2023CF8, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2", 0x2023CFA, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3", 0x2023CFC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4", 0x2023CFE, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1pp", 0x2023D10, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2pp", 0x2023D11, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3pp", 0x2023D12, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4pp", 0x2023D13, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAttack", 0x2023D05, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageDefense", 0x2023D06, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpeed", 0x2023D07, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialAttack", 0x2023D08, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialDefense", 0x2023D09, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAccuracy", 0x2023D0A, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageEvasion", 0x2023D0B, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.focusEnergy", 0x2023D3E, [0], false);
            mapper.AssertAreEqual("battle.enemySecondPokemon.type1", 0x2023D0D, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.type2", 0x2023D0E, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.status1", 0x2023D38, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.status2", 0x2023D38, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.otName", 0x2023D28, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusReflect", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguardCount", 0x2023DEA, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0x2023DE6, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflectCount", 0x2023DE4, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0x2023DF5, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0x2023DF1, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0x2023DEF, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x2023F1C, [0], null);
            mapper.AssertAreEqual("battle.field.weatherCount", 0x2023F48, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleWeather", 0x2023F1C, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleWeatherTurnCounter", 0x2023F48, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleOutcome", 0x2023E8A, [1], "WON");
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTiles", 0x2024018, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTilesBuffer", 0x202401C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleDialogue", 0x2023D44, [6], null);
            mapper.AssertAreEqual("events.trashCanPuzzle", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.beatChampion", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.gameClear", 0x2026539, [3], false);
            mapper.AssertAreEqual("options.battleAnim", 0x20245C5, [6], true);
            mapper.AssertAreEqual("options.battleStyle", 0x20245C5, [6], true);
            mapper.AssertAreEqual("options.sound", 0x20245C5, [6], false);
            mapper.AssertAreEqual("options.buttonMode", 0x20245C3, [0], 0);
            mapper.AssertAreEqual("gameTime.hours", 0x20245BE, [0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0x20245C0, [12], 12);
            mapper.AssertAreEqual("gameTime.seconds", 0x20245C1, [12], 12);
            mapper.AssertAreEqual("gameTime.frames", 0x20245C2, [49], 49);
            mapper.AssertAreEqual("pointers.dma1", 0x3005008, [84, 85, 2, 2], 33707348);
            mapper.AssertAreEqual("pointers.dma2", 0x300500C, [176, 69, 2, 2], 33703344);
            mapper.AssertAreEqual("pointers.dma3", 0x3005010, [60, 147, 2, 2], 33723196);
            mapper.AssertAreEqual("pointers.callback1", 0x30030F0, [73, 101, 5, 8], "Overworld");
            mapper.AssertAreEqual("pointers.callback2", 0x30030F4, [201, 101, 5, 8], "Overworld");
            mapper.AssertAreEqual("meta.generation", "3");
            mapper.AssertAreEqual("meta.gameName", "FireRed and LeafGreen");
            mapper.AssertAreEqual("meta.gameType", "Remakes");
            mapper.AssertAreEqual("meta.mapperType", "Deprecated");
            mapper.AssertAreEqual("meta.state", "Overworld");
        }

    }
}

