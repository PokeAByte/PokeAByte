using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenAPI.GameHook;
using System;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class Deprecated_Pokemon_RubySapphire : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBA_PokemonRubyDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x30045D4, [199, 187, 211, 255, 255, 255, 255, 0], "MAY");
            mapper.AssertAreEqual("player.teamCount", 0x3004350, [1], 1);
            mapper.AssertAreEqual("player.team.0.personalityValue", 1773943925);
            mapper.AssertAreEqual("player.team.0.checksum", 0x1C, [225, 25], 6625);
            mapper.AssertAreEqual("player.team.0.otID", 0x4, [21, 1, 70, 198], 3326476565);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [201, 201, 201, 201, 201, 201, 201, 201, 201, 201], "OOOOOOOOOO");
            mapper.AssertAreEqual("player.team.0.speciesArray", 0x20, [27, 1], " pokedexNumber: 258, name: 'Mudkip' ");
            mapper.AssertAreEqual("player.team.0.species", 0x20, [27, 1], "Mudkip");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0x20, [27, 1], "258");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [7], 7);
            mapper.AssertAreEqual("player.team.0.expPoints", 0x24, [54, 1, 0, 0], 310);
            mapper.AssertAreEqual("player.team.0.nature", 0);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [81], 81);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.hp", 0x56, [6, 0], 6);
            mapper.AssertAreEqual("player.team.0.maxHp", 0x58, [24, 0], 24);
            mapper.AssertAreEqual("player.team.0.attack", 0x5A, [16, 0], 16);
            mapper.AssertAreEqual("player.team.0.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("player.team.0.speed", 0x5E, [11, 0], 11);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0x60, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0x62, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.ivEggAbilityBlock", 0x48, [103, 178, 247, 50], 855093863);
            mapper.AssertAreEqual("player.team.0.ivHp", 0x48, [103, 178, 247, 50], 7);
            mapper.AssertAreEqual("player.team.0.ivAttack", 0x48, [103, 178, 247, 50], 19);
            mapper.AssertAreEqual("player.team.0.ivDefense", 0x48, [103, 178, 247, 50], 12);
            mapper.AssertAreEqual("player.team.0.ivSpeed", 0x48, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("player.team.0.ivSpecialAttack", 0x48, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("player.team.0.ivSpecialDefense", 0x48, [103, 178, 247, 50], 25);
            mapper.AssertAreEqual("player.team.0.isEgg", 0x48, [103, 178, 247, 50], false);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [103, 178, 247, 50], false);
            mapper.AssertAreEqual("player.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.0.evAttack", 0x39, [2], 2);
            mapper.AssertAreEqual("player.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpeed", 0x3B, [5], 5);
            mapper.AssertAreEqual("player.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.0.move2", 0x2E, [45, 0], "GROWL");
            mapper.AssertAreEqual("player.team.0.move3", 0x30, [189, 0], "MUD-SLAP");
            mapper.AssertAreEqual("player.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0x34, [24], 24);
            mapper.AssertAreEqual("player.team.0.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.move3pp", 0x36, [10], 10);
            mapper.AssertAreEqual("player.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.otName", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("player.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.pokerusStatus", 0x24, [54], 54);
            mapper.AssertAreEqual("player.team.0.metLocation", 0x25, [1], 1);
            mapper.AssertAreEqual("player.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.robbinsObedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("player.team.1.personalityValue", 0);
            mapper.AssertAreEqual("player.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nature", 0);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.personalityValue", 0);
            mapper.AssertAreEqual("player.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nature", 0);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.personalityValue", 0);
            mapper.AssertAreEqual("player.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nature", 0);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.personalityValue", 0);
            mapper.AssertAreEqual("player.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nature", 0);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.personalityValue", 0);
            mapper.AssertAreEqual("player.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nature", 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0x2026A16, [0], false);
            mapper.AssertAreEqual("battle.outcome", 0x2024D26, [1], "WON");
            mapper.AssertAreEqual("battle.type.double", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.is_battle", 0x20239F8, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.trainer", 0x20239F8, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.first_battle", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link_in_battle", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.multi", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.safari", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.battle_tower", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.old_man_tutorial", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.roamer", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.eReader_trainer", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.kyogre_groudon", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost_unveiled", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.regi", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.pokedude", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.wild_scripted", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.legenadry_frlg", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.trainer_tower", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.personalityValue", 701320);
            mapper.AssertAreEqual("battle.trainer.team.0.checksum", 0x1C, [236, 24], 6380);
            mapper.AssertAreEqual("battle.trainer.team.0.otID", 0x4, [60, 171, 1, 219], 3674319676);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0x8, [206, 204, 191, 191, 189, 197, 201, 255, 8, 0], "TREECKO");
            mapper.AssertAreEqual("battle.trainer.team.0.speciesArray", 0x20, [21, 1], " pokedexNumber: 252, name: 'Treecko' ");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0x20, [21, 1], "Treecko");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0x20, [21, 1], "252");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0x54, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0x24, [135, 0, 0, 0], 135);
            mapper.AssertAreEqual("battle.trainer.team.0.nature", 20);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0x58, [19, 0], 19);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0x5A, [8, 0], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0x5C, [8, 0], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0x5E, [12, 0], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0x60, [11, 0], 11);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0x62, [11, 0], 11);
            mapper.AssertAreEqual("battle.trainer.team.0.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0x2C, [1, 0], "POUND");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0x2E, [43, 0], "LEER");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0x34, [31], 31);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0x35, [30], 30);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.trainer.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("battle.trainer.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.otName", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("battle.trainer.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerusStatus", 0x24, [135], 135);
            mapper.AssertAreEqual("battle.trainer.team.0.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.robbinsObedience", 0x2C, [1, 0, 43, 0], 2818049);
            mapper.AssertAreEqual("battle.trainer.team.1.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0x2024A6A, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0x2024AB0, [201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 255], "OOOOOOOOOO");
            mapper.AssertAreEqual("battle.yourPokemon.species", 0x2024A80, [27, 1], "Mudkip");
            mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0x2024A80, [27, 1], "258");
            mapper.AssertAreEqual("battle.yourPokemon.speciesArray", 0x2024A80, [27, 1], " pokedexNumber: 258, name: 'Mudkip' ");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0x2024AAA, [7], 7);
            mapper.AssertAreEqual("battle.yourPokemon.expPoints", 0x2024AC4, [241, 0, 0, 0], 241);
            mapper.AssertAreEqual("battle.yourPokemon.friendship", 0x2024AAB, [81], 81);
            mapper.AssertAreEqual("battle.yourPokemon.personalityValue", 0x2024AC8, [117, 60, 188, 105], 1773943925);
            mapper.AssertAreEqual("battle.yourPokemon.ability", 0x2024AA0, [67], "TORRENT");
            mapper.AssertAreEqual("battle.yourPokemon.heldItem", 0x2024AAE, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0x2024AAC, [24, 0], 24);
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0x2024AA8, [6, 0], 6);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0x2024A82, [16, 0], 16);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0x2024A84, [12, 0], 12);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0x2024A86, [11, 0], 11);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0x2024A88, [13, 0], 13);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0x2024A8A, [13, 0], 13);
            mapper.AssertAreEqual("battle.yourPokemon.ivEggAbilityBlock", 0x2024A94, [103, 178, 247, 50], 855093863);
            mapper.AssertAreEqual("battle.yourPokemon.ivHp", 0x2024A94, [103, 178, 247, 50], 7);
            mapper.AssertAreEqual("battle.yourPokemon.ivAttack", 0x2024A94, [103, 178, 247, 50], 19);
            mapper.AssertAreEqual("battle.yourPokemon.ivDefense", 0x2024A94, [103, 178, 247, 50], 12);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpeed", 0x2024A94, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialAttack", 0x2024A94, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialDefense", 0x2024A94, [103, 178, 247, 50], 25);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0x2024A8C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0x2024A8E, [45, 0], "GROWL");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0x2024A90, [189, 0], "MUD-SLAP");
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0x2024A92, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0x2024AA4, [24], 24);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0x2024AA5, [40], 40);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0x2024AA6, [10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0x2024AA7, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0x2024ABB, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0x2024ABB, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0x2024ABB, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0x2024ABB, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0x2024A99, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0x2024A9A, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0x2024A9B, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0x2024A9C, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0x2024A9D, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0x2024A9E, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0x2024A9F, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.focusEnergy", 0x2024AD2, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0x2024AA1, [11], "Water");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0x2024AA2, [11], "Water");
            mapper.AssertAreEqual("battle.yourPokemon.status1", 0x2024ACC, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.status2", 0x2024ACC, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.otName", 0x2024ABC, [199, 187, 211, 255, 224, 69, 0, 3], "MAY");
            mapper.AssertAreEqual("battle.yourSecondPokemon.partyPos", 0x2024A6E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.nickname", 0x2024B60, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.yourSecondPokemon.species", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.pokedexNumber", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speciesArray", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.level", 0x2024B5A, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.expPoints", 0x2024B74, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.friendship", 0x2024B5B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.personalityValue", 0x2024B78, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ability", 0x2024B50, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.heldItem", 0x2024B5E, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.maxHp", 0x2024B5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.hp", 0x2024B58, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.attack", 0x2024B32, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.defense", 0x2024B34, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speed", 0x2024B36, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialAttack", 0x2024B38, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialDefense", 0x2024B3A, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivEggAbilityBlock", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivHp", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivAttack", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivDefense", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpeed", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialAttack", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialDefense", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1", 0x2024B3C, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2", 0x2024B3E, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3", 0x2024B40, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4", 0x2024B42, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1pp", 0x2024B54, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2pp", 0x2024B55, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3pp", 0x2024B56, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4pp", 0x2024B57, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1ppUp", 0x2024B6B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2ppUp", 0x2024B6B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3ppUp", 0x2024B6B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4ppUp", 0x2024B6B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAttack", 0x2024B49, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageDefense", 0x2024B4A, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpeed", 0x2024B4B, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialAttack", 0x2024B4C, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialDefense", 0x2024B4D, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAccuracy", 0x2024B4E, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageEvasion", 0x2024B4F, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.focusEnergy", 0x2024B82, [0], false);
            mapper.AssertAreEqual("battle.yourSecondPokemon.type1", 0x2024B51, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.type2", 0x2024B52, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.status1", 0x2024B7C, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.status2", 0x2024B7C, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.otName", 0x2024B6C, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0x2024A6C, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.nickname", 0x2024B08, [206, 204, 191, 191, 189, 197, 201, 255, 201, 201, 255], "TREECKO");
            mapper.AssertAreEqual("battle.enemyPokemon.species", 0x2024AD8, [21, 1], "Treecko");
            mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0x2024AD8, [21, 1], "252");
            mapper.AssertAreEqual("battle.enemyPokemon.speciesArray", 0x2024AD8, [21, 1], " pokedexNumber: 252, name: 'Treecko' ");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0x2024B02, [5], 5);
            mapper.AssertAreEqual("battle.enemyPokemon.expPoints", 0x2024B1C, [135, 0, 0, 0], 135);
            mapper.AssertAreEqual("battle.enemyPokemon.friendship", 0x2024B03, [70], 70);
            mapper.AssertAreEqual("battle.enemyPokemon.personalityValue", 0x2024B20, [136, 179, 10, 0], 701320);
            mapper.AssertAreEqual("battle.enemyPokemon.ability", 0x2024AF8, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0x2024B06, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0x2024B04, [19, 0], 19);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0x2024B00, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0x2024ADA, [8, 0], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0x2024ADC, [8, 0], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0x2024ADE, [12, 0], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0x2024AE0, [11, 0], 11);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0x2024AE2, [11, 0], 11);
            mapper.AssertAreEqual("battle.enemyPokemon.ivEggAbilityBlock", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivHp", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivAttack", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivDefense", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpeed", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialAttack", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialDefense", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0x2024AE4, [1, 0], "POUND");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0x2024AE6, [43, 0], "LEER");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0x2024AE8, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0x2024AEA, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0x2024AFC, [31], 31);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0x2024AFD, [30], 30);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0x2024AFE, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0x2024AFF, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0x2024B13, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0x2024B13, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0x2024B13, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0x2024B13, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0x2024AF1, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0x2024AF2, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0x2024AF3, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0x2024AF4, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0x2024AF5, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0x2024AF6, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0x2024AF7, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.focusEnergy", 0x2024B2A, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0x2024AF9, [12], "Grass");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0x2024AFA, [12], "Grass");
            mapper.AssertAreEqual("battle.enemyPokemon.status1", 0x2024B24, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.status2", 0x2024B24, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.otName", 0x2024B14, [199, 187, 211, 255, 224, 69, 0, 3], "MAY");
            mapper.AssertAreEqual("battle.enemySecondPokemon.partyPos", 0x2024A70, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.nickname", 0x2024BB8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.enemySecondPokemon.species", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.pokedexNumber", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speciesArray", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.level", 0x2024BB2, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.expPoints", 0x2024BCC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.friendship", 0x2024BB3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.personalityValue", 0x2024BD0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ability", 0x2024BA8, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.heldItem", 0x2024BB6, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.maxHp", 0x2024BB4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.hp", 0x2024BB0, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.attack", 0x2024B8A, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.defense", 0x2024B8C, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speed", 0x2024B8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialAttack", 0x2024B90, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialDefense", 0x2024B92, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivEggAbilityBlock", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivHp", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivAttack", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivDefense", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpeed", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialAttack", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialDefense", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1", 0x2024B94, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2", 0x2024B96, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3", 0x2024B98, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4", 0x2024B9A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1pp", 0x2024BAC, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2pp", 0x2024BAD, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3pp", 0x2024BAE, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4pp", 0x2024BAF, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1ppUp", 0x2024BC3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2ppUp", 0x2024BC3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3ppUp", 0x2024BC3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4ppUp", 0x2024BC3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAttack", 0x2024BA1, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageDefense", 0x2024BA2, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpeed", 0x2024BA3, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialAttack", 0x2024BA4, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialDefense", 0x2024BA5, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAccuracy", 0x2024BA6, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageEvasion", 0x2024BA7, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.focusEnergy", 0x2024BDA, [0], false);
            mapper.AssertAreEqual("battle.enemySecondPokemon.type1", 0x2024BA9, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.type2", 0x2024BAA, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.status1", 0x2024BD4, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.status2", 0x2024BD4, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.otName", 0x2024BC4, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0x2024C7A, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusReflect", 0x2024C7A, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0x2024C7A, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguardCount", 0x2024C86, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0x2024C82, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflectCount", 0x2024C80, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0x2024C7C, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0x2024C7C, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0x2024C7C, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0x2024C91, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0x2024C8D, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0x2024C8B, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x2023F1C, [0], null);
            mapper.AssertAreEqual("battle.field.weatherCount", 0x2023F48, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleWeather", 0x2024DB8, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleWeatherTurnCounter", 0x2024DE4, [0], 0);
            mapper.AssertAreEqual("gameTime.hours", 0x2024EB2, [0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0x2024EB4, [8], 8);
            mapper.AssertAreEqual("gameTime.seconds", 0x2024EB5, [49], 49);
            mapper.AssertAreEqual("gameTime.frames", 0x2024EB6, [14], 14);
            mapper.AssertAreEqual("pointers.callback1", 0x3001770, [113, 67, 5, 8], null);
            mapper.AssertAreEqual("pointers.callback2", 0x3001774, [197, 67, 5, 8], null);
            mapper.AssertAreEqual("meta.generation", "3");
            mapper.AssertAreEqual("meta.gameName", "Ruby and Sapphire");
            mapper.AssertAreEqual("meta.gameType", "Originals");
            mapper.AssertAreEqual("meta.mapperType", "Deprecated");
        }


    }
}

