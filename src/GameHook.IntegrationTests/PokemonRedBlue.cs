using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonRedBlue : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GB_PokemonRed(6);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0xD158, [128, 128, 128, 128, 128, 128, 128, 80, 0, 0, 0], "AAAAAAA");
            mapper.AssertAreEqual("player.player_id", 0xD359, [44, 131], 11395);
            mapper.AssertAreEqual("player.team_count", 0xD163, [1], 1);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", 0xD16B, [176], "Charmander");
            mapper.AssertAreEqual("player.active_pokemon.dex_number", 0xD16B, [176], 4);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0xD2B5, [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 80], "AAAAAAAAAA");
            mapper.AssertAreEqual("player.active_pokemon.level", 0xD18C, [8], 8);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0xD179, [0, 1, 144], 400);
            mapper.AssertAreEqual("player.active_pokemon.type_1", 0xD170, [20], "Fire");
            mapper.AssertAreEqual("player.active_pokemon.type_2", 0xD171, [20], "Fire");
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0xD177, [44, 131], 11395);
            mapper.AssertAreEqual("player.active_pokemon.catch_rate", 0xD172, [45], 45);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0xD16F, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0xD173, [10], "Scratch");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0xD188, [26], 26);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0xD188, [26], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0xD174, [45], "Growl");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0xD189, [40], 40);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0xD189, [40], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0xD175, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0xD176, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0xD18B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0xD18B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0xD16C, [0, 7], 7);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0xD18D, [0, 25], 25);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0xD18F, [0, 13], 13);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0xD191, [0, 14], 14);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0xD193, [0, 17], 17);
            mapper.AssertAreEqual("player.active_pokemon.stats.special", 0xD195, [0, 15], 15);
            //mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 9);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0xD186, [28], 1);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0xD186, [28], 12);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0xD187, [239], 14);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special", 0xD187, [239], 15);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0xD17C, [0, 239], 239);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0xD17E, [1, 3], 259);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0xD180, [0, 245], 245);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0xD182, [1, 66], 322);
            mapper.AssertAreEqual("player.active_pokemon.evs.special", 0xD184, [0, 185], 185);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.confusion", false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.toxic", false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.leech_seed", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bide", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.thrash", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.multi_hit", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.flinch", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.charging", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.multi_turn", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.invulnerable", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bypass_accuracy", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.mist", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.focus_energy", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.substitute", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.recharge", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.rage", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.lightscreen", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.reflect", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.transformed", false);
            mapper.AssertAreEqual("player.active_pokemon.counters.multi_hit", 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.confusion", 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.toxic", 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.disable", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.effect", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.power", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.pp_max", 0);
            mapper.AssertAreEqual("player.team.0.species", 0xD16B, [176], "Charmander");
            mapper.AssertAreEqual("player.team.0.dex_number", 0xD16B, [176], 4);
            mapper.AssertAreEqual("player.team.0.nickname", 0xD2B5, [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 80], "AAAAAAAAAA");
            mapper.AssertAreEqual("player.team.0.level", 0xD18C, [8], 8);
            mapper.AssertAreEqual("player.team.0.exp", 0xD179, [0, 1, 144], 400);
            mapper.AssertAreEqual("player.team.0.type_1", 0xD170, [20], "Fire");
            mapper.AssertAreEqual("player.team.0.type_2", 0xD171, [20], "Fire");
            mapper.AssertAreEqual("player.team.0.ot_id", 0xD177, [44, 131], 11395);
            mapper.AssertAreEqual("player.team.0.catch_rate", 0xD172, [45], 45);
            mapper.AssertAreEqual("player.team.0.status_condition", 0xD16F, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0xD173, [10], "Scratch");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0xD188, [26], 26);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0xD188, [26], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0xD174, [45], "Growl");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0xD189, [40], 40);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0xD189, [40], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0xD175, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0xD176, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0xD18B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0xD18B, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0xD16C, [0, 7], 7);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0xD18D, [0, 25], 25);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0xD18F, [0, 13], 13);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0xD191, [0, 14], 14);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0xD193, [0, 17], 17);
            mapper.AssertAreEqual("player.team.0.stats.special", 0xD195, [0, 15], 15);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 9);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0xD186, [28], 1);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0xD186, [28], 12);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0xD187, [239], 14);
            mapper.AssertAreEqual("player.team.0.ivs.special", 0xD187, [239], 15);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0xD17C, [0, 239], 239);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0xD17E, [1, 3], 259);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0xD180, [0, 245], 245);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0xD182, [1, 66], 322);
            mapper.AssertAreEqual("player.team.0.evs.special", 0xD184, [0, 185], 185);
            mapper.AssertAreEqual("player.team.1.species", 0xD197, [0], null);
            mapper.AssertAreEqual("player.team.1.dex_number", 0xD197, [0], null);
            mapper.AssertAreEqual("player.team.1.nickname", 0xD2C0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.level", 0xD1B8, [0], 0);
            mapper.AssertAreEqual("player.team.1.exp", 0xD1A5, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.type_1", 0xD19C, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.type_2", 0xD19D, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.ot_id", 0xD1A3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.catch_rate", 0xD19E, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0xD19B, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0xD19F, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0xD1A0, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0xD1A1, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0xD1A2, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0xD198, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0xD1B9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0xD1BB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0xD1BD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0xD1BF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special", 0xD1C1, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0xD1A8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0xD1AA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0xD1AC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0xD1AE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special", 0xD1B0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.species", 0xD1C3, [0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0xD1C3, [0], null);
            mapper.AssertAreEqual("player.team.2.nickname", 0xD2CB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.level", 0xD1E4, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0xD1D1, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.type_1", 0xD1C8, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.type_2", 0xD1C9, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.ot_id", 0xD1CF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.catch_rate", 0xD1CA, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0xD1C7, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0xD1CB, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0xD1CC, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0xD1CD, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0xD1CE, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0xD1C4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0xD1E5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0xD1E7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0xD1E9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0xD1EB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special", 0xD1ED, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0xD1D4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0xD1D6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0xD1D8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0xD1DA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special", 0xD1DC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.species", 0xD1EF, [0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0xD1EF, [0], null);
            mapper.AssertAreEqual("player.team.3.nickname", 0xD2D6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.level", 0xD210, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0xD1FD, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.type_1", 0xD1F4, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.type_2", 0xD1F5, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.ot_id", 0xD1FB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.catch_rate", 0xD1F6, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0xD1F3, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0xD1F7, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0xD1F8, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0xD1F9, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0xD1FA, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0xD20F, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0xD1F0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0xD211, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0xD213, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0xD215, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0xD217, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special", 0xD219, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0xD200, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0xD202, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0xD204, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0xD206, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special", 0xD208, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.species", 0xD21B, [0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0xD21B, [0], null);
            mapper.AssertAreEqual("player.team.4.nickname", 0xD2E1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.level", 0xD23C, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0xD229, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.type_1", 0xD220, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.type_2", 0xD221, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.ot_id", 0xD227, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.catch_rate", 0xD222, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0xD21F, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0xD223, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0xD224, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0xD225, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0xD226, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0xD23B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0xD23B, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0xD21C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0xD23D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0xD23F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0xD241, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0xD243, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special", 0xD245, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0xD22C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0xD22E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0xD230, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0xD232, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special", 0xD234, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0xD247, [0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0xD247, [0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0xD2EC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.level", 0xD268, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0xD255, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.type_1", 0xD24C, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.type_2", 0xD24D, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.ot_id", 0xD253, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.catch_rate", 0xD24E, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0xD24B, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0xD24F, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0xD250, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0xD251, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0xD252, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0xD267, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0xD267, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0xD248, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0xD269, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0xD26B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0xD26D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0xD26F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special", 0xD271, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0xD258, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0xD25A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0xD25C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0xD25E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special", 0xD260, [0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0xD356, [0], false);
            //mapper.AssertAreEqual("player.pokedex_seen", 0xD30A, [72, 146, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], (bool[])[false, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
            //mapper.AssertAreEqual("player.pokedex_caught", 0xD2F7, [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], (bool[])[false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
            mapper.AssertAreEqual("player.starter_pokemon", 0xD717, [176], "Charmander");
            mapper.AssertAreEqual("player.joypad_simulation", 0xCD38, [0], false);
            mapper.AssertAreEqual("player.joypad_ignore", 0xCD6B, [0], 0);
            mapper.AssertAreEqual("bag.money", 0xD347, [0, 49, 117], 3175);
            mapper.AssertAreEqual("bag.coins", 0xD5A4, [0, 0], 0);
            mapper.AssertAreEqual("bag.item_count", 0xD31D, [1], 1);
            mapper.AssertAreEqual("bag.items.0.item", 0xD31E, [20], "POTION");
            mapper.AssertAreEqual("bag.items.0.quantity", 0xD31F, [1], 1);
            mapper.AssertAreEqual("bag.items.1.item", 0xD320, [255], null);
            mapper.AssertAreEqual("bag.items.1.quantity", 0xD321, [0], 0);
            mapper.AssertAreEqual("bag.items.2.item", 0xD322, [0], null);
            mapper.AssertAreEqual("bag.items.2.quantity", 0xD323, [0], 0);
            mapper.AssertAreEqual("bag.items.3.item", 0xD324, [0], null);
            mapper.AssertAreEqual("bag.items.3.quantity", 0xD325, [0], 0);
            mapper.AssertAreEqual("bag.items.4.item", 0xD326, [0], null);
            mapper.AssertAreEqual("bag.items.4.quantity", 0xD327, [0], 0);
            mapper.AssertAreEqual("bag.items.5.item", 0xD328, [0], null);
            mapper.AssertAreEqual("bag.items.5.quantity", 0xD329, [0], 0);
            mapper.AssertAreEqual("bag.items.6.item", 0xD32A, [0], null);
            mapper.AssertAreEqual("bag.items.6.quantity", 0xD32B, [0], 0);
            mapper.AssertAreEqual("bag.items.7.item", 0xD32C, [0], null);
            mapper.AssertAreEqual("bag.items.7.quantity", 0xD32D, [0], 0);
            mapper.AssertAreEqual("bag.items.8.item", 0xD32E, [0], null);
            mapper.AssertAreEqual("bag.items.8.quantity", 0xD32F, [0], 0);
            mapper.AssertAreEqual("bag.items.9.item", 0xD330, [0], null);
            mapper.AssertAreEqual("bag.items.9.quantity", 0xD331, [0], 0);
            mapper.AssertAreEqual("bag.items.10.item", 0xD332, [0], null);
            mapper.AssertAreEqual("bag.items.10.quantity", 0xD333, [0], 0);
            mapper.AssertAreEqual("bag.items.11.item", 0xD334, [0], null);
            mapper.AssertAreEqual("bag.items.11.quantity", 0xD335, [0], 0);
            mapper.AssertAreEqual("bag.items.12.item", 0xD336, [0], null);
            mapper.AssertAreEqual("bag.items.12.quantity", 0xD337, [0], 0);
            mapper.AssertAreEqual("bag.items.13.item", 0xD338, [0], null);
            mapper.AssertAreEqual("bag.items.13.quantity", 0xD339, [0], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0xD33A, [0], null);
            mapper.AssertAreEqual("bag.items.14.quantity", 0xD33B, [0], 0);
            mapper.AssertAreEqual("bag.items.15.item", 0xD33C, [0], null);
            mapper.AssertAreEqual("bag.items.15.quantity", 0xD33D, [0], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0xD33E, [0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0xD33F, [0], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0xD340, [0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0xD341, [0], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0xD342, [0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0xD343, [0], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0xD344, [0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0xD345, [0], 0);
            mapper.AssertAreEqual("overworld.map_name", 0xD35E, [51], "Viridian Forest");
            mapper.AssertAreEqual("overworld.map_index", 0xD35E, [51], 51);
            mapper.AssertAreEqual("overworld.y", 0xD361, [33], 33);
            mapper.AssertAreEqual("overworld.x", 0xD362, [27], 27);
            mapper.AssertAreEqual("overworld.movement_state", 0xD700, [0], "Walk");
            mapper.AssertAreEqual("overworld.encounter_rate", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.repel_count", 0xD0DB, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.walking", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.encounter_rates.surfing", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.encounter_rates.old_rod", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.encounter_rates.good_rod", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.encounter_rates.super_rod", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.encounter_table.common.0.level", 0xD888, [4], 4);
            mapper.AssertAreEqual("overworld.encounter_table.common.0.species", 0xD889, [112], "Weedle");
            mapper.AssertAreEqual("overworld.encounter_table.common.0.dex_number", 0xD889, [112], 13);
            mapper.AssertAreEqual("overworld.encounter_table.common.1.level", 0xD88A, [5], 5);
            mapper.AssertAreEqual("overworld.encounter_table.common.1.species", 0xD88B, [113], "Kakuna");
            mapper.AssertAreEqual("overworld.encounter_table.common.1.dex_number", 0xD88B, [113], 14);
            mapper.AssertAreEqual("overworld.encounter_table.common.2.level", 0xD88C, [3], 3);
            mapper.AssertAreEqual("overworld.encounter_table.common.2.species", 0xD88D, [112], "Weedle");
            mapper.AssertAreEqual("overworld.encounter_table.common.2.dex_number", 0xD88D, [112], 13);
            mapper.AssertAreEqual("overworld.encounter_table.common.3.level", 0xD88E, [5], 5);
            mapper.AssertAreEqual("overworld.encounter_table.common.3.species", 0xD88F, [112], "Weedle");
            mapper.AssertAreEqual("overworld.encounter_table.common.3.dex_number", 0xD88F, [112], 13);
            //mapper.AssertAreEqual("overworld.encounter_table.common.4.level", 0xD890, [4], 4);
            //mapper.AssertAreEqual("overworld.encounter_table.common.4.species", 0xD891, [113], "Kakuna");
            //mapper.AssertAreEqual("overworld.encounter_table.common.4.dex_number", 0xD891, [113], 14);
            //mapper.AssertAreEqual("overworld.encounter_table.uncommon.0.level", 0xD88A, [5], 5);
            //mapper.AssertAreEqual("overworld.encounter_table.uncommon.0.species", 0xD88B, [113], "Kakuna");
            //mapper.AssertAreEqual("overworld.encounter_table.uncommon.0.dex_number", 0xD88B, [113], 14);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.1.level", 0xD892, [6], 6);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.1.species", 0xD893, [113], "Kakuna");
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.1.dex_number", 0xD893, [113], 14);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.2.level", 0xD894, [4], 4);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.2.species", 0xD895, [124], "Metapod");
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.2.dex_number", 0xD895, [124], 11);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.3.level", 0xD896, [3], 3);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.3.species", 0xD897, [123], "Caterpie");
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.3.dex_number", 0xD897, [123], 10);
            mapper.AssertAreEqual("overworld.encounter_table.rare.0.level", 0xD898, [3], 3);
            mapper.AssertAreEqual("overworld.encounter_table.rare.0.species", 0xD899, [84], "Pikachu");
            mapper.AssertAreEqual("overworld.encounter_table.rare.0.dex_number", 0xD899, [84], 25);
            mapper.AssertAreEqual("overworld.encounter_table.rare.1.level", 0xD89A, [5], 5);
            mapper.AssertAreEqual("overworld.encounter_table.rare.1.species", 0xD89B, [84], "Pikachu");
            mapper.AssertAreEqual("overworld.encounter_table.rare.1.dex_number", 0xD89B, [84], 25);
            mapper.AssertAreEqual("overworld.safari_zone.safari_time", 0xD70D, [0, 0], 0);
            mapper.AssertAreEqual("overworld.safari_zone.safari_balls", 0xDA47, [0], 0);
            mapper.AssertAreEqual("overworld.safari_zone.baiting_factor", 0xCCE9, [0], 0);
            mapper.AssertAreEqual("overworld.map_data.tileset", 0xD367, [3], 3);
            mapper.AssertAreEqual("overworld.map_data.height", 0xD368, [24], 24);
            mapper.AssertAreEqual("overworld.map_data.width", 0xD369, [17], 17);
            mapper.AssertAreEqual("overworld.map_data.palette", 0xD35D, [0], 0);
            mapper.AssertAreEqual("overworld.map_data.last_map", 0xD364, [1], "Viridian City");
            mapper.AssertAreEqual("events.trash_can_puzzle", 0xD773, [0], false);
            mapper.AssertAreEqual("flags.count_play_time", 0xD732, [1], true);
            mapper.AssertAreEqual("flags.debug_mode", 0xD732, [1], false);
            mapper.AssertAreEqual("flags.fly_or_dungeon", 0xD731, [0], false);
            mapper.AssertAreEqual("flags.fly_warp", 0xD731, [0], false);
            mapper.AssertAreEqual("flags.dungeon_warp", 0xD731, [0], false);
            mapper.AssertAreEqual("flags.destination_is_blackout", 0xD731, [0], false);
            mapper.AssertAreEqual("flags.beat_champion", 0xD867, [0], false);
            mapper.AssertAreEqual("event_flags.followed_oak_into_lab", 0xD747, [1], true);
            mapper.AssertAreEqual("event_flags.hall_of_fame_dex_rating", 0xD747, [1], false);
            mapper.AssertAreEqual("event_flags.pallet_after_getting_pokeballs", 0xD747, [1], false);
            mapper.AssertAreEqual("event_flags.got_town_map", 0xD74A, [0], false);
            mapper.AssertAreEqual("event_flags.entered_blues_house", 0xD74A, [0], false);
            mapper.AssertAreEqual("event_flags.daisy_walking", 0xD74A, [0], false);
            mapper.AssertAreEqual("event_flags.followed_oak_into_lab_2", 0xD74B, [175], true);
            mapper.AssertAreEqual("event_flags.oak_asked_to_choose_mon", 0xD74B, [175], true);
            mapper.AssertAreEqual("event_flags.got_starter", 0xD74B, [175], true);
            mapper.AssertAreEqual("event_flags.battled_rival_in_oaks_lab", 0xD74B, [175], true);
            mapper.AssertAreEqual("event_flags.got_pokeballs_from_oak", 0xD74B, [175], false);
            mapper.AssertAreEqual("event_flags.got_pokedex", 0xD74B, [175], true);
            mapper.AssertAreEqual("event_flags.pallet_after_getting_pokeballs_2", 0xD74B, [175], false);
            mapper.AssertAreEqual("event_flags.oak_appeared_in_pallet", 0xD74B, [175], true);
            mapper.AssertAreEqual("event_flags.viridian_gym_open", 0xD74C, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm42", 0xD74C, [0], false);
            mapper.AssertAreEqual("event_flags.oak_got_parcel", 0xD74E, [3], true);
            mapper.AssertAreEqual("event_flags.got_oaks_parcel", 0xD74E, [3], true);
            mapper.AssertAreEqual("event_flags.got_tm27", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_giovanni", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_0", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_1", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_2", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_3", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_4", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_5", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_6", 0xD752, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_7", 0xD752, [0], false);
            mapper.AssertAreEqual("event_flags.bought_museum_ticket", 0xD754, [0], false);
            mapper.AssertAreEqual("event_flags.got_old_amber", 0xD754, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pewter_gym_trainer_0", 0xD755, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm34", 0xD755, [0], false);
            mapper.AssertAreEqual("event_flags.beat_brock", 0xD755, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cerulean_rival", 0xD75A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cerulean_rocket_thief", 0xD75B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cerulean_gym_trainer_0", 0xD75E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cerulean_gym_trainer_1", 0xD75E, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm11", 0xD75E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_misty", 0xD75E, [0], false);
            mapper.AssertAreEqual("event_flags.got_bicycle", 0xD75F, [0], false);
            mapper.AssertAreEqual("event_flags.pokemon_tower_rival_on_left", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemon_tower_rival", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_3_trainer_0", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_3_trainer_1", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_3_trainer_2", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_4_trainer_0", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_4_trainer_1", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_4_trainer_2", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_0", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_1", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_2", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_3", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.in_purified_zone", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_6_trainer_0", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_6_trainer_1", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_6_trainer_2", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ghost_marowak", 0xD769, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_7_trainer_0", 0xD769, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_7_trainer_1", 0xD769, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_7_trainer_2", 0xD769, [0], false);
            mapper.AssertAreEqual("event_flags.rescued_mr_fuji_2", 0xD76A, [0], false);
            mapper.AssertAreEqual("event_flags.got_poke_flute", 0xD76C, [0], false);
            mapper.AssertAreEqual("event_flags.got_bike_voucher", 0xD771, [0], false);
            mapper.AssertAreEqual("event_flags.seel_fan_boast", 0xD771, [0], false);
            mapper.AssertAreEqual("event_flags.pikachu_fan_boast", 0xD771, [0], false);
            mapper.AssertAreEqual("event_flags.2nd_lock_opened", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.1st_lock_opened", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.beat_vermilion_gym_trainer_0", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.beat_vermilion_gym_trainer_1", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.beat_vermilion_gym_trainer_2", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm24", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lt_surge", 0xD773, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm41", 0xD777, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm13", 0xD778, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm48", 0xD778, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm49", 0xD778, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm18", 0xD778, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm21", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_erika", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_0", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_1", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_2", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_3", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_4", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_5", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_6", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.1b8", 0xD77E, [0], false);
            mapper.AssertAreEqual("event_flags.found_rocket_hideout", 0xD77E, [0], false);
            mapper.AssertAreEqual("event_flags.got_10_coins", 0xD77E, [0], false);
            mapper.AssertAreEqual("event_flags.got_20_coins", 0xD77E, [0], false);
            mapper.AssertAreEqual("event_flags.got_20_coins_2", 0xD77E, [0], false);
            mapper.AssertAreEqual("event_flags.1bf", 0xD77E, [0], false);
            mapper.AssertAreEqual("event_flags.got_coin_case", 0xD783, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm04", 0xD78E, [0], false);
            mapper.AssertAreEqual("event_flags.gave_gold_teeth", 0xD78E, [0], false);
            mapper.AssertAreEqual("event_flags.safari_game_over", 0xD790, [0], false);
            mapper.AssertAreEqual("event_flags.in_safari_zone", 0xD790, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm06", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_koga", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_0", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_1", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_2", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_3", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_4", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_5", 0xD792, [0], false);
            mapper.AssertAreEqual("event_flags.mansion_switch_on", 0xD796, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_1_trainer_0", 0xD798, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm38", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blaine", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_0", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_1", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_2", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_3", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_4", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_5", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_6", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.2a7", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate0_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate1_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate2_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate3_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate4_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate5_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate6_unlocked", 0xD79C, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm35", 0xD7A1, [0], false);
            mapper.AssertAreEqual("event_flags.gave_fossil_to_lab", 0xD7A3, [0], false);
            mapper.AssertAreEqual("event_flags.lab_still_reviving_fossil", 0xD7A3, [0], false);
            mapper.AssertAreEqual("event_flags.lab_handing_over_fossil_mon", 0xD7A3, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm31", 0xD7AF, [0], false);
            mapper.AssertAreEqual("event_flags.defeated_fighting_dojo", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_karate_master", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_0", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_1", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_2", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_3", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.got_hitmonlee", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.got_hitmonchan", 0xD7B1, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm46", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sabrina", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_0", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_1", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_2", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_3", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_4", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_5", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_6", 0xD7B4, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_receptionist_at_desk", 0xD7B9, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm29", 0xD7BD, [0], false);
            mapper.AssertAreEqual("event_flags.got_potion_sample", 0xD7BF, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm05", 0xD7C2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_0", 0xD7C3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_1", 0xD7C3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_2", 0xD7C3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_3", 0xD7C3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_4", 0xD7C3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_5", 0xD7C3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_6", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_7", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_4_trainer_0", 0xD7C5, [0], false);
            mapper.AssertAreEqual("event_flags.bought_magikarp", 0xD7C6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_0", 0xD7C9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_1", 0xD7C9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_2", 0xD7C9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_3", 0xD7C9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_4", 0xD7C9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_5", 0xD7C9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_0", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_1", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_2", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_3", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_4", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_5", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_6", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_7", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_8", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_0", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_1", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_2", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_3", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_4", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_5", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_6", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_7", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_8", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_0", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_1", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_2", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_3", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_4", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_5", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_0", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_1", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_2", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_3", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_4", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_5", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_6", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_0", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_1", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_2", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_3", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_4", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_5", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_6", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_7", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_zapdos", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_0", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_1", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_2", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_3", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_4", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_5", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_6", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_7", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_8", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_9", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.got_itemfinder", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm39", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_0", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_1", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_2", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_3", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_4", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_5", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_6", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.fight_route12_snorlax", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route12_snorlax", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_0", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_1", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_2", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_3", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_4", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_5", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_6", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_7", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_8", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_9", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_0", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_1", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_2", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_3", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_4", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_5", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_6", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_7", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_8", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_9", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.got_exp_all", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_0", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_1", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_2", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_3", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_4", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_5", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_6", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_7", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_8", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_9", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_0", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_1", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_2", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_3", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_4", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_5", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.fight_route16_snorlax", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route16_snorlax", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm02", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.rescued_mr_fuji", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_0", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_1", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_2", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_3", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_4", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_5", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_6", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_7", 0xD7E2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_8", 0xD7E2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_9", 0xD7E2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_18_trainer_0", 0xD7E3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_18_trainer_1", 0xD7E3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_18_trainer_2", 0xD7E3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_0", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_1", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_2", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_3", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_4", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_5", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_6", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_7", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_8", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_9", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.in_seafoam_islands", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_0", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_1", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_2", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_3", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_4", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_5", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_6", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_7", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_8", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_9", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam1_boulder1_down_hole", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam1_boulder2_down_hole", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_0", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_1", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_2", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_3", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_4", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_5", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_6", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_7", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_8", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.1st_route22_rival_battle", 0xD7EB, [129], true);
            mapper.AssertAreEqual("event_flags.2nd_route22_rival_battle", 0xD7EB, [129], false);
            mapper.AssertAreEqual("event_flags.beat_route22_rival_1st_battle", 0xD7EB, [129], false);
            mapper.AssertAreEqual("event_flags.beat_route22_rival_2nd_battle", 0xD7EB, [129], false);
            mapper.AssertAreEqual("event_flags.route22_rival_wants_battle", 0xD7EB, [129], true);
            mapper.AssertAreEqual("event_flags.passed_cascadebadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.passed_thunderbadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.passed_rainbowbadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.passed_soulbadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.passed_marshbadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.passed_volcanobadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.passed_earthbadge_check", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_2_boulder_on_switch1", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_0", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_1", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_2", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_3", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_4", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_moltres", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_2_boulder_on_switch2", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.got_nugget", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route24_rocket", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_0", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_1", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_2", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_3", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_4", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_5", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.nugget_reward_available", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.met_bill", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_0", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_1", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_2", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_3", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_4", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_5", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_6", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_7", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_8", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.used_cell_separator_on_bill", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.got_ss_ticket", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.met_bill_2", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.bill_said_use_cell_separator", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.left_bills_house_after_helping", 0xD7F2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_0", 0xD7F3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_1", 0xD7F3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_2", 0xD7F3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_0", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_1", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_2", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_3", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_4", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_5", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_6", 0xD7F5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_exit_super_nerd", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_0", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_1", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_2", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_3", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.got_dome_fossil", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.got_helix_fossil", 0xD7F6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_5_trainer_0", 0xD7FF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_5_trainer_1", 0xD7FF, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm01", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.rubbed_captains_back", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.ss_anne_left", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.walked_past_guard_after_ss_anne_left", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.started_walking_out_of_dock", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.walked_out_of_dock", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_0", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_1", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_2", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_3", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_0", 0xD807, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_1", 0xD807, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_2", 0xD807, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_3", 0xD807, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_0", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_1", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_2", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_3", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_4", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_5", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_3_boulder_on_switch1", 0xD813, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_0", 0xD813, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_1", 0xD813, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_2", 0xD813, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_3", 0xD813, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_3_boulder_on_switch2", 0xD813, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_0", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_1", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_2", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_3", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_4", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.677", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.67f", 0xD816, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_2_trainer_0", 0xD817, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_3_trainer_0", 0xD819, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_3_trainer_1", 0xD819, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_4_trainer_0", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_4_trainer_1", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_4_trainer_2", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.rocket_hideout_4_door_unlocked", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.rocket_dropped_lift_key", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_giovanni", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_0", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_1", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_2", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_3", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_2_unlocked_door1", 0xD826, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_2_unlocked_door2", 0xD826, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm36", 0xD826, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_3f_trainer_0", 0xD827, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_3f_trainer_1", 0xD827, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_3_unlocked_door1", 0xD828, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_3_unlocked_door2", 0xD828, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_4f_trainer_0", 0xD829, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_4f_trainer_1", 0xD829, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_4f_trainer_2", 0xD829, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_4_unlocked_door1", 0xD82A, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_4_unlocked_door2", 0xD82A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_0", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_1", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_2", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_3", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_5_unlocked_door1", 0xD82C, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_5_unlocked_door2", 0xD82C, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_5_unlocked_door3", 0xD82C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_6f_trainer_0", 0xD82D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_6f_trainer_1", 0xD82D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_6f_trainer_2", 0xD82E, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_6_unlocked_door", 0xD82E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_rival", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_0", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_1", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_2", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_3", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_7_unlocked_door1", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_7_unlocked_door2", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_7_unlocked_door3", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_8f_trainer_0", 0xD831, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_8f_trainer_1", 0xD831, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_8f_trainer_2", 0xD831, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_8_unlocked_door", 0xD832, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_9f_trainer_0", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_9f_trainer_1", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_9f_trainer_2", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door1", 0xD834, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door2", 0xD834, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door3", 0xD834, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door4", 0xD834, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_10f_trainer_0", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_10f_trainer_1", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_10_unlocked_door", 0xD836, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_11f_trainer_0", 0xD837, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_11f_trainer_1", 0xD837, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_11_unlocked_door", 0xD838, [0], false);
            mapper.AssertAreEqual("event_flags.got_master_ball", 0xD838, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_giovanni", 0xD838, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_2_trainer_0", 0xD847, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_3_trainer_0", 0xD849, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_3_trainer_1", 0xD849, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_4_trainer_0", 0xD84B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_4_trainer_1", 0xD84B, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm03", 0xD857, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mewtwo", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_loreleis_room_trainer_0", 0xD863, [0], false);
            mapper.AssertAreEqual("event_flags.autowalked_into_loreleis_room", 0xD863, [0], false);
            mapper.AssertAreEqual("event_flags.beat_brunos_room_trainer_0", 0xD864, [0], false);
            mapper.AssertAreEqual("event_flags.autowalked_into_brunos_room", 0xD864, [0], false);
            mapper.AssertAreEqual("event_flags.beat_agathas_room_trainer_0", 0xD865, [0], false);
            mapper.AssertAreEqual("event_flags.autowalked_into_agathas_room", 0xD865, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lances_room_trainer_0", 0xD866, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lance", 0xD866, [0], false);
            mapper.AssertAreEqual("event_flags.lances_room_lock_door", 0xD866, [0], false);
            mapper.AssertAreEqual("event_flags.beat_champion_rival", 0xD867, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_1_trainer_0", 0xD869, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_1_trainer_1", 0xD869, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_1_boulder_on_switch", 0xD869, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_0", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_1", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_2", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_3", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_4", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_5", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_6", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_7", 0xD87E, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam2_boulder1_down_hole", 0xD87F, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam2_boulder2_down_hole", 0xD87F, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam3_boulder1_down_hole", 0xD880, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam3_boulder2_down_hole", 0xD880, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam4_boulder1_down_hole", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam4_boulder2_down_hole", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.beat_articuno", 0xD882, [0], false);
            mapper.AssertAreEqual("battle.mode", 0xD057, [2], "Trainer");
            mapper.AssertAreEqual("battle.type", 0xD05A, [0], "Normal");
            mapper.AssertAreEqual("battle.outcome", "Win");
            mapper.AssertAreEqual("battle.player.party_position", 0xCC2F, [0], 0);
            mapper.AssertAreEqual("battle.player.team_count", 0xD163, [1], 1);
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0xD009, [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 80], "AAAAAAAAAA");
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0xD014, [176], "Charmander");
            mapper.AssertAreEqual("battle.player.active_pokemon.dex_number", 0xD014, [176], 4);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0xD019, [20], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0xD01A, [20], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0xD022, [8], 8);
            mapper.AssertAreEqual("battle.player.active_pokemon.catch_rate", 0xD01B, [45], 45);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_condition", 0xD018, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0xD01C, [10], "Scratch");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0xD02D, [26], 26);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0xD01D, [45], "Growl");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0xD02E, [40], 40);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0xD01E, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0xD02F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0xD01F, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0xD030, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0xD015, [0, 7], 7);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0xD023, [0, 25], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0xD025, [0, 13], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0xD027, [0, 14], 14);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0xD029, [0, 11], 11);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special", 0xD029, [0, 11], 11);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0xCD1A, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0xCD1B, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0xCD1C, [6], -1);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special", 0xCD1D, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0xCD1E, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0xCD1F, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.confusion", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.toxic", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.leech_seed", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bide", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.thrash", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.multi_hit", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.flinch", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.charging", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.multi_turn", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.invulnerable", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bypass_accuracy", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.mist", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.focus_energy", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.substitute", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.recharge", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rage", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.lightscreen", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.reflect", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.transformed", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.multi_hit", 0xD06A, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.confusion", 0xD064, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.toxic", 0xD06B, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.disable", 0xD06D, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.move", 0xCFD2, [10], "Scratch");
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.effect", 0xCFD3, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.power", 0xCFD4, [40], 40);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.type", 0xCFD5, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.accuracy", 0xCFD6, [255], 100);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.pp_max", 0xCFD7, [35], 35);
            mapper.AssertAreEqual("battle.player.team.0.species", 0xD16B, [176], "Charmander");
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0xD16B, [176], 4);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0xD2B5, [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 80], "AAAAAAAAAA");
            mapper.AssertAreEqual("battle.player.team.0.level", 0xD18C, [8], 8);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0xD179, [0, 1, 144], 400);
            mapper.AssertAreEqual("battle.player.team.0.type_1", 0xD170, [20], "Fire");
            mapper.AssertAreEqual("battle.player.team.0.type_2", 0xD171, [20], "Fire");
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0xD177, [44, 131], 11395);
            mapper.AssertAreEqual("battle.player.team.0.catch_rate", 0xD172, [45], 45);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0xD16F, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0xD173, [10], "Scratch");
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0xD188, [26], 26);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0xD188, [26], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0xD174, [45], "Growl");
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0xD189, [40], 40);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0xD189, [40], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0xD175, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0xD18A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0xD176, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0xD18B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0xD18B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0xD16C, [0, 7], 7);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0xD18D, [0, 25], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0xD18F, [0, 13], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0xD191, [0, 14], 14);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0xD193, [0, 17], 17);
            mapper.AssertAreEqual("battle.player.team.0.stats.special", 0xD195, [0, 15], 15);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0xD186, [28], 1);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0xD186, [28], 12);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0xD187, [239], 14);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special", 0xD187, [239], 15);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0xD17C, [0, 239], 239);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0xD17E, [1, 3], 259);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0xD180, [0, 245], 245);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0xD182, [1, 66], 322);
            mapper.AssertAreEqual("battle.player.team.0.evs.special", 0xD184, [0, 185], 185);
            mapper.AssertAreEqual("battle.player.team.1.species", 0xD197, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0xD197, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0xD2C0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.1.level", 0xD1B8, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0xD1A5, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.type_1", 0xD19C, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.1.type_2", 0xD19D, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0xD1A3, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.catch_rate", 0xD19E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0xD19B, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0xD19F, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0xD1A0, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0xD1A1, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0xD1A2, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0xD198, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0xD1B9, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0xD1BB, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0xD1BD, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0xD1BF, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.special", 0xD1C1, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0xD1A8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0xD1AA, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0xD1AC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0xD1AE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special", 0xD1B0, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.species", 0xD1C3, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0xD1C3, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0xD2CB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.2.level", 0xD1E4, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0xD1D1, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.type_1", 0xD1C8, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.2.type_2", 0xD1C9, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0xD1CF, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.catch_rate", 0xD1CA, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0xD1C7, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0xD1CB, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0xD1CC, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0xD1CD, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0xD1CE, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0xD1C4, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0xD1E5, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0xD1E7, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0xD1E9, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0xD1EB, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.special", 0xD1ED, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0xD1D4, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0xD1D6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0xD1D8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0xD1DA, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special", 0xD1DC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.species", 0xD1EF, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0xD1EF, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0xD2D6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.3.level", 0xD210, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0xD1FD, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.type_1", 0xD1F4, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.3.type_2", 0xD1F5, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0xD1FB, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.catch_rate", 0xD1F6, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0xD1F3, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0xD1F7, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0xD20C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0xD1F8, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0xD20D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0xD1F9, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0xD20E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0xD1FA, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0xD1F0, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0xD211, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0xD213, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0xD215, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0xD217, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.special", 0xD219, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0xD20A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0xD20A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0xD20B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special", 0xD20B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0xD200, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0xD202, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0xD204, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0xD206, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special", 0xD208, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.species", 0xD21B, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0xD21B, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0xD2E1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.4.level", 0xD23C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0xD229, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.type_1", 0xD220, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.4.type_2", 0xD221, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0xD227, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.catch_rate", 0xD222, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0xD21F, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0xD223, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0xD238, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0xD238, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0xD224, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0xD239, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0xD239, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0xD225, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0xD23A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0xD226, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0xD23B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0xD23B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0xD21C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0xD23D, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0xD23F, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0xD241, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0xD243, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special", 0xD245, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0xD236, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0xD236, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0xD237, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special", 0xD237, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0xD22C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0xD22E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0xD230, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0xD232, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special", 0xD234, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.species", 0xD247, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0xD247, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0xD2EC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.5.level", 0xD268, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0xD255, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.type_1", 0xD24C, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.5.type_2", 0xD24D, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0xD253, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.catch_rate", 0xD24E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0xD24B, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0xD24F, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0xD264, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0xD264, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0xD250, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0xD265, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0xD265, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0xD251, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0xD266, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0xD266, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0xD252, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0xD267, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0xD267, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0xD248, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0xD269, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0xD26B, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0xD26D, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0xD26F, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special", 0xD271, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0xD262, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0xD262, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0xD263, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special", 0xD263, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0xD258, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0xD25A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0xD25C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0xD25E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special", 0xD260, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0xD04A, [129, 148, 134, 127, 130, 128, 147, 130, 135, 132, 145], "BUG");
            mapper.AssertAreEqual("battle.opponent.trainer", 0xD031, [2], "BugCatcher");
            mapper.AssertAreEqual("battle.opponent.id", 0xD05D, [1], 1);
            mapper.AssertAreEqual("battle.opponent.gym_leader", 0xD05C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team_count", 0xD89C, [2], 2);
            mapper.AssertAreEqual("battle.opponent.party_position", 0xCFE8, [1], 1);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0xCFD8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0xCFD8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0xCFF3, [6], 6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0xCFEA, [7], "Bug");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0xCFEB, [7], "Bug");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0xCFE9, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0xCFED, [33], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0xCFEE, [81], "String Shot");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0xCFEF, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0xCFF0, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0xCFE6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0xCFF4, [0, 22], 22);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0xCFF6, [0, 9], 9);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0xCFF8, [0, 10], 10);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0xCFFA, [0, 11], 11);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special", 0xCFFC, [0, 8], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0xCD2E, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0xCD2F, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0xCD30, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special", 0xCD31, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0xCD32, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0xCD33, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0xCFF1, [152], 9);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0xCFF1, [152], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0xCFF2, [136], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special", 0xCFF2, [136], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.hp", 0xD002, [45], 13);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.attack", 0xD003, [30], 14);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.defense", 0xD004, [35], 3);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.speed", 0xD005, [45], 13);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.special", 0xD006, [20], 4);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.exp", 0xD008, [53], 5);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bide", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.thrash", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.multi_hit", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.flinch", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.charging", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.multi_turn", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.invulnerable", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.confusion", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bypass_accuracy", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.mist", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.focus_energy", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.substitute", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.recharge", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rage", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.leech_seed", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.toxic", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.lightscreen", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.reflect", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.transformed", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.multi_hit", 0xD06F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.confusion", 0xD070, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.toxic", 0xD071, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.disable", 0xD072, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.move", 0xCFCC, [33], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.effect", 0xCFCD, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.power", 0xCFCE, [35], 35);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.type", 0xCFCF, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.accuracy", 0xCFD0, [242], 95);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.pp_max", 0xCFD1, [35], 35);
            //mapper.AssertAreEqual("battle.opponent.team.0.species", 0xD9EE, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0xD9EE, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0xD8A4, [112, 0, 0, 0, 0, 7, 3, 255, 40, 81, 0], "");
            //mapper.AssertAreEqual("battle.opponent.team.0.level", 0xDA0F, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.exp", 0xD9FC, [0, 0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.type_1", 0xD9F3, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.0.type_2", 0xD9F4, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xD9FA, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.catch_rate", 0xD9F5, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0xD9F2, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0xD9F6, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0xDA0B, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0xDA0B, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0xD9F7, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0xDA0C, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0xDA0C, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0xD9F8, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0xDA0D, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0xDA0D, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0xD9F9, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0xDA0E, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0xDA0E, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0xD9EF, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0xDA10, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0xDA12, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0xDA14, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0xDA16, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.stats.special", 0xDA18, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0xDA09, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0xDA09, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0xDA0A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.ivs.special", 0xDA0A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0xD9FF, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0xDA01, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0xDA03, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0xDA05, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.0.evs.special", 0xDA07, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.species", 0xD9F9, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0xD9F9, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0xD8D0, [123, 0, 0, 0, 0, 7, 7, 255, 33, 81, 0], "\u2510");
            //mapper.AssertAreEqual("battle.opponent.team.1.level", 0xDA1A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.exp", 0xDA07, [0, 0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.type_1", 0xD9FE, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.1.type_2", 0xD9FF, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xDA05, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.catch_rate", 0xDA00, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0xD9FD, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0xDA01, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0xDA16, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0xDA16, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0xDA02, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0xDA17, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0xDA17, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0xDA03, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0xDA18, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0xDA18, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0xDA04, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0xDA19, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0xDA19, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0xD9FA, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0xDA1B, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0xDA1D, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0xDA1F, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0xDA21, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.stats.special", 0xDA23, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0xDA14, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0xDA14, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0xDA15, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.ivs.special", 0xDA15, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0xDA0A, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0xDA0C, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0xDA0E, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0xDA10, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.1.evs.special", 0xDA12, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.species", 0xDA04, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0xDA04, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0xD8FC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            //mapper.AssertAreEqual("battle.opponent.team.2.level", 0xDA25, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.exp", 0xDA12, [0, 0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.type_1", 0xDA09, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.2.type_2", 0xDA0A, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xDA10, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.catch_rate", 0xDA0B, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0xDA08, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0xDA0C, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0xDA21, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0xDA21, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0xDA0D, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0xDA22, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0xDA22, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0xDA0E, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0xDA23, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0xDA23, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0xDA0F, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0xDA24, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0xDA24, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0xDA05, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0xDA26, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0xDA28, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0xDA2A, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0xDA2C, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.stats.special", 0xDA2E, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0xDA1F, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0xDA1F, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0xDA20, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.ivs.special", 0xDA20, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0xDA15, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0xDA17, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0xDA19, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0xDA1B, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.2.evs.special", 0xDA1D, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.species", 0xDA0F, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0xDA0F, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0xD928, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            //mapper.AssertAreEqual("battle.opponent.team.3.level", 0xDA30, [81], 81);
            //mapper.AssertAreEqual("battle.opponent.team.3.exp", 0xDA1D, [0, 0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.type_1", 0xDA14, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.3.type_2", 0xDA15, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xDA1B, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.catch_rate", 0xDA16, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0xDA13, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0xDA17, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0xDA2C, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0xDA2C, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0xDA18, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0xDA2D, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0xDA2D, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0xDA19, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0xDA2E, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0xDA2E, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0xDA1A, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0xDA2F, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0xDA2F, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0xDA10, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0xDA31, [66, 0], 16896);
            //mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0xDA33, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0xDA35, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0xDA37, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.stats.special", 0xDA39, [2, 0], 512);
            //mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0xDA2A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0xDA2A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0xDA2B, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.ivs.special", 0xDA2B, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0xDA20, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0xDA22, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0xDA24, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0xDA26, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.3.evs.special", 0xDA28, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.species", 0xDA1A, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0xDA1A, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0xD954, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            //mapper.AssertAreEqual("battle.opponent.team.4.level", 0xDA3B, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.exp", 0xDA28, [0, 0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.type_1", 0xDA1F, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.4.type_2", 0xDA20, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xDA26, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.catch_rate", 0xDA21, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0xDA1E, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0xDA22, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0xDA37, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0xDA37, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0xDA23, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0xDA38, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0xDA38, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0xDA24, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0xDA39, [2], 2);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0xDA39, [2], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0xDA25, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0xDA3A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0xDA3A, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0xDA1B, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0xDA3C, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0xDA3E, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0xDA40, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0xDA42, [0, 13], 13);
            //mapper.AssertAreEqual("battle.opponent.team.4.stats.special", 0xDA44, [25, 33], 6433);
            //mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0xDA35, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0xDA35, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0xDA36, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.ivs.special", 0xDA36, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0xDA2B, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0xDA2D, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0xDA2F, [0, 81], 81);
            //mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0xDA31, [66, 0], 16896);
            //mapper.AssertAreEqual("battle.opponent.team.4.evs.special", 0xDA33, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.species", 0xDA25, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0xDA25, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0xD980, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            //mapper.AssertAreEqual("battle.opponent.team.5.level", 0xDA46, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.exp", 0xDA33, [0, 0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.type_1", 0xDA2A, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.5.type_2", 0xDA2B, [0], "Normal");
            //mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xDA31, [66, 0], 16896);
            //mapper.AssertAreEqual("battle.opponent.team.5.catch_rate", 0xDA2C, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0xDA29, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0xDA2D, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0xDA42, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0xDA42, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0xDA2E, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0xDA43, [13], 13);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0xDA43, [13], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0xDA2F, [0], null);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0xDA44, [25], 25);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0xDA44, [25], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0xDA30, [81], "String Shot");
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0xDA45, [33], 33);
            //mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0xDA45, [33], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0xDA26, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0xDA47, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0xDA49, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0xDA4B, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0xDA4D, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.stats.special", 0xDA4F, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0xDA40, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0xDA40, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0xDA41, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.ivs.special", 0xDA41, [0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0xDA36, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0xDA38, [0, 2], 2);
            //mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0xDA3A, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0xDA3C, [0, 0], 0);
            //mapper.AssertAreEqual("battle.opponent.team.5.evs.special", 0xDA3E, [0, 0], 0);
            mapper.AssertAreEqual("battle.other.battle_start", 0xCCF5, [1], 1);
            mapper.AssertAreEqual("battle.other.battle_result", 0xCCF6, [1], 1);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0xCF0B, [0], 0);
            mapper.AssertAreEqual("battle.other.low_health_alarm", 0xCCF6, [1], "Disabled");
            mapper.AssertAreEqual("battle.other.animation_turn", 0xFFF4, [0], "Player");
            mapper.AssertAreEqual("battle.other.attack_damage", 0xD0D8, [4], 4);
            mapper.AssertAreEqual("pokemart.item_count", 0xCF7C, [4], 4);
            mapper.AssertAreEqual("pokemart.items.0", 0xCF7C, [4], "POK\u00e9 BALL");
            mapper.AssertAreEqual("pokemart.items.1", 0xCF7D, [11], "ANTIDOTE");
            mapper.AssertAreEqual("pokemart.items.2", 0xCF7E, [15], "PARLYZ HEAL");
            mapper.AssertAreEqual("pokemart.items.3", 0xCF7F, [12], "BURN HEAL");
            mapper.AssertAreEqual("pokemart.items.4", 0xCF80, [255], null);
            mapper.AssertAreEqual("pokemart.items.5", 0xCF81, [0], null);
            mapper.AssertAreEqual("pokemart.items.6", 0xCF82, [0], null);
            mapper.AssertAreEqual("pokemart.items.7", 0xCF83, [0], null);
            mapper.AssertAreEqual("pokemart.items.8", 0xCF84, [0], null);
            mapper.AssertAreEqual("pokemart.items.9", 0xCF85, [0], null);
            mapper.AssertAreEqual("pokemart.items.10", 0xCF86, [0], null);
            mapper.AssertAreEqual("rival.name", 0xD34A, [128, 128, 128, 128, 128, 128, 128, 80], "AAAAAAA");
            mapper.AssertAreEqual("rival.team", 0xD715, [177], "Blastoise");
            mapper.AssertAreEqual("audio.current_sound", 0xC002, [0], 0);
            mapper.AssertAreEqual("audio.new_sound_id", 0xC0EF, [8], 8);
            mapper.AssertAreEqual("audio.audio_bank", 0xC0F0, [8], 8);
            mapper.AssertAreEqual("audio.overworld_track_current_map", 0xD359, [44], null);
            mapper.AssertAreEqual("audio.audio_bank_current_map", 0xD35A, [131], 131);
            mapper.AssertAreEqual("audio.channels.0", 0xC027, [246], 246);
            mapper.AssertAreEqual("audio.channels.1", 0xC028, [246], 246);
            mapper.AssertAreEqual("audio.channels.2", 0xC029, [0], 0);
            mapper.AssertAreEqual("audio.channels.3", 0xC02A, [0], 0);
            mapper.AssertAreEqual("audio.channels.4", 0xC02B, [0], 0);
            mapper.AssertAreEqual("audio.channels.5", 0xC02C, [0], 0);
            mapper.AssertAreEqual("audio.channels.6", 0xC02D, [0], 0);
            mapper.AssertAreEqual("audio.channels.7", 0xC02E, [1], 1);
            mapper.AssertAreEqual("audio.volume_channels.0", 0xC0DF, [133], 133);
            mapper.AssertAreEqual("audio.volume_channels.1", 0xC0E0, [64], 64);
            mapper.AssertAreEqual("audio.volume_channels.2", 0xC0E1, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.3", 0xC0E2, [180], 180);
            mapper.AssertAreEqual("audio.volume_channels.4", 0xC0E3, [196], 196);
            mapper.AssertAreEqual("audio.volume_channels.5", 0xC0E4, [32], 32);
            mapper.AssertAreEqual("audio.volume_channels.6", 0xC0E5, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.7", 0xC0E6, [1], 1);
            mapper.AssertAreEqual("audio.tempo.music", 0xC0E9, [224, 1], 57345);
            mapper.AssertAreEqual("audio.tempo.sfx", 0xC0EB, [0, 65], 65);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box_count", 0xDA80, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.species", 0xDA96, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.dex_number", 0xDA96, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.nickname", 0xDE06, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.level", 0xDA99, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.exp", 0xDAA4, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.type_1", 0xDA9B, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.type_2", 0xDA9C, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ot_id", 0xDAA2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.status_condition", 0xDA9A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.stats.hp", 0xDA97, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.0.move", 0xDA98, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.0.pp", 0xDAAD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.0.pp_up", 0xDAAD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.1.move", 0xDA99, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.1.pp", 0xDAAE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.1.pp_up", 0xDAAE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.2.move", 0xDA9A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.2.pp", 0xDAAF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.2.pp_up", 0xDAAF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.3.move", 0xDA9B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.3.pp", 0xDAB0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.3.pp_up", 0xDAB0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.attack", 0xDAB1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.defense", 0xDAB1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.speed", 0xDAB2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.special", 0xDAB2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.hp", 0xDAA7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.attack", 0xDAA9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.defense", 0xDAAB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.speed", 0xDAAD, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.special", 0xDAAF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.species", 0xDAB7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.dex_number", 0xDAB7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.nickname", 0xDE11, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.level", 0xDABA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.exp", 0xDAC5, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.type_1", 0xDABC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.type_2", 0xDABD, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ot_id", 0xDAC3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.status_condition", 0xDABB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.stats.hp", 0xDAB8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.0.move", 0xDAB9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.0.pp", 0xDACE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.0.pp_up", 0xDACE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.1.move", 0xDABA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.1.pp", 0xDACF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.1.pp_up", 0xDACF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.2.move", 0xDABB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.2.pp", 0xDAD0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.2.pp_up", 0xDAD0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.3.move", 0xDABC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.3.pp", 0xDAD1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.3.pp_up", 0xDAD1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.attack", 0xDAD2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.defense", 0xDAD2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.speed", 0xDAD3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.special", 0xDAD3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.hp", 0xDAC8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.attack", 0xDACA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.defense", 0xDACC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.speed", 0xDACE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.special", 0xDAD0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.species", 0xDAD8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.dex_number", 0xDAD8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.nickname", 0xDE1C, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.level", 0xDADB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.exp", 0xDAE6, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.type_1", 0xDADD, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.type_2", 0xDADE, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ot_id", 0xDAE4, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.status_condition", 0xDADC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.stats.hp", 0xDAD9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.0.move", 0xDADA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.0.pp", 0xDAEF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.0.pp_up", 0xDAEF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.1.move", 0xDADB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.1.pp", 0xDAF0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.1.pp_up", 0xDAF0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.2.move", 0xDADC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.2.pp", 0xDAF1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.2.pp_up", 0xDAF1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.3.move", 0xDADD, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.3.pp", 0xDAF2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.3.pp_up", 0xDAF2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.attack", 0xDAF3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.defense", 0xDAF3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.speed", 0xDAF4, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.special", 0xDAF4, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.hp", 0xDAE9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.attack", 0xDAEB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.defense", 0xDAED, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.speed", 0xDAEF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.special", 0xDAF1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.species", 0xDAF9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.dex_number", 0xDAF9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.nickname", 0xDE27, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.level", 0xDAFC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.exp", 0xDB07, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.type_1", 0xDAFE, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.type_2", 0xDAFF, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ot_id", 0xDB05, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.status_condition", 0xDAFD, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.stats.hp", 0xDAFA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.0.move", 0xDAFB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.0.pp", 0xDB10, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.0.pp_up", 0xDB10, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.1.move", 0xDAFC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.1.pp", 0xDB11, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.1.pp_up", 0xDB11, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.2.move", 0xDAFD, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.2.pp", 0xDB12, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.2.pp_up", 0xDB12, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.3.move", 0xDAFE, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.3.pp", 0xDB13, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.3.pp_up", 0xDB13, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.attack", 0xDB14, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.defense", 0xDB14, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.speed", 0xDB15, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.special", 0xDB15, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.hp", 0xDB0A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.attack", 0xDB0C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.defense", 0xDB0E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.speed", 0xDB10, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.special", 0xDB12, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.species", 0xDB1A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.dex_number", 0xDB1A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.nickname", 0xDE32, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.level", 0xDB1D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.exp", 0xDB28, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.type_1", 0xDB1F, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.type_2", 0xDB20, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ot_id", 0xDB26, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.status_condition", 0xDB1E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.stats.hp", 0xDB1B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.0.move", 0xDB1C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.0.pp", 0xDB31, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.0.pp_up", 0xDB31, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.1.move", 0xDB1D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.1.pp", 0xDB32, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.1.pp_up", 0xDB32, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.2.move", 0xDB1E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.2.pp", 0xDB33, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.2.pp_up", 0xDB33, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.3.move", 0xDB1F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.3.pp", 0xDB34, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.3.pp_up", 0xDB34, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.attack", 0xDB35, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.defense", 0xDB35, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.speed", 0xDB36, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.special", 0xDB36, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.hp", 0xDB2B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.attack", 0xDB2D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.defense", 0xDB2F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.speed", 0xDB31, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.special", 0xDB33, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.species", 0xDB3B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.dex_number", 0xDB3B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.nickname", 0xDE3D, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.level", 0xDB3E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.exp", 0xDB49, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.type_1", 0xDB40, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.type_2", 0xDB41, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ot_id", 0xDB47, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.status_condition", 0xDB3F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.stats.hp", 0xDB3C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.0.move", 0xDB3D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.0.pp", 0xDB52, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.0.pp_up", 0xDB52, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.1.move", 0xDB3E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.1.pp", 0xDB53, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.1.pp_up", 0xDB53, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.2.move", 0xDB3F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.2.pp", 0xDB54, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.2.pp_up", 0xDB54, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.3.move", 0xDB40, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.3.pp", 0xDB55, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.3.pp_up", 0xDB55, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.attack", 0xDB56, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.defense", 0xDB56, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.speed", 0xDB57, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.special", 0xDB57, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.hp", 0xDB4C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.attack", 0xDB4E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.defense", 0xDB50, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.speed", 0xDB52, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.special", 0xDB54, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.species", 0xDB5C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.dex_number", 0xDB5C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.nickname", 0xDE48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.level", 0xDB5F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.exp", 0xDB6A, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.type_1", 0xDB61, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.type_2", 0xDB62, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ot_id", 0xDB68, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.status_condition", 0xDB60, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.stats.hp", 0xDB5D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.0.move", 0xDB5E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.0.pp", 0xDB73, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.0.pp_up", 0xDB73, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.1.move", 0xDB5F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.1.pp", 0xDB74, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.1.pp_up", 0xDB74, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.2.move", 0xDB60, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.2.pp", 0xDB75, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.2.pp_up", 0xDB75, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.3.move", 0xDB61, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.3.pp", 0xDB76, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.3.pp_up", 0xDB76, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.attack", 0xDB77, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.defense", 0xDB77, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.speed", 0xDB78, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.special", 0xDB78, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.hp", 0xDB6D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.attack", 0xDB6F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.defense", 0xDB71, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.speed", 0xDB73, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.special", 0xDB75, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.species", 0xDB7D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.dex_number", 0xDB7D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.nickname", 0xDE53, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.level", 0xDB80, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.exp", 0xDB8B, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.type_1", 0xDB82, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.type_2", 0xDB83, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ot_id", 0xDB89, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.status_condition", 0xDB81, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.stats.hp", 0xDB7E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.0.move", 0xDB7F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.0.pp", 0xDB94, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.0.pp_up", 0xDB94, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.1.move", 0xDB80, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.1.pp", 0xDB95, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.1.pp_up", 0xDB95, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.2.move", 0xDB81, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.2.pp", 0xDB96, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.2.pp_up", 0xDB96, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.3.move", 0xDB82, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.3.pp", 0xDB97, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.3.pp_up", 0xDB97, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.attack", 0xDB98, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.defense", 0xDB98, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.speed", 0xDB99, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.special", 0xDB99, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.hp", 0xDB8E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.attack", 0xDB90, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.defense", 0xDB92, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.speed", 0xDB94, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.special", 0xDB96, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.species", 0xDB9E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.dex_number", 0xDB9E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.nickname", 0xDE5E, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.level", 0xDBA1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.exp", 0xDBAC, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.type_1", 0xDBA3, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.type_2", 0xDBA4, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ot_id", 0xDBAA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.status_condition", 0xDBA2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.stats.hp", 0xDB9F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.0.move", 0xDBA0, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.0.pp", 0xDBB5, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.0.pp_up", 0xDBB5, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.1.move", 0xDBA1, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.1.pp", 0xDBB6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.1.pp_up", 0xDBB6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.2.move", 0xDBA2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.2.pp", 0xDBB7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.2.pp_up", 0xDBB7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.3.move", 0xDBA3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.3.pp", 0xDBB8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.3.pp_up", 0xDBB8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.attack", 0xDBB9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.defense", 0xDBB9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.speed", 0xDBBA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.special", 0xDBBA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.hp", 0xDBAF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.attack", 0xDBB1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.defense", 0xDBB3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.speed", 0xDBB5, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.special", 0xDBB7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.species", 0xDBBF, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.dex_number", 0xDBBF, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.nickname", 0xDE69, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.level", 0xDBC2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.exp", 0xDBCD, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.type_1", 0xDBC4, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.type_2", 0xDBC5, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ot_id", 0xDBCB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.status_condition", 0xDBC3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.stats.hp", 0xDBC0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.0.move", 0xDBC1, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.0.pp", 0xDBD6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.0.pp_up", 0xDBD6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.1.move", 0xDBC2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.1.pp", 0xDBD7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.1.pp_up", 0xDBD7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.2.move", 0xDBC3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.2.pp", 0xDBD8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.2.pp_up", 0xDBD8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.3.move", 0xDBC4, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.3.pp", 0xDBD9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.3.pp_up", 0xDBD9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.attack", 0xDBDA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.defense", 0xDBDA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.speed", 0xDBDB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.special", 0xDBDB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.hp", 0xDBD0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.attack", 0xDBD2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.defense", 0xDBD4, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.speed", 0xDBD6, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.special", 0xDBD8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.species", 0xDBE0, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.dex_number", 0xDBE0, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.nickname", 0xDE74, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.level", 0xDBE3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.exp", 0xDBEE, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.type_1", 0xDBE5, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.type_2", 0xDBE6, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ot_id", 0xDBEC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.status_condition", 0xDBE4, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.stats.hp", 0xDBE1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.0.move", 0xDBE2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.0.pp", 0xDBF7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.0.pp_up", 0xDBF7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.1.move", 0xDBE3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.1.pp", 0xDBF8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.1.pp_up", 0xDBF8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.2.move", 0xDBE4, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.2.pp", 0xDBF9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.2.pp_up", 0xDBF9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.3.move", 0xDBE5, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.3.pp", 0xDBFA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.3.pp_up", 0xDBFA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.attack", 0xDBFB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.defense", 0xDBFB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.speed", 0xDBFC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.special", 0xDBFC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.hp", 0xDBF1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.attack", 0xDBF3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.defense", 0xDBF5, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.speed", 0xDBF7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.special", 0xDBF9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.species", 0xDC01, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.dex_number", 0xDC01, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.nickname", 0xDE7F, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.level", 0xDC04, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.exp", 0xDC0F, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.type_1", 0xDC06, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.type_2", 0xDC07, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ot_id", 0xDC0D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.status_condition", 0xDC05, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.stats.hp", 0xDC02, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.0.move", 0xDC03, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.0.pp", 0xDC18, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.0.pp_up", 0xDC18, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.1.move", 0xDC04, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.1.pp", 0xDC19, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.1.pp_up", 0xDC19, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.2.move", 0xDC05, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.2.pp", 0xDC1A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.2.pp_up", 0xDC1A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.3.move", 0xDC06, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.3.pp", 0xDC1B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.3.pp_up", 0xDC1B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.attack", 0xDC1C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.defense", 0xDC1C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.speed", 0xDC1D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.special", 0xDC1D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.hp", 0xDC12, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.attack", 0xDC14, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.defense", 0xDC16, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.speed", 0xDC18, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.special", 0xDC1A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.species", 0xDC22, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.dex_number", 0xDC22, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.nickname", 0xDE8A, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.level", 0xDC25, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.exp", 0xDC30, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.type_1", 0xDC27, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.type_2", 0xDC28, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ot_id", 0xDC2E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.status_condition", 0xDC26, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.stats.hp", 0xDC23, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.0.move", 0xDC24, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.0.pp", 0xDC39, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.0.pp_up", 0xDC39, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.1.move", 0xDC25, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.1.pp", 0xDC3A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.1.pp_up", 0xDC3A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.2.move", 0xDC26, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.2.pp", 0xDC3B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.2.pp_up", 0xDC3B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.3.move", 0xDC27, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.3.pp", 0xDC3C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.3.pp_up", 0xDC3C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.attack", 0xDC3D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.defense", 0xDC3D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.speed", 0xDC3E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.special", 0xDC3E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.hp", 0xDC33, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.attack", 0xDC35, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.defense", 0xDC37, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.speed", 0xDC39, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.special", 0xDC3B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.species", 0xDC43, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.dex_number", 0xDC43, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.nickname", 0xDE95, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.level", 0xDC46, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.exp", 0xDC51, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.type_1", 0xDC48, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.type_2", 0xDC49, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ot_id", 0xDC4F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.status_condition", 0xDC47, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.stats.hp", 0xDC44, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.0.move", 0xDC45, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.0.pp", 0xDC5A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.0.pp_up", 0xDC5A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.1.move", 0xDC46, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.1.pp", 0xDC5B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.1.pp_up", 0xDC5B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.2.move", 0xDC47, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.2.pp", 0xDC5C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.2.pp_up", 0xDC5C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.3.move", 0xDC48, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.3.pp", 0xDC5D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.3.pp_up", 0xDC5D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.attack", 0xDC5E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.defense", 0xDC5E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.speed", 0xDC5F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.special", 0xDC5F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.hp", 0xDC54, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.attack", 0xDC56, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.defense", 0xDC58, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.speed", 0xDC5A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.special", 0xDC5C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.species", 0xDC64, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.dex_number", 0xDC64, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.nickname", 0xDEA0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.level", 0xDC67, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.exp", 0xDC72, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.type_1", 0xDC69, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.type_2", 0xDC6A, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ot_id", 0xDC70, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.status_condition", 0xDC68, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.stats.hp", 0xDC65, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.0.move", 0xDC66, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.0.pp", 0xDC7B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.0.pp_up", 0xDC7B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.1.move", 0xDC67, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.1.pp", 0xDC7C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.1.pp_up", 0xDC7C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.2.move", 0xDC68, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.2.pp", 0xDC7D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.2.pp_up", 0xDC7D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.3.move", 0xDC69, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.3.pp", 0xDC7E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.3.pp_up", 0xDC7E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.attack", 0xDC7F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.defense", 0xDC7F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.speed", 0xDC80, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.special", 0xDC80, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.hp", 0xDC75, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.attack", 0xDC77, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.defense", 0xDC79, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.speed", 0xDC7B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.special", 0xDC7D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.species", 0xDC85, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.dex_number", 0xDC85, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.nickname", 0xDEAB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.level", 0xDC88, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.exp", 0xDC93, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.type_1", 0xDC8A, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.type_2", 0xDC8B, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ot_id", 0xDC91, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.status_condition", 0xDC89, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.stats.hp", 0xDC86, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.0.move", 0xDC87, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.0.pp", 0xDC9C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.0.pp_up", 0xDC9C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.1.move", 0xDC88, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.1.pp", 0xDC9D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.1.pp_up", 0xDC9D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.2.move", 0xDC89, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.2.pp", 0xDC9E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.2.pp_up", 0xDC9E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.3.move", 0xDC8A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.3.pp", 0xDC9F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.3.pp_up", 0xDC9F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.attack", 0xDCA0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.defense", 0xDCA0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.speed", 0xDCA1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.special", 0xDCA1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.hp", 0xDC96, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.attack", 0xDC98, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.defense", 0xDC9A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.speed", 0xDC9C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.special", 0xDC9E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.species", 0xDCA6, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.dex_number", 0xDCA6, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.nickname", 0xDEB6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.level", 0xDCA9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.exp", 0xDCB4, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.type_1", 0xDCAB, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.type_2", 0xDCAC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ot_id", 0xDCB2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.status_condition", 0xDCAA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.stats.hp", 0xDCA7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.0.move", 0xDCA8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.0.pp", 0xDCBD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.0.pp_up", 0xDCBD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.1.move", 0xDCA9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.1.pp", 0xDCBE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.1.pp_up", 0xDCBE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.2.move", 0xDCAA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.2.pp", 0xDCBF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.2.pp_up", 0xDCBF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.3.move", 0xDCAB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.3.pp", 0xDCC0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.3.pp_up", 0xDCC0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.attack", 0xDCC1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.defense", 0xDCC1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.speed", 0xDCC2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.special", 0xDCC2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.hp", 0xDCB7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.attack", 0xDCB9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.defense", 0xDCBB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.speed", 0xDCBD, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.special", 0xDCBF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.species", 0xDCC7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.dex_number", 0xDCC7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.nickname", 0xDEC1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.level", 0xDCCA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.exp", 0xDCD5, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.type_1", 0xDCCC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.type_2", 0xDCCD, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ot_id", 0xDCD3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.status_condition", 0xDCCB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.stats.hp", 0xDCC8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.0.move", 0xDCC9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.0.pp", 0xDCDE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.0.pp_up", 0xDCDE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.1.move", 0xDCCA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.1.pp", 0xDCDF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.1.pp_up", 0xDCDF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.2.move", 0xDCCB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.2.pp", 0xDCE0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.2.pp_up", 0xDCE0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.3.move", 0xDCCC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.3.pp", 0xDCE1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.3.pp_up", 0xDCE1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.attack", 0xDCE2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.defense", 0xDCE2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.speed", 0xDCE3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.special", 0xDCE3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.hp", 0xDCD8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.attack", 0xDCDA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.defense", 0xDCDC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.speed", 0xDCDE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.special", 0xDCE0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.species", 0xDCE8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.dex_number", 0xDCE8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.nickname", 0xDECC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.level", 0xDCEB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.exp", 0xDCF6, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.type_1", 0xDCED, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.type_2", 0xDCEE, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ot_id", 0xDCF4, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.status_condition", 0xDCEC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.stats.hp", 0xDCE9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.0.move", 0xDCEA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.0.pp", 0xDCFF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.0.pp_up", 0xDCFF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.1.move", 0xDCEB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.1.pp", 0xDD00, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.1.pp_up", 0xDD00, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.2.move", 0xDCEC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.2.pp", 0xDD01, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.2.pp_up", 0xDD01, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.3.move", 0xDCED, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.3.pp", 0xDD02, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.3.pp_up", 0xDD02, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.attack", 0xDD03, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.defense", 0xDD03, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.speed", 0xDD04, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.special", 0xDD04, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.hp", 0xDCF9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.attack", 0xDCFB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.defense", 0xDCFD, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.speed", 0xDCFF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.special", 0xDD01, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.species", 0xDD09, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.dex_number", 0xDD09, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.nickname", 0xDED7, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.level", 0xDD0C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.exp", 0xDD17, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.type_1", 0xDD0E, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.type_2", 0xDD0F, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ot_id", 0xDD15, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.status_condition", 0xDD0D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.stats.hp", 0xDD0A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.0.move", 0xDD0B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.0.pp", 0xDD20, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.0.pp_up", 0xDD20, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.1.move", 0xDD0C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.1.pp", 0xDD21, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.1.pp_up", 0xDD21, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.2.move", 0xDD0D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.2.pp", 0xDD22, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.2.pp_up", 0xDD22, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.3.move", 0xDD0E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.3.pp", 0xDD23, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.3.pp_up", 0xDD23, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.attack", 0xDD24, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.defense", 0xDD24, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.speed", 0xDD25, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.special", 0xDD25, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.hp", 0xDD1A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.attack", 0xDD1C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.defense", 0xDD1E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.speed", 0xDD20, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.special", 0xDD22, [0, 0], 0);
            mapper.AssertAreEqual("pc.item_storage.item_count", 0xD53A, [1], 1);
            mapper.AssertAreEqual("pc.item_storage.items.0.item", 0xD53B, [20], "POTION");
            mapper.AssertAreEqual("pc.item_storage.items.0.quantity", 0xD53C, [1], 1);
            mapper.AssertAreEqual("pc.item_storage.items.1.item", 0xD53D, [255], null);
            mapper.AssertAreEqual("pc.item_storage.items.1.quantity", 0xD53E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.2.item", 0xD53F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.2.quantity", 0xD540, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.3.item", 0xD541, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.3.quantity", 0xD542, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.4.item", 0xD543, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.4.quantity", 0xD544, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.5.item", 0xD545, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.5.quantity", 0xD546, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.6.item", 0xD547, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.6.quantity", 0xD548, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.7.item", 0xD549, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.7.quantity", 0xD54A, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.8.item", 0xD54B, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.8.quantity", 0xD54C, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.9.item", 0xD54D, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.9.quantity", 0xD54E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.10.item", 0xD54F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.10.quantity", 0xD550, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.11.item", 0xD551, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.11.quantity", 0xD552, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.12.item", 0xD553, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.12.quantity", 0xD554, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.13.item", 0xD555, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.13.quantity", 0xD556, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.14.item", 0xD557, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.14.quantity", 0xD558, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.15.item", 0xD559, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.15.quantity", 0xD55A, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.16.item", 0xD55B, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.16.quantity", 0xD55C, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.17.item", 0xD55D, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.17.quantity", 0xD55E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.18.item", 0xD55F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.18.quantity", 0xD560, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.19.item", 0xD561, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.19.quantity", 0xD562, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.20.item", 0xD563, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.20.quantity", 0xD564, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.21.item", 0xD565, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.21.quantity", 0xD566, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.22.item", 0xD567, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.22.quantity", 0xD568, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.23.item", 0xD569, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.23.quantity", 0xD56A, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.24.item", 0xD56B, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.24.quantity", 0xD56C, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.25.item", 0xD56D, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.25.quantity", 0xD56E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.26.item", 0xD56F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.26.quantity", 0xD570, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.27.item", 0xD571, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.27.quantity", 0xD572, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.28.item", 0xD573, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.28.quantity", 0xD574, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.29.item", 0xD575, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.29.quantity", 0xD576, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.30.item", 0xD577, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.30.quantity", 0xD578, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.31.item", 0xD579, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.31.quantity", 0xD57A, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.32.item", 0xD57B, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.32.quantity", 0xD57C, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.33.item", 0xD57D, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.33.quantity", 0xD57E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.34.item", 0xD57F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.34.quantity", 0xD580, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.35.item", 0xD581, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.35.quantity", 0xD582, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.36.item", 0xD583, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.36.quantity", 0xD584, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.37.item", 0xD585, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.37.quantity", 0xD586, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.38.item", 0xD587, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.38.quantity", 0xD588, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.39.item", 0xD589, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.39.quantity", 0xD58A, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.40.item", 0xD58B, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.40.quantity", 0xD58C, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.41.item", 0xD58D, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.41.quantity", 0xD58E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.42.item", 0xD58F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.42.quantity", 0xD590, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.43.item", 0xD591, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.43.quantity", 0xD592, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.44.item", 0xD593, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.44.quantity", 0xD594, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.45.item", 0xD595, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.45.quantity", 0xD596, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.46.item", 0xD597, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.46.quantity", 0xD598, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.47.item", 0xD599, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.47.quantity", 0xD59A, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.48.item", 0xD59B, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.48.quantity", 0xD59C, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.49.item", 0xD59D, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.49.quantity", 0xD59E, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.50.item", 0xD59F, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.50.quantity", 0xD5A0, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.51.item", 0xD5A1, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.51.quantity", 0xD5A2, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.52.item", 0xD5A3, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.52.quantity", 0xD5A4, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.53.item", 0xD5A5, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.53.quantity", 0xD5A6, [163], 163);
            mapper.AssertAreEqual("pc.item_storage.items.54.item", 0xD5A7, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.54.quantity", 0xD5A8, [126], 126);
            mapper.AssertAreEqual("pc.item_storage.items.55.item", 0xD5A9, [1], "MASTER BALL");
            mapper.AssertAreEqual("pc.item_storage.items.55.quantity", 0xD5AA, [8], 8);
            mapper.AssertAreEqual("pc.item_storage.items.56.item", 0xD5AB, [157], null);
            mapper.AssertAreEqual("pc.item_storage.items.56.quantity", 0xD5AC, [3], 3);
            mapper.AssertAreEqual("pc.item_storage.items.57.item", 0xD5AD, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.57.quantity", 0xD5AE, [16], 16);
            mapper.AssertAreEqual("screen.text.prompt", 0xC4F2, [238], "\u25bc");
            mapper.AssertAreEqual("screen.menu.current_item", 0xCC26, [0], 0);
            mapper.AssertAreEqual("screen.column_1.tiles.0", 0x9C0D, [127], 127);
            mapper.AssertAreEqual("screen.column_1.tiles.1", 0x9C2D, [127], 127);
            mapper.AssertAreEqual("screen.column_1.tiles.2", 0x9C4D, [127], 127);
            mapper.AssertAreEqual("screen.column_1.tiles.3", 0x9C6D, [127], 127);
            mapper.AssertAreEqual("screen.column_1.tiles.4", 0x9C8D, [127], 127);
            mapper.AssertAreEqual("screen.column_1.tiles.5", 0x9CAD, [127], 127);
            mapper.AssertAreEqual("screen.column_1.tiles.6", 0x9CCD, [127], 127);
            //mapper.AssertAreEqual("options.text_speed", 0xD354, [0], "Instant");
            mapper.AssertAreEqual("options.sound_1", 0xD355, [3], false);
            mapper.AssertAreEqual("options.sound_2", 0xD355, [3], false);
            mapper.AssertAreEqual("options.battle_style", 0xD355, [3], false);
            mapper.AssertAreEqual("options.battle_animations", 0xD355, [3], false);
            mapper.AssertAreEqual("game_time.hours", 0xDA40, [0, 0], 0);
            mapper.AssertAreEqual("game_time.minutes", 0xDA42, [0, 13], 13);
            mapper.AssertAreEqual("game_time.seconds", 0xDA44, [25], 25);
            mapper.AssertAreEqual("game_time.frames", 0xDA45, [33], 33);
            mapper.AssertAreEqual("input.a", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.b", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.select", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.start", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.right", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.left", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.up", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.down", 0xFFB1, [0], false);
            mapper.AssertAreEqual("meta.generation", "1");
            mapper.AssertAreEqual("meta.game_name", "Red and Blue");
            mapper.AssertAreEqual("meta.game_type", "Originals");
            mapper.AssertAreEqual("meta.state", "From Battle");
        }

    }
}
