using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonYellow : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GB_PokemonYellow(9);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0xD157, [128, 128, 128, 128, 128, 128, 128, 80, 0, 0, 0], "AAAAAAA");
            mapper.AssertAreEqual("player.player_id", 0xD358, [139, 78], 35662);
            mapper.AssertAreEqual("player.team_count", 0xD162, [1], 1);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", 0xD16A, [84], "Pikachu");
            mapper.AssertAreEqual("player.active_pokemon.dex_number", 0xD16A, [84], 25);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0xD2B4, [129, 129, 129, 80, 127, 129, 128, 139, 139, 80, 0], "BBB");
            mapper.AssertAreEqual("player.active_pokemon.level", 0xD18B, [20], 20);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0xD178, [0, 32, 111], 8303);
            mapper.AssertAreEqual("player.active_pokemon.type_1", 0xD16F, [23], "Electric");
            mapper.AssertAreEqual("player.active_pokemon.type_2", 0xD170, [23], "Electric");
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0xD176, [139, 78], 35662);
            mapper.AssertAreEqual("player.active_pokemon.catch_rate", 0xD171, [163], 163);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0xD16E, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0xD172, [84], "ThunderShock");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0xD187, [23], 23);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0xD187, [23], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0xD173, [104], "Double Team");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0xD188, [15], 15);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0xD188, [15], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0xD174, [21], "Slam");
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0xD189, [20], 20);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0xD189, [20], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0xD175, [98], "Quick Attack");
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0xD18A, [30], 30);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0xD18A, [30], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0xD16B, [0, 48], 48);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0xD18C, [0, 51], 51);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0xD18E, [0, 34], 34);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0xD190, [0, 25], 25);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0xD192, [0, 50], 50);
            mapper.AssertAreEqual("player.active_pokemon.stats.special", 0xD194, [0, 28], 28);
            mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 10);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0xD185, [190], 11);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0xD185, [190], 14);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0xD186, [242], 15);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special", 0xD186, [242], 2);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0xD17B, [16, 75], 4171);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0xD17D, [13, 240], 3568);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0xD17F, [16, 182], 4278);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0xD181, [17, 131], 4483);
            mapper.AssertAreEqual("player.active_pokemon.evs.special", 0xD183, [10, 255], 2815);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.confusion", false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.toxic", false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.leech_seed", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bide", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.thrash", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.multi_hit", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.flinch", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.charging", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.multi_turn", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.invulnerable", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bypass_accuracy", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.mist", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.focus_energy", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.substitute", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.recharge", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.rage", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.lightscreen", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.reflect", false);
            mapper.AssertAreEqual("player.active_pokemon.effects.transformed", false);
            mapper.AssertAreEqual("player.active_pokemon.counters.multi_hit", 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.confusion", 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.toxic", 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.disable", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.effect", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.power", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.last_move.pp_max", 0);
            mapper.AssertAreEqual("player.team.0.species", 0xD16A, [84], "Pikachu");
            mapper.AssertAreEqual("player.team.0.dex_number", 0xD16A, [84], 25);
            mapper.AssertAreEqual("player.team.0.nickname", 0xD2B4, [129, 129, 129, 80, 127, 129, 128, 139, 139, 80, 0], "BBB");
            mapper.AssertAreEqual("player.team.0.level", 0xD18B, [20], 20);
            mapper.AssertAreEqual("player.team.0.exp", 0xD178, [0, 32, 111], 8303);
            mapper.AssertAreEqual("player.team.0.type_1", 0xD16F, [23], "Electric");
            mapper.AssertAreEqual("player.team.0.type_2", 0xD170, [23], "Electric");
            mapper.AssertAreEqual("player.team.0.ot_id", 0xD176, [139, 78], 35662);
            mapper.AssertAreEqual("player.team.0.catch_rate", 0xD171, [163], 163);
            mapper.AssertAreEqual("player.team.0.status_condition", 0xD16E, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0xD172, [84], "ThunderShock");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0xD187, [23], 23);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0xD187, [23], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0xD173, [104], "Double Team");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0xD188, [15], 15);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0xD188, [15], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0xD174, [21], "Slam");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0xD189, [20], 20);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0xD189, [20], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0xD175, [98], "Quick Attack");
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0xD18A, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0xD18A, [30], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0xD16B, [0, 48], 48);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0xD18C, [0, 51], 51);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0xD18E, [0, 34], 34);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0xD190, [0, 25], 25);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0xD192, [0, 50], 50);
            mapper.AssertAreEqual("player.team.0.stats.special", 0xD194, [0, 28], 28);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 10);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0xD185, [190], 11);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0xD185, [190], 14);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0xD186, [242], 15);
            mapper.AssertAreEqual("player.team.0.ivs.special", 0xD186, [242], 2);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0xD17B, [16, 75], 4171);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0xD17D, [13, 240], 3568);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0xD17F, [16, 182], 4278);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0xD181, [17, 131], 4483);
            mapper.AssertAreEqual("player.team.0.evs.special", 0xD183, [10, 255], 2815);
            mapper.AssertAreEqual("player.team.1.species", 0xD196, [0], null);
            mapper.AssertAreEqual("player.team.1.dex_number", 0xD196, [0], null);
            mapper.AssertAreEqual("player.team.1.nickname", 0xD2BF, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.level", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("player.team.1.exp", 0xD1A4, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.type_1", 0xD19B, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.type_2", 0xD19C, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.ot_id", 0xD1A2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.catch_rate", 0xD19D, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0xD19A, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0xD19E, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0xD19F, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0xD1A0, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0xD1A1, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0xD197, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0xD1B8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0xD1BA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0xD1BC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0xD1BE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special", 0xD1C0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0xD1B1, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0xD1B1, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0xD1A7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0xD1A9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0xD1AB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0xD1AD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special", 0xD1AF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.species", 0xD1C2, [0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0xD1C2, [0], null);
            mapper.AssertAreEqual("player.team.2.nickname", 0xD2CA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.level", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0xD1D0, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.type_1", 0xD1C7, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.type_2", 0xD1C8, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.ot_id", 0xD1CE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.catch_rate", 0xD1C9, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0xD1C6, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0xD1CA, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0xD1CB, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0xD1CC, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0xD1CD, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0xD1C3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0xD1E4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0xD1E6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0xD1E8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0xD1EA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special", 0xD1EC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0xD1DD, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0xD1DD, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0xD1D3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0xD1D5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0xD1D7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0xD1D9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special", 0xD1DB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.species", 0xD1EE, [0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0xD1EE, [0], null);
            mapper.AssertAreEqual("player.team.3.nickname", 0xD2D5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.level", 0xD20F, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0xD1FC, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.type_1", 0xD1F3, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.type_2", 0xD1F4, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.ot_id", 0xD1FA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.catch_rate", 0xD1F5, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0xD1F2, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0xD1F6, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0xD1F7, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0xD1F8, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0xD1F9, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0xD1EF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0xD210, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0xD212, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0xD214, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0xD216, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special", 0xD218, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0xD209, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0xD209, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0xD1FF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0xD201, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0xD203, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0xD205, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special", 0xD207, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.species", 0xD21A, [0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0xD21A, [0], null);
            mapper.AssertAreEqual("player.team.4.nickname", 0xD2E0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.level", 0xD23B, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0xD228, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.type_1", 0xD21F, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.type_2", 0xD220, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.ot_id", 0xD226, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.catch_rate", 0xD221, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0xD21E, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0xD222, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0xD223, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0xD224, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0xD225, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0xD21B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0xD23C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0xD23E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0xD240, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0xD242, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special", 0xD244, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0xD235, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0xD235, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0xD22B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0xD22D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0xD22F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0xD231, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special", 0xD233, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0xD246, [0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0xD246, [0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0xD2EB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.level", 0xD267, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0xD254, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.type_1", 0xD24B, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.type_2", 0xD24C, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.ot_id", 0xD252, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.catch_rate", 0xD24D, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0xD24A, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0xD24E, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0xD24F, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0xD250, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0xD251, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0xD247, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0xD268, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0xD26A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0xD26C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0xD26E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special", 0xD270, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0xD261, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0xD261, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0xD257, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0xD259, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0xD25B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0xD25D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special", 0xD25F, [0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0xD355, [1], true);
            mapper.AssertAreEqual("player.badges.1", 0xD355, [1], false);
            mapper.AssertAreEqual("player.badges.2", 0xD355, [1], false);
            mapper.AssertAreEqual("player.badges.3", 0xD355, [1], false);
            mapper.AssertAreEqual("player.badges.4", 0xD355, [1], false);
            mapper.AssertAreEqual("player.badges.5", 0xD355, [1], false);
            mapper.AssertAreEqual("player.badges.6", 0xD355, [1], false);
            mapper.AssertAreEqual("player.badges.7", 0xD355, [1], false);
            //mapper.AssertAreEqual("player.pokedex_seen", 0xD309, [0, 182, 68, 149, 4, 33, 10, 0, 0, 2, 128, 66, 8, 16, 40, 0, 16, 0, 0], (bool[])[false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
           // mapper.AssertAreEqual("player.pokedex_caught", 0xD2F6, [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], (bool[])[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
            mapper.AssertAreEqual("player.starter_pokemon", 0xD716, [84], "Pikachu");
            mapper.AssertAreEqual("player.joypad_simulation", 0xCD38, [0], false);
            mapper.AssertAreEqual("player.joypad_ignore", 0xCD6B, [0], 0);
            mapper.AssertAreEqual("bag.money", 0xD346, [0, 101, 136], 6588);
            mapper.AssertAreEqual("bag.coins", 0xD5A3, [0, 0], 0);
            mapper.AssertAreEqual("bag.item_count", 0xD31C, [3], 3);
            mapper.AssertAreEqual("bag.items.0.item", 0xD31D, [234], "TM34: Bide");
            mapper.AssertAreEqual("bag.items.0.quantity", 0xD31E, [1], 1);
            mapper.AssertAreEqual("bag.items.1.item", 0xD31F, [40], "RARE CANDY");
            mapper.AssertAreEqual("bag.items.1.quantity", 0xD320, [1], 1);
            mapper.AssertAreEqual("bag.items.2.item", 0xD321, [41], "DOME FOSSIL");
            mapper.AssertAreEqual("bag.items.2.quantity", 0xD322, [1], 1);
            mapper.AssertAreEqual("bag.items.3.item", 0xD323, [255], null);
            mapper.AssertAreEqual("bag.items.3.quantity", 0xD324, [1], 1);
            mapper.AssertAreEqual("bag.items.4.item", 0xD325, [255], null);
            mapper.AssertAreEqual("bag.items.4.quantity", 0xD326, [0], 0);
            mapper.AssertAreEqual("bag.items.5.item", 0xD327, [0], null);
            mapper.AssertAreEqual("bag.items.5.quantity", 0xD328, [0], 0);
            mapper.AssertAreEqual("bag.items.6.item", 0xD329, [0], null);
            mapper.AssertAreEqual("bag.items.6.quantity", 0xD32A, [0], 0);
            mapper.AssertAreEqual("bag.items.7.item", 0xD32B, [0], null);
            mapper.AssertAreEqual("bag.items.7.quantity", 0xD32C, [0], 0);
            mapper.AssertAreEqual("bag.items.8.item", 0xD32D, [0], null);
            mapper.AssertAreEqual("bag.items.8.quantity", 0xD32E, [0], 0);
            mapper.AssertAreEqual("bag.items.9.item", 0xD32F, [0], null);
            mapper.AssertAreEqual("bag.items.9.quantity", 0xD330, [0], 0);
            mapper.AssertAreEqual("bag.items.10.item", 0xD331, [0], null);
            mapper.AssertAreEqual("bag.items.10.quantity", 0xD332, [0], 0);
            mapper.AssertAreEqual("bag.items.11.item", 0xD333, [0], null);
            mapper.AssertAreEqual("bag.items.11.quantity", 0xD334, [0], 0);
            mapper.AssertAreEqual("bag.items.12.item", 0xD335, [0], null);
            mapper.AssertAreEqual("bag.items.12.quantity", 0xD336, [0], 0);
            mapper.AssertAreEqual("bag.items.13.item", 0xD337, [0], null);
            mapper.AssertAreEqual("bag.items.13.quantity", 0xD338, [0], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0xD339, [0], null);
            mapper.AssertAreEqual("bag.items.14.quantity", 0xD33A, [0], 0);
            mapper.AssertAreEqual("bag.items.15.item", 0xD33B, [0], null);
            mapper.AssertAreEqual("bag.items.15.quantity", 0xD33C, [0], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0xD33D, [0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0xD33E, [0], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0xD33F, [0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0xD340, [0], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0xD341, [0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0xD342, [0], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0xD343, [0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0xD344, [0], 0);
            mapper.AssertAreEqual("overworld.map_name", 0xD35D, [65], "Cerulean City - Gym");
            mapper.AssertAreEqual("overworld.map_index", 0xD35D, [65], 65);
            mapper.AssertAreEqual("overworld.y", 0xD360, [2], 2);
            mapper.AssertAreEqual("overworld.x", 0xD361, [5], 5);
            mapper.AssertAreEqual("overworld.movement_state", 0xD6FF, [0], "Walk");
            mapper.AssertAreEqual("overworld.encounter_rate", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.repel_count", 0xD0DA, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.walking", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.surfing", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.old_rod", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.good_rod", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.super_rod", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.encounter_table.common.0.level", 0xD887, [8], 8);
            mapper.AssertAreEqual("overworld.encounter_table.common.0.species", 0xD888, [5], "Spearow");
            mapper.AssertAreEqual("overworld.encounter_table.common.0.dex_number", 0xD888, [5], 21);
            mapper.AssertAreEqual("overworld.encounter_table.common.1.level", 0xD889, [9], 9);
            mapper.AssertAreEqual("overworld.encounter_table.common.1.species", 0xD88A, [5], "Spearow");
            mapper.AssertAreEqual("overworld.encounter_table.common.1.dex_number", 0xD88A, [5], 21);
            mapper.AssertAreEqual("overworld.encounter_table.common.2.level", 0xD88B, [9], 9);
            mapper.AssertAreEqual("overworld.encounter_table.common.2.species", 0xD88C, [57], "Mankey");
            mapper.AssertAreEqual("overworld.encounter_table.common.2.dex_number", 0xD88C, [57], 56);
            mapper.AssertAreEqual("overworld.encounter_table.common.3.level", 0xD88D, [10], 10);
            mapper.AssertAreEqual("overworld.encounter_table.common.3.species", 0xD88E, [5], "Spearow");
            mapper.AssertAreEqual("overworld.encounter_table.common.3.dex_number", 0xD88E, [5], 21);
            //mapper.AssertAreEqual("overworld.encounter_table.common.4.level", 0xD88F, [8], 8);
            //mapper.AssertAreEqual("overworld.encounter_table.common.4.species", 0xD890, [96], "Sandshrew");
            //mapper.AssertAreEqual("overworld.encounter_table.common.4.dex_number", 0xD890, [96], 27);
            //mapper.AssertAreEqual("overworld.encounter_table.uncommon.0.level", 0xD889, [9], 9);
            //mapper.AssertAreEqual("overworld.encounter_table.uncommon.0.species", 0xD88A, [5], "Spearow");
            //mapper.AssertAreEqual("overworld.encounter_table.uncommon.0.dex_number", 0xD88A, [5], 21);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.1.level", 0xD891, [10], 10);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.1.species", 0xD892, [165], "Rattata");
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.1.dex_number", 0xD892, [165], 19);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.2.level", 0xD893, [10], 10);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.2.species", 0xD894, [96], "Sandshrew");
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.2.dex_number", 0xD894, [96], 27);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.3.level", 0xD895, [12], 12);
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.3.species", 0xD896, [165], "Rattata");
            mapper.AssertAreEqual("overworld.encounter_table.uncommon.3.dex_number", 0xD896, [165], 19);
            mapper.AssertAreEqual("overworld.encounter_table.rare.0.level", 0xD897, [11], 11);
            mapper.AssertAreEqual("overworld.encounter_table.rare.0.species", 0xD898, [5], "Spearow");
            mapper.AssertAreEqual("overworld.encounter_table.rare.0.dex_number", 0xD898, [5], 21);
            mapper.AssertAreEqual("overworld.encounter_table.rare.1.level", 0xD899, [12], 12);
            mapper.AssertAreEqual("overworld.encounter_table.rare.1.species", 0xD89A, [5], "Spearow");
            mapper.AssertAreEqual("overworld.encounter_table.rare.1.dex_number", 0xD89A, [5], 21);
            mapper.AssertAreEqual("overworld.safari_zone.safari_time", 0xD70C, [0, 0], 0);
            mapper.AssertAreEqual("overworld.safari_zone.safari_balls", 0xDA46, [0], 0);
            //mapper.AssertAreEqual("overworld.safari_zone.baiting_factor", 0xCCE8, [0], 0);
            mapper.AssertAreEqual("overworld.map_data.tileset", 0xD366, [7], 7);
            mapper.AssertAreEqual("overworld.map_data.height", 0xD367, [7], 7);
            mapper.AssertAreEqual("overworld.map_data.width", 0xD368, [5], 5);
            mapper.AssertAreEqual("overworld.map_data.palette", 0xD35C, [0], 0);
            mapper.AssertAreEqual("overworld.map_data.last_map", 0xD365, [20], "Route 9");
            mapper.AssertAreEqual("events.trash_can_puzzle", 0xD772, [0], false);
            mapper.AssertAreEqual("flags.count_play_time", 0xD731, [1], true);
            mapper.AssertAreEqual("flags.debug_mode", 0xD731, [1], false);
            mapper.AssertAreEqual("flags.fly_or_dungeon", 0xD731, [1], false);
            mapper.AssertAreEqual("flags.fly_warp", 0xD731, [1], false);
            mapper.AssertAreEqual("flags.dungeon_warp", 0xD731, [1], false);
            mapper.AssertAreEqual("flags.destination_is_blackout", 0xD731, [1], false);
            mapper.AssertAreEqual("flags.beat_champion", 0xD866, [0], false);
            mapper.AssertAreEqual("event_flags.followed_oak_into_lab", 0xD746, [1], true);
            mapper.AssertAreEqual("event_flags.hall_of_fame_dex_rating", 0xD746, [1], false);
            mapper.AssertAreEqual("event_flags.player_at_right_exit_to_pallet_town", 0xD746, [1], false);
            mapper.AssertAreEqual("event_flags.pallet_after_getting_pokeballs", 0xD746, [1], false);
            mapper.AssertAreEqual("event_flags.got_town_map", 0xD749, [0], false);
            mapper.AssertAreEqual("event_flags.entered_blues_house", 0xD749, [0], false);
            mapper.AssertAreEqual("event_flags.daisy_walking", 0xD749, [0], false);
            mapper.AssertAreEqual("event_flags.followed_oak_into_lab_2", 0xD74A, [175], true);
            mapper.AssertAreEqual("event_flags.oak_asked_to_choose_mon", 0xD74A, [175], true);
            mapper.AssertAreEqual("event_flags.got_starter", 0xD74A, [175], true);
            mapper.AssertAreEqual("event_flags.battled_rival_in_oaks_lab", 0xD74A, [175], true);
            mapper.AssertAreEqual("event_flags.got_pokeballs_from_oak", 0xD74A, [175], false);
            mapper.AssertAreEqual("event_flags.got_pokedex", 0xD74A, [175], true);
            mapper.AssertAreEqual("event_flags.pallet_after_getting_pokeballs_2", 0xD74A, [175], false);
            mapper.AssertAreEqual("event_flags.oak_appeared_in_pallet", 0xD74A, [175], true);
            mapper.AssertAreEqual("event_flags.viridian_gym_open", 0xD74B, [160], false);
            mapper.AssertAreEqual("event_flags.got_tm42", 0xD74B, [160], false);
            mapper.AssertAreEqual("event_flags.spawned_old_man_1", 0xD74B, [160], false);
            mapper.AssertAreEqual("event_flags.completed_catch_training", 0xD74B, [160], true);
            mapper.AssertAreEqual("event_flags.completed_catch_training_again", 0xD74B, [160], false);
            mapper.AssertAreEqual("event_flags.initial_catch_training", 0xD74B, [160], true);
            mapper.AssertAreEqual("event_flags.oak_got_parcel", 0xD74D, [3], true);
            mapper.AssertAreEqual("event_flags.got_oaks_parcel", 0xD74D, [3], true);
            mapper.AssertAreEqual("event_flags.got_tm27", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_giovanni", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_0", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_1", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_2", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_3", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_4", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_5", 0xD750, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_6", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_gym_trainer_7", 0xD751, [0], false);
            mapper.AssertAreEqual("event_flags.bought_museum_ticket", 0xD753, [0], false);
            mapper.AssertAreEqual("event_flags.got_old_amber", 0xD753, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pewter_gym_trainer_0", 0xD754, [196], true);
            mapper.AssertAreEqual("event_flags.got_tm34", 0xD754, [196], true);
            mapper.AssertAreEqual("event_flags.beat_brock", 0xD754, [196], true);
            mapper.AssertAreEqual("event_flags.beat_cerulean_rival", 0xD759, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cerulean_rocket_thief", 0xD75A, [0], false);
            mapper.AssertAreEqual("event_flags.got_bulbasaur_in_cerulean", 0xD75B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cerulean_gym_trainer_0", 0xD75D, [12], true);
            mapper.AssertAreEqual("event_flags.beat_cerulean_gym_trainer_1", 0xD75D, [12], true);
            mapper.AssertAreEqual("event_flags.got_tm11", 0xD75D, [12], false);
            mapper.AssertAreEqual("event_flags.beat_misty", 0xD75D, [12], false);
            mapper.AssertAreEqual("event_flags.got_bicycle", 0xD75E, [0], false);
            mapper.AssertAreEqual("event_flags.pokemon_tower_rival_on_left", 0xD764, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemon_tower_rival", 0xD764, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_3_trainer_0", 0xD764, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_3_trainer_1", 0xD764, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_3_trainer_2", 0xD764, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_4_trainer_0", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_4_trainer_1", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_4_trainer_2", 0xD765, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_0", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_1", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_2", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_5_trainer_3", 0xD766, [0], false);
            mapper.AssertAreEqual("event_flags.in_purified_zone", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_6_trainer_0", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_6_trainer_1", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_6_trainer_2", 0xD767, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ghost_marowak", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_7_trainer_0", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_7_trainer_1", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemontower_7_trainer_2", 0xD768, [0], false);
            mapper.AssertAreEqual("event_flags.rescued_mr_fuji_2", 0xD769, [0], false);
            mapper.AssertAreEqual("event_flags.got_poke_flute", 0xD76B, [0], false);
            mapper.AssertAreEqual("event_flags.got_squirtle_from_officer_jenny", 0xD76F, [0], false);
            mapper.AssertAreEqual("event_flags.got_bike_voucher", 0xD770, [0], false);
            mapper.AssertAreEqual("event_flags.left_fanclub_after_bike_voucher", 0xD770, [0], false);
            mapper.AssertAreEqual("event_flags.seel_fan_boast", 0xD770, [0], false);
            mapper.AssertAreEqual("event_flags.pikachu_fan_boast", 0xD770, [0], false);
            mapper.AssertAreEqual("event_flags.2nd_lock_opened", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.1st_lock_opened", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.beat_vermilion_gym_trainer_0", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.beat_vermilion_gym_trainer_1", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.beat_vermilion_gym_trainer_2", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm24", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lt_surge", 0xD772, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm41", 0xD776, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm13", 0xD777, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm48", 0xD777, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm49", 0xD777, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm18", 0xD777, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm21", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_erika", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_0", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_1", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_2", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_3", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_4", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_5", 0xD77B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_celadon_gym_trainer_6", 0xD77C, [0], false);
            mapper.AssertAreEqual("event_flags.1b8", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.found_rocket_hideout", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.got_10_coins", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.got_20_coins", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.got_20_coins_2", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.1bf", 0xD77D, [0], false);
            mapper.AssertAreEqual("event_flags.got_coin_case", 0xD782, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm04", 0xD78D, [0], false);
            mapper.AssertAreEqual("event_flags.gave_gold_teeth", 0xD78D, [0], false);
            mapper.AssertAreEqual("event_flags.safari_game_over", 0xD78F, [0], false);
            mapper.AssertAreEqual("event_flags.in_safari_zone", 0xD78F, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm06", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_koga", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_0", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_1", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_2", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_3", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_4", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fuchsia_gym_trainer_5", 0xD791, [0], false);
            mapper.AssertAreEqual("event_flags.mansion_switch_on", 0xD795, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_1_trainer_0", 0xD797, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm38", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blaine", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_0", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_1", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_2", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_3", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_4", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_5", 0xD799, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cinnabar_gym_trainer_6", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.2a7", 0xD79A, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate0_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate1_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate2_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate3_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate4_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate5_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_gym_gate6_unlocked", 0xD79B, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm35", 0xD7A0, [0], false);
            mapper.AssertAreEqual("event_flags.gave_fossil_to_lab", 0xD7A2, [0], false);
            mapper.AssertAreEqual("event_flags.lab_still_reviving_fossil", 0xD7A2, [0], false);
            mapper.AssertAreEqual("event_flags.lab_handing_over_fossil_mon", 0xD7A2, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm31", 0xD7AE, [0], false);
            mapper.AssertAreEqual("event_flags.defeated_fighting_dojo", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_karate_master", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_0", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_1", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_2", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fighting_dojo_trainer_3", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.got_hitmonlee", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.got_hitmonchan", 0xD7B0, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm46", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sabrina", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_0", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_1", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_2", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_3", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_4", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_5", 0xD7B2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_saffron_gym_trainer_6", 0xD7B3, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_receptionist_at_desk", 0xD7B8, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm29", 0xD7BC, [0], false);
            mapper.AssertAreEqual("event_flags.got_potion_sample", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm05", 0xD7C1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_0", 0xD7C2, [44], true);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_1", 0xD7C2, [44], true);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_2", 0xD7C2, [44], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_3", 0xD7C2, [44], true);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_4", 0xD7C2, [44], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_5", 0xD7C2, [44], false);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_6", 0xD7C3, [1], true);
            mapper.AssertAreEqual("event_flags.beat_route_3_trainer_7", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.beat_route_4_trainer_0", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.bought_magikarp", 0xD7C5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_0", 0xD7C8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_1", 0xD7C8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_2", 0xD7C8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_3", 0xD7C8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_4", 0xD7C8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_6_trainer_5", 0xD7C8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_0", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_1", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_2", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_3", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_4", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_5", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_6", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_7", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_8_trainer_8", 0xD7CD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_0", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_1", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_2", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_3", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_4", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_5", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_6", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_7", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_9_trainer_8", 0xD7CF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_0", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_1", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_2", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_3", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_4", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_10_trainer_5", 0xD7D0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_0", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_1", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_2", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_3", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_4", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_5", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_1_trainer_6", 0xD7D1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_0", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_1", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_2", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_3", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_4", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_5", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_6", 0xD7D2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_power_plant_voltorb_7", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_zapdos", 0xD7D3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_0", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_1", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_2", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_3", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_4", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_5", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_6", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_7", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_8", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_11_trainer_9", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.got_itemfinder", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm39", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_0", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_1", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_2", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_3", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_4", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_5", 0xD7D6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_12_trainer_6", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.fight_route12_snorlax", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route12_snorlax", 0xD7D7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_0", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_1", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_2", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_3", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_4", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_5", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_6", 0xD7D8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_7", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_8", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_13_trainer_9", 0xD7D9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_0", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_1", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_2", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_3", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_4", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_5", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_6", 0xD7DA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_7", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_8", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_14_trainer_9", 0xD7DB, [0], false);
            mapper.AssertAreEqual("event_flags.got_exp_all", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_0", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_1", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_2", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_3", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_4", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_5", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_6", 0xD7DC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_7", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_8", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_15_trainer_9", 0xD7DD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_0", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_1", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_2", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_3", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_4", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_16_trainer_5", 0xD7DE, [0], false);
            mapper.AssertAreEqual("event_flags.fight_route16_snorlax", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route16_snorlax", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm02", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.rescued_mr_fuji", 0xD7DF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_0", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_1", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_2", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_3", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_4", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_5", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_6", 0xD7E0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_7", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_8", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_17_trainer_9", 0xD7E1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_18_trainer_0", 0xD7E2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_18_trainer_1", 0xD7E2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_18_trainer_2", 0xD7E2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_0", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_1", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_2", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_3", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_4", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_5", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_6", 0xD7E4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_7", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_8", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_19_trainer_9", 0xD7E5, [0], false);
            mapper.AssertAreEqual("event_flags.in_seafoam_islands", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_0", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_1", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_2", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_3", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_4", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_5", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_6", 0xD7E6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_7", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_8", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_20_trainer_9", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam1_boulder1_down_hole", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam1_boulder2_down_hole", 0xD7E7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_0", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_1", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_2", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_3", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_4", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_5", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_6", 0xD7E8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_7", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_21_trainer_8", 0xD7E9, [0], false);
            mapper.AssertAreEqual("event_flags.1st_route22_rival_battle", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.2nd_route22_rival_battle", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route22_rival_1st_battle", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route22_rival_2nd_battle", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.route22_rival_wants_battle", 0xD7EA, [0], false);
            mapper.AssertAreEqual("event_flags.passed_cascadebadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.passed_thunderbadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.passed_rainbowbadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.passed_soulbadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.passed_marshbadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.passed_volcanobadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.passed_earthbadge_check", 0xD7EC, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_2_boulder_on_switch1", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_0", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_1", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_2", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_3", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_2_trainer_4", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.beat_moltres", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_2_boulder_on_switch2", 0xD7ED, [0], false);
            mapper.AssertAreEqual("event_flags.got_nugget", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route24_rocket", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_0", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_1", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_2", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_3", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_4", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_24_trainer_5", 0xD7EE, [0], false);
            mapper.AssertAreEqual("event_flags.nugget_reward_available", 0xD7EF, [0], false);
            mapper.AssertAreEqual("event_flags.54f", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.met_bill", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_0", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_1", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_2", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_3", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_4", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_5", 0xD7F0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_6", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_7", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_route_25_trainer_8", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.used_cell_separator_on_bill", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.got_ss_ticket", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.met_bill_2", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.bill_said_use_cell_separator", 0xD7F1, [0], false);
            mapper.AssertAreEqual("event_flags.left_bills_house_after_helping", 0xD7F2, [124], false);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_0", 0xD7F2, [124], true);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_1", 0xD7F2, [124], true);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_2", 0xD7F2, [124], true);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_3", 0xD7F2, [124], true);
            mapper.AssertAreEqual("event_flags.beat_viridian_forest_trainer_4", 0xD7F2, [124], true);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_0", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_1", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_2", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_3", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_4", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_5", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_1_trainer_6", 0xD7F4, [0], false);
            mapper.AssertAreEqual("event_flags.got_dome_fossil", 0xD7F5, [7], true);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_exit_super_nerd", 0xD7F5, [7], true);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_0", 0xD7F5, [7], true);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_1", 0xD7F5, [7], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_2", 0xD7F5, [7], false);
            mapper.AssertAreEqual("event_flags.beat_mt_moon_3_trainer_3", 0xD7F5, [7], false);
            mapper.AssertAreEqual("event_flags.57e", 0xD7F5, [7], false);
            mapper.AssertAreEqual("event_flags.got_helix_fossil", 0xD7F5, [7], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_5_trainer_0", 0xD7FE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_5_trainer_1", 0xD7FE, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm01", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.rubbed_captains_back", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.ss_anne_left", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.walked_past_guard_after_ss_anne_left", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.started_walking_out_of_dock", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.walked_out_of_dock", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_0", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_1", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_2", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_8_trainer_3", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_0", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_1", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_2", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_9_trainer_3", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_0", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_1", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_2", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_3", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_4", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ss_anne_10_trainer_5", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_3_boulder_on_switch1", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_0", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_1", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_2", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_3_trainer_3", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_3_boulder_on_switch2", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_0", 0xD814, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_1", 0xD814, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_2", 0xD814, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_3", 0xD814, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_1_trainer_4", 0xD814, [0], false);
            mapper.AssertAreEqual("event_flags.677", 0xD814, [0], false);
            mapper.AssertAreEqual("event_flags.67f", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_2_trainer_0", 0xD816, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_3_trainer_0", 0xD818, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_3_trainer_1", 0xD818, [0], false);
            mapper.AssertAreEqual("event_flags.6a0", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_4_trainer_0", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_4_trainer_1", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_4_trainer_2", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.rocket_hideout_4_door_unlocked", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.rocket_dropped_lift_key", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_hideout_giovanni", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_0", 0xD824, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_1", 0xD824, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_2", 0xD824, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_2f_trainer_3", 0xD824, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_2_unlocked_door1", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_2_unlocked_door2", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm36", 0xD825, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_3f_trainer_0", 0xD826, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_3f_trainer_1", 0xD826, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_3_unlocked_door1", 0xD827, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_3_unlocked_door2", 0xD827, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_4f_trainer_0", 0xD828, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_4f_trainer_1", 0xD828, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_4f_trainer_2", 0xD828, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_4_unlocked_door1", 0xD829, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_4_unlocked_door2", 0xD829, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_0", 0xD82A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_1", 0xD82A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_2", 0xD82A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_5f_trainer_3", 0xD82A, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_5_unlocked_door1", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_5_unlocked_door2", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_5_unlocked_door3", 0xD82B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_6f_trainer_0", 0xD82C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_6f_trainer_1", 0xD82C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_6f_trainer_2", 0xD82D, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_6_unlocked_door", 0xD82D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_rival", 0xD82E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_0", 0xD82E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_1", 0xD82E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_2", 0xD82E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_7f_trainer_3", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_7_unlocked_door1", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_7_unlocked_door2", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_7_unlocked_door3", 0xD82F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_8f_trainer_0", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_8f_trainer_1", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_8f_trainer_2", 0xD830, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_8_unlocked_door", 0xD831, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_9f_trainer_0", 0xD832, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_9f_trainer_1", 0xD832, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_9f_trainer_2", 0xD832, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door1", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door2", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door3", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_9_unlocked_door4", 0xD833, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_10f_trainer_0", 0xD834, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_10f_trainer_1", 0xD834, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_10_unlocked_door", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.780", 0xD836, [0], false);
            mapper.AssertAreEqual("event_flags.781", 0xD836, [0], false);
            mapper.AssertAreEqual("event_flags.782", 0xD836, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_11f_trainer_0", 0xD836, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_11f_trainer_1", 0xD836, [0], false);
            mapper.AssertAreEqual("event_flags.silph_co_11_unlocked_door", 0xD837, [0], false);
            mapper.AssertAreEqual("event_flags.got_master_ball", 0xD837, [0], false);
            mapper.AssertAreEqual("event_flags.beat_silph_co_giovanni", 0xD837, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_2_trainer_0", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_3_trainer_0", 0xD848, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_3_trainer_1", 0xD848, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_4_trainer_0", 0xD84A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mansion_4_trainer_1", 0xD84A, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm03", 0xD856, [0], false);
            mapper.AssertAreEqual("event_flags.beat_mewtwo", 0xD85E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_loreleis_room_trainer_0", 0xD862, [0], false);
            mapper.AssertAreEqual("event_flags.autowalked_into_loreleis_room", 0xD862, [0], false);
            mapper.AssertAreEqual("event_flags.beat_brunos_room_trainer_0", 0xD863, [0], false);
            mapper.AssertAreEqual("event_flags.autowalked_into_brunos_room", 0xD863, [0], false);
            mapper.AssertAreEqual("event_flags.beat_agathas_room_trainer_0", 0xD864, [0], false);
            mapper.AssertAreEqual("event_flags.autowalked_into_agathas_room", 0xD864, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lances_room_trainer_0", 0xD865, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lance", 0xD865, [0], false);
            mapper.AssertAreEqual("event_flags.lances_room_lock_door", 0xD865, [0], false);
            mapper.AssertAreEqual("event_flags.beat_champion_rival", 0xD866, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_1_trainer_0", 0xD868, [0], false);
            mapper.AssertAreEqual("event_flags.beat_victory_road_1_trainer_1", 0xD868, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_1_boulder_on_switch", 0xD868, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_0", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_1", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_2", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_3", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_4", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_5", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_6", 0xD87C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rock_tunnel_2_trainer_7", 0xD87D, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam2_boulder1_down_hole", 0xD87E, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam2_boulder2_down_hole", 0xD87E, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam3_boulder1_down_hole", 0xD87F, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam3_boulder2_down_hole", 0xD87F, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam4_boulder1_down_hole", 0xD880, [0], false);
            mapper.AssertAreEqual("event_flags.seafoam4_boulder2_down_hole", 0xD880, [0], false);
            mapper.AssertAreEqual("event_flags.beat_articuno", 0xD881, [0], false);
            mapper.AssertAreEqual("battle.mode", 0xD056, [0], null);
            mapper.AssertAreEqual("battle.type", 0xD059, [0], "Normal");
            mapper.AssertAreEqual("battle.player.party_position", 0xCC2F, [0], 0);
            mapper.AssertAreEqual("battle.player.team_count", 0xD162, [1], 1);
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0xD008, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0xD013, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.dex_number", 0xD013, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0xD018, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0xD019, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0xD021, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.catch_rate", 0xD01A, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_condition", 0xD017, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0xD01B, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0xD02C, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0xD01C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0xD02D, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0xD01D, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0xD02E, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0xD01E, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0xD02F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0xD014, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0xD022, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0xD024, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0xD026, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0xD028, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special", 0xD02A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0xCD1A, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0xCD1B, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0xCD1C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special", 0xCD1D, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0xCD1E, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0xCD1F, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.confusion", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.toxic", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.leech_seed", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bide", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.thrash", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.multi_hit", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.flinch", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.charging", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.multi_turn", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.invulnerable", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bypass_accuracy", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.mist", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.focus_energy", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.substitute", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.recharge", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rage", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.lightscreen", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.reflect", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.transformed", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.multi_hit", 0xD069, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.confusion", 0xD063, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.toxic", 0xD06A, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.disable", 0xD06C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.move", 0xCFD1, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.effect", 0xCFD2, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.power", 0xCFD3, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.type", 0xCFD4, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.accuracy", 0xCFD5, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.last_move.pp_max", 0xCFD6, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.species", 0xD16A, [84], "Pikachu");
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0xD16A, [84], 25);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0xD2B4, [129, 129, 129, 80, 127, 129, 128, 139, 139, 80, 0], "BBB");
            mapper.AssertAreEqual("battle.player.team.0.level", 0xD18B, [20], 20);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0xD178, [0, 32, 111], 8303);
            mapper.AssertAreEqual("battle.player.team.0.type_1", 0xD16F, [23], "Electric");
            mapper.AssertAreEqual("battle.player.team.0.type_2", 0xD170, [23], "Electric");
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0xD176, [139, 78], 35662);
            mapper.AssertAreEqual("battle.player.team.0.catch_rate", 0xD171, [163], 163);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0xD16E, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0xD172, [84], "ThunderShock");
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0xD187, [23], 23);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0xD187, [23], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0xD173, [104], "Double Team");
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0xD188, [15], 15);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0xD188, [15], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0xD174, [21], "Slam");
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0xD189, [20], 20);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0xD189, [20], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0xD175, [98], "Quick Attack");
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0xD18A, [30], 30);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0xD18A, [30], 0);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0xD16B, [0, 48], 48);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0xD18C, [0, 51], 51);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0xD18E, [0, 34], 34);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0xD190, [0, 25], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0xD192, [0, 50], 50);
            mapper.AssertAreEqual("battle.player.team.0.stats.special", 0xD194, [0, 28], 28);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0xD185, [190], 11);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0xD185, [190], 14);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0xD186, [242], 15);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special", 0xD186, [242], 2);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0xD17B, [16, 75], 4171);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0xD17D, [13, 240], 3568);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0xD17F, [16, 182], 4278);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0xD181, [17, 131], 4483);
            mapper.AssertAreEqual("battle.player.team.0.evs.special", 0xD183, [10, 255], 2815);
            mapper.AssertAreEqual("battle.player.team.1.species", 0xD196, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0xD196, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0xD2BF, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.1.level", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0xD1A4, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.type_1", 0xD19B, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.1.type_2", 0xD19C, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0xD1A2, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.catch_rate", 0xD19D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0xD19A, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0xD19E, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0xD19F, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0xD1A0, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0xD1A1, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0xD197, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0xD1B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0xD1BA, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0xD1BC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0xD1BE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.special", 0xD1C0, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0xD1B1, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0xD1B1, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0xD1A7, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0xD1A9, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0xD1AB, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0xD1AD, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special", 0xD1AF, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.species", 0xD1C2, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0xD1C2, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0xD2CA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.2.level", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0xD1D0, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.type_1", 0xD1C7, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.2.type_2", 0xD1C8, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0xD1CE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.catch_rate", 0xD1C9, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0xD1C6, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0xD1CA, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0xD1CB, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0xD1CC, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0xD1CD, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0xD1C3, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0xD1E4, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0xD1E6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0xD1E8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0xD1EA, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.special", 0xD1EC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0xD1DD, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0xD1DD, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0xD1D3, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0xD1D5, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0xD1D7, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0xD1D9, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special", 0xD1DB, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.species", 0xD1EE, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0xD1EE, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0xD2D5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.3.level", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0xD1FC, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.type_1", 0xD1F3, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.3.type_2", 0xD1F4, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0xD1FA, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.catch_rate", 0xD1F5, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0xD1F2, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0xD1F6, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0xD20B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0xD20B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0xD1F7, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0xD20C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0xD1F8, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0xD20D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0xD1F9, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0xD20E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0xD1EF, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0xD210, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0xD212, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0xD214, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0xD216, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.special", 0xD218, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0xD209, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0xD209, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0xD20A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special", 0xD20A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0xD1FF, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0xD201, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0xD203, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0xD205, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special", 0xD207, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.species", 0xD21A, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0xD21A, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0xD2E0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.4.level", 0xD23B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0xD228, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.type_1", 0xD21F, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.4.type_2", 0xD220, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0xD226, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.catch_rate", 0xD221, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0xD21E, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0xD222, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0xD237, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0xD237, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0xD223, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0xD238, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0xD238, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0xD224, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0xD239, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0xD239, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0xD225, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0xD23A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0xD21B, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0xD23C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0xD23E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0xD240, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0xD242, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special", 0xD244, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0xD235, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0xD235, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0xD236, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special", 0xD236, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0xD22B, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0xD22D, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0xD22F, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0xD231, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special", 0xD233, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.species", 0xD246, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0xD246, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0xD2EB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.5.level", 0xD267, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0xD254, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.type_1", 0xD24B, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.5.type_2", 0xD24C, [0], "Normal");
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0xD252, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.catch_rate", 0xD24D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0xD24A, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0xD24E, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0xD263, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0xD263, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0xD24F, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0xD264, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0xD264, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0xD250, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0xD265, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0xD265, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0xD251, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0xD266, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0xD266, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0xD247, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0xD268, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0xD26A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0xD26C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0xD26E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special", 0xD270, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0xD261, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0xD261, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0xD262, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special", 0xD262, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0xD257, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0xD259, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0xD25B, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0xD25D, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special", 0xD25F, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0xD049, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.trainer", 0xD030, [0], null);
            mapper.AssertAreEqual("battle.opponent.id", 0xD05C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.gym_leader", 0xD05B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team_count", 0xD89B, [1], 1);
            mapper.AssertAreEqual("battle.opponent.party_position", 0xCFE7, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0xCFD7, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0xCFD7, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0xCFF2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0xCFE9, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0xCFEA, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0xCFE8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0xCFEC, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0xCFED, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0xCFEE, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0xCFEF, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0xCFE5, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0xCFF3, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0xCFF5, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0xCFF7, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0xCFF9, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special", 0xCFFB, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0xCD2E, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0xCD2F, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0xCD30, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special", 0xCD31, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0xCD32, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0xCD33, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0xCFF0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0xCFF0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0xCFF1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special", 0xCFF1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.hp", 0xD001, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.attack", 0xD002, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.defense", 0xD003, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.speed", 0xD004, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.special", 0xD005, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.exp", 0xD007, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bide", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.thrash", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.multi_hit", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.flinch", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.charging", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.multi_turn", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.invulnerable", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.confusion", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bypass_accuracy", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.mist", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.focus_energy", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.substitute", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.recharge", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rage", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.leech_seed", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.toxic", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.lightscreen", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.reflect", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.transformed", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.multi_hit", 0xD06E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.confusion", 0xD06F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.toxic", 0xD070, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.disable", 0xD071, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.move", 0xCFCB, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.effect", 0xCFCC, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.power", 0xCFCD, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.type", 0xCFCE, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.accuracy", 0xCFCF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.last_move.pp_max", 0xCFD0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0xD8A3, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0xD8A3, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0xD9ED, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0xD8C4, [19], 19);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0xD8B1, [0, 26, 203], 6859);
            mapper.AssertAreEqual("battle.opponent.team.0.type_1", 0xD8A8, [21], "Water");
            mapper.AssertAreEqual("battle.opponent.team.0.type_2", 0xD8A9, [21], "Water");
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xD8AF, [139, 78], 35662);
            mapper.AssertAreEqual("battle.opponent.team.0.catch_rate", 0xD8AA, [225], 225);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0xD8A7, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0xD8AB, [64], "Peck");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0xD8C0, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0xD8C0, [35], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0xD8AC, [39], "Tail Whip");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0xD8C1, [30], 30);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0xD8C1, [30], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0xD8AD, [48], "Supersonic");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0xD8C2, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0xD8C2, [20], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0xD8AE, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0xD8C3, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0xD8C3, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0xD8A4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0xD8C5, [0, 49], 49);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0xD8C7, [0, 33], 33);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0xD8C9, [0, 30], 30);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0xD8CB, [0, 31], 31);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special", 0xD8CD, [0, 27], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0xD8BE, [152], 9);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0xD8BE, [152], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0xD8BF, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special", 0xD8BF, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0xD8B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0xD8B6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0xD8B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0xD8BA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special", 0xD8BC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0xD8CF, [23], "Shellder");
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0xD8CF, [23], 90);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0xD9F8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0xD8F0, [16], 16);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0xD8DD, [0, 20, 0], 5120);
            mapper.AssertAreEqual("battle.opponent.team.1.type_1", 0xD8D4, [21], "Water");
            mapper.AssertAreEqual("battle.opponent.team.1.type_2", 0xD8D5, [21], "Water");
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xD8DB, [139, 78], 35662);
            mapper.AssertAreEqual("battle.opponent.team.1.catch_rate", 0xD8D6, [190], 190);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0xD8D3, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0xD8D7, [33], "Tackle");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0xD8EC, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0xD8EC, [35], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0xD8D8, [110], "Withdraw");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0xD8ED, [40], 40);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0xD8ED, [40], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0xD8D9, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0xD8DA, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0xD8EF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0xD8EF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0xD8D0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0xD8F1, [0, 38], 38);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0xD8F3, [0, 28], 28);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0xD8F5, [0, 39], 39);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0xD8F7, [0, 20], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special", 0xD8F9, [0, 21], 21);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0xD8EA, [152], 9);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0xD8EA, [152], 8);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0xD8EB, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special", 0xD8EB, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0xD8E0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0xD8E2, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0xD8E4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0xD8E6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special", 0xD8E8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0xD8FB, [55], "Koffing");
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0xD8FB, [55], 109);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0xDA03, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0xD91C, [14], 14);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0xD909, [0, 10, 184], 2744);
            mapper.AssertAreEqual("battle.opponent.team.2.type_1", 0xD900, [3], "Poison");
            mapper.AssertAreEqual("battle.opponent.team.2.type_2", 0xD901, [3], "Poison");
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xD907, [139, 78], 35662);
            mapper.AssertAreEqual("battle.opponent.team.2.catch_rate", 0xD902, [190], 190);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0xD8FF, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0xD903, [33], "Tackle");
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0xD918, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0xD918, [35], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0xD904, [123], "Smog");
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0xD919, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0xD919, [20], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0xD905, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0xD91A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0xD91A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0xD906, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0xD91B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0xD91B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0xD8FC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0xD91D, [0, 37], 37);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0xD91F, [0, 25], 25);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0xD921, [0, 33], 33);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0xD923, [0, 17], 17);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special", 0xD925, [0, 24], 24);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0xD916, [152], 9);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0xD916, [152], 8);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0xD917, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special", 0xD917, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0xD90C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0xD90E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0xD910, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0xD912, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special", 0xD914, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0xD927, [124], "Metapod");
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0xD927, [124], 11);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0xDA0E, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0xD948, [9], 9);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0xD935, [0, 2, 217], 729);
            mapper.AssertAreEqual("battle.opponent.team.3.type_1", 0xD92C, [7], "Bug");
            mapper.AssertAreEqual("battle.opponent.team.3.type_2", 0xD92D, [7], "Bug");
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xD933, [139, 78], 35662);
            mapper.AssertAreEqual("battle.opponent.team.3.catch_rate", 0xD92E, [120], 120);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0xD92B, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0xD92F, [106], "Harden");
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0xD944, [30], 30);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0xD944, [30], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0xD930, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0xD945, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0xD945, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0xD931, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0xD946, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0xD946, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0xD932, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0xD947, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0xD947, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0xD928, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0xD949, [0, 29], 29);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0xD94B, [0, 10], 10);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0xD94D, [0, 16], 16);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0xD94F, [0, 11], 11);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special", 0xD951, [0, 10], 10);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0xD942, [152], 9);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0xD942, [152], 8);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0xD943, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special", 0xD943, [136], 8);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0xD938, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0xD93A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0xD93C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0xD93E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special", 0xD940, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0xD953, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0xD953, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0xDA19, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0xD974, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0xD961, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.type_1", 0xD958, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.team.4.type_2", 0xD959, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xD95F, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.catch_rate", 0xD95A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0xD957, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0xD95B, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0xD970, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0xD970, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0xD95C, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0xD971, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0xD971, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0xD95D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0xD972, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0xD972, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0xD95E, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0xD973, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0xD973, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0xD954, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0xD975, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0xD977, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0xD979, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0xD97B, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special", 0xD97D, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0xD96E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0xD96E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0xD96F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special", 0xD96F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0xD964, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0xD966, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0xD968, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0xD96A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special", 0xD96C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0xD97F, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0xD97F, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0xDA24, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0xD9A0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0xD98D, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.type_1", 0xD984, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.team.5.type_2", 0xD985, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xD98B, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.catch_rate", 0xD986, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0xD983, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0xD987, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0xD99C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0xD99C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0xD988, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0xD99D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0xD99D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0xD989, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0xD99E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0xD99E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0xD98A, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0xD99F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0xD99F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0xD980, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0xD9A1, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0xD9A3, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0xD9A5, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0xD9A7, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special", 0xD9A9, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0xD99A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0xD99A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0xD99B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special", 0xD99B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0xD990, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0xD992, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0xD994, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0xD996, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special", 0xD998, [0, 0], 0);
            mapper.AssertAreEqual("battle.other.battle_start", 0xCCF5, [0], 0);
            mapper.AssertAreEqual("battle.other.battle_result", 0xCCF6, [0], 0);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0xCF0B, [0], 0);
            mapper.AssertAreEqual("battle.other.low_health_alarm", 0xCCF6, [0], "Enabled");
            mapper.AssertAreEqual("battle.other.animation_turn", 0xFFF3, [0], "Player");
            mapper.AssertAreEqual("battle.other.attack_damage", 0xD0D7, [0], 0);
            mapper.AssertAreEqual("pokemart.item_count", 0xCF7B, [0], 0);
            mapper.AssertAreEqual("pokemart.items.0", 0xCF7B, [0], null);
            mapper.AssertAreEqual("pokemart.items.1", 0xCF7C, [0], null);
            mapper.AssertAreEqual("pokemart.items.2", 0xCF7D, [0], null);
            mapper.AssertAreEqual("pokemart.items.3", 0xCF7E, [0], null);
            mapper.AssertAreEqual("pokemart.items.4", 0xCF7F, [0], null);
            mapper.AssertAreEqual("pokemart.items.5", 0xCF80, [0], null);
            mapper.AssertAreEqual("pokemart.items.6", 0xCF81, [0], null);
            mapper.AssertAreEqual("pokemart.items.7", 0xCF82, [0], null);
            mapper.AssertAreEqual("pokemart.items.8", 0xCF83, [0], null);
            mapper.AssertAreEqual("pokemart.items.9", 0xCF84, [0], null);
            mapper.AssertAreEqual("pokemart.items.10", 0xCF85, [0], null);
            mapper.AssertAreEqual("rival.name", 0xD349, [128, 128, 128, 128, 128, 128, 128, 80], "AAAAAAA");
            mapper.AssertAreEqual("rival.team", 0xD714, [2], "Flareon");
            mapper.AssertAreEqual("audio.current_sound", 0xC001, [192], 192);
            mapper.AssertAreEqual("audio.new_sound_id", 0xC0EE, [0], 0);
            mapper.AssertAreEqual("audio.audio_bank", 0xC0EF, [2], 2);
            mapper.AssertAreEqual("audio.overworld_track_current_map", 0xD35A, [192], "Gym");
            mapper.AssertAreEqual("audio.audio_bank_current_map", 0xD35B, [2], 2);
            mapper.AssertAreEqual("audio.channels.0", 0xC026, [192], 192);
            mapper.AssertAreEqual("audio.channels.1", 0xC027, [192], 192);
            mapper.AssertAreEqual("audio.channels.2", 0xC028, [192], 192);
            mapper.AssertAreEqual("audio.channels.3", 0xC029, [0], 0);
            mapper.AssertAreEqual("audio.channels.4", 0xC02A, [0], 0);
            mapper.AssertAreEqual("audio.channels.5", 0xC02B, [0], 0);
            mapper.AssertAreEqual("audio.channels.6", 0xC02C, [0], 0);
            mapper.AssertAreEqual("audio.channels.7", 0xC02D, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.0", 0xC0DE, [181], 181);
            mapper.AssertAreEqual("audio.volume_channels.1", 0xC0DF, [199], 199);
            mapper.AssertAreEqual("audio.volume_channels.2", 0xC0E0, [32], 32);
            mapper.AssertAreEqual("audio.volume_channels.3", 0xC0E1, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.4", 0xC0E2, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.5", 0xC0E3, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.6", 0xC0E4, [0], 0);
            mapper.AssertAreEqual("audio.volume_channels.7", 0xC0E5, [0], 0);
            mapper.AssertAreEqual("audio.tempo.music", 0xC0E8, [0, 138], 138);
            mapper.AssertAreEqual("audio.tempo.sfx", 0xC0EA, [1, 0], 256);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box_count", 0xDA7F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.species", 0xDA95, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.dex_number", 0xDA95, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.nickname", 0xDE05, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.level", 0xDA98, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.exp", 0xDAA3, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.type_1", 0xDA9A, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.type_2", 0xDA9B, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ot_id", 0xDAA1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.status_condition", 0xDA99, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.stats.hp", 0xDA96, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.0.move", 0xDA97, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.0.pp", 0xDAAC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.0.pp_up", 0xDAAC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.1.move", 0xDA98, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.1.pp", 0xDAAD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.1.pp_up", 0xDAAD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.2.move", 0xDA99, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.2.pp", 0xDAAE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.2.pp_up", 0xDAAE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.3.move", 0xDA9A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.3.pp", 0xDAAF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.moves.3.pp_up", 0xDAAF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.attack", 0xDAB0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.defense", 0xDAB0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.speed", 0xDAB1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.ivs.special", 0xDAB1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.hp", 0xDAA6, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.attack", 0xDAA8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.defense", 0xDAAA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.speed", 0xDAAC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.0.evs.special", 0xDAAE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.species", 0xDAB6, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.dex_number", 0xDAB6, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.nickname", 0xDE10, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.level", 0xDAB9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.exp", 0xDAC4, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.type_1", 0xDABB, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.type_2", 0xDABC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ot_id", 0xDAC2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.status_condition", 0xDABA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.stats.hp", 0xDAB7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.0.move", 0xDAB8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.0.pp", 0xDACD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.0.pp_up", 0xDACD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.1.move", 0xDAB9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.1.pp", 0xDACE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.1.pp_up", 0xDACE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.2.move", 0xDABA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.2.pp", 0xDACF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.2.pp_up", 0xDACF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.3.move", 0xDABB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.3.pp", 0xDAD0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.moves.3.pp_up", 0xDAD0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.attack", 0xDAD1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.defense", 0xDAD1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.speed", 0xDAD2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.ivs.special", 0xDAD2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.hp", 0xDAC7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.attack", 0xDAC9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.defense", 0xDACB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.speed", 0xDACD, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.1.evs.special", 0xDACF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.species", 0xDAD7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.dex_number", 0xDAD7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.nickname", 0xDE1B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.level", 0xDADA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.exp", 0xDAE5, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.type_1", 0xDADC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.type_2", 0xDADD, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ot_id", 0xDAE3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.status_condition", 0xDADB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.stats.hp", 0xDAD8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.0.move", 0xDAD9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.0.pp", 0xDAEE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.0.pp_up", 0xDAEE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.1.move", 0xDADA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.1.pp", 0xDAEF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.1.pp_up", 0xDAEF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.2.move", 0xDADB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.2.pp", 0xDAF0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.2.pp_up", 0xDAF0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.3.move", 0xDADC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.3.pp", 0xDAF1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.moves.3.pp_up", 0xDAF1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.attack", 0xDAF2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.defense", 0xDAF2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.speed", 0xDAF3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.ivs.special", 0xDAF3, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.hp", 0xDAE8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.attack", 0xDAEA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.defense", 0xDAEC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.speed", 0xDAEE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.2.evs.special", 0xDAF0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.species", 0xDAF8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.dex_number", 0xDAF8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.nickname", 0xDE26, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.level", 0xDAFB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.exp", 0xDB06, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.type_1", 0xDAFD, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.type_2", 0xDAFE, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ot_id", 0xDB04, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.status_condition", 0xDAFC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.stats.hp", 0xDAF9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.0.move", 0xDAFA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.0.pp", 0xDB0F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.0.pp_up", 0xDB0F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.1.move", 0xDAFB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.1.pp", 0xDB10, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.1.pp_up", 0xDB10, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.2.move", 0xDAFC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.2.pp", 0xDB11, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.2.pp_up", 0xDB11, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.3.move", 0xDAFD, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.3.pp", 0xDB12, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.moves.3.pp_up", 0xDB12, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.attack", 0xDB13, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.defense", 0xDB13, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.speed", 0xDB14, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.ivs.special", 0xDB14, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.hp", 0xDB09, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.attack", 0xDB0B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.defense", 0xDB0D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.speed", 0xDB0F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.3.evs.special", 0xDB11, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.species", 0xDB19, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.dex_number", 0xDB19, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.nickname", 0xDE31, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.level", 0xDB1C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.exp", 0xDB27, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.type_1", 0xDB1E, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.type_2", 0xDB1F, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ot_id", 0xDB25, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.status_condition", 0xDB1D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.stats.hp", 0xDB1A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.0.move", 0xDB1B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.0.pp", 0xDB30, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.0.pp_up", 0xDB30, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.1.move", 0xDB1C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.1.pp", 0xDB31, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.1.pp_up", 0xDB31, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.2.move", 0xDB1D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.2.pp", 0xDB32, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.2.pp_up", 0xDB32, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.3.move", 0xDB1E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.3.pp", 0xDB33, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.moves.3.pp_up", 0xDB33, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.attack", 0xDB34, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.defense", 0xDB34, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.speed", 0xDB35, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.ivs.special", 0xDB35, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.hp", 0xDB2A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.attack", 0xDB2C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.defense", 0xDB2E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.speed", 0xDB30, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.4.evs.special", 0xDB32, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.species", 0xDB3A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.dex_number", 0xDB3A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.nickname", 0xDE3C, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.level", 0xDB3D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.exp", 0xDB48, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.type_1", 0xDB3F, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.type_2", 0xDB40, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ot_id", 0xDB46, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.status_condition", 0xDB3E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.stats.hp", 0xDB3B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.0.move", 0xDB3C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.0.pp", 0xDB51, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.0.pp_up", 0xDB51, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.1.move", 0xDB3D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.1.pp", 0xDB52, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.1.pp_up", 0xDB52, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.2.move", 0xDB3E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.2.pp", 0xDB53, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.2.pp_up", 0xDB53, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.3.move", 0xDB3F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.3.pp", 0xDB54, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.moves.3.pp_up", 0xDB54, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.attack", 0xDB55, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.defense", 0xDB55, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.speed", 0xDB56, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.ivs.special", 0xDB56, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.hp", 0xDB4B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.attack", 0xDB4D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.defense", 0xDB4F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.speed", 0xDB51, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.5.evs.special", 0xDB53, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.species", 0xDB5B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.dex_number", 0xDB5B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.nickname", 0xDE47, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.level", 0xDB5E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.exp", 0xDB69, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.type_1", 0xDB60, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.type_2", 0xDB61, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ot_id", 0xDB67, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.status_condition", 0xDB5F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.stats.hp", 0xDB5C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.0.move", 0xDB5D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.0.pp", 0xDB72, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.0.pp_up", 0xDB72, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.1.move", 0xDB5E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.1.pp", 0xDB73, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.1.pp_up", 0xDB73, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.2.move", 0xDB5F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.2.pp", 0xDB74, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.2.pp_up", 0xDB74, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.3.move", 0xDB60, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.3.pp", 0xDB75, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.moves.3.pp_up", 0xDB75, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.attack", 0xDB76, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.defense", 0xDB76, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.speed", 0xDB77, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.ivs.special", 0xDB77, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.hp", 0xDB6C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.attack", 0xDB6E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.defense", 0xDB70, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.speed", 0xDB72, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.6.evs.special", 0xDB74, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.species", 0xDB7C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.dex_number", 0xDB7C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.nickname", 0xDE52, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.level", 0xDB7F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.exp", 0xDB8A, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.type_1", 0xDB81, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.type_2", 0xDB82, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ot_id", 0xDB88, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.status_condition", 0xDB80, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.stats.hp", 0xDB7D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.0.move", 0xDB7E, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.0.pp", 0xDB93, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.0.pp_up", 0xDB93, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.1.move", 0xDB7F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.1.pp", 0xDB94, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.1.pp_up", 0xDB94, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.2.move", 0xDB80, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.2.pp", 0xDB95, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.2.pp_up", 0xDB95, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.3.move", 0xDB81, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.3.pp", 0xDB96, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.moves.3.pp_up", 0xDB96, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.attack", 0xDB97, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.defense", 0xDB97, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.speed", 0xDB98, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.ivs.special", 0xDB98, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.hp", 0xDB8D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.attack", 0xDB8F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.defense", 0xDB91, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.speed", 0xDB93, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.7.evs.special", 0xDB95, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.species", 0xDB9D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.dex_number", 0xDB9D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.nickname", 0xDE5D, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.level", 0xDBA0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.exp", 0xDBAB, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.type_1", 0xDBA2, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.type_2", 0xDBA3, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ot_id", 0xDBA9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.status_condition", 0xDBA1, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.stats.hp", 0xDB9E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.0.move", 0xDB9F, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.0.pp", 0xDBB4, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.0.pp_up", 0xDBB4, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.1.move", 0xDBA0, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.1.pp", 0xDBB5, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.1.pp_up", 0xDBB5, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.2.move", 0xDBA1, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.2.pp", 0xDBB6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.2.pp_up", 0xDBB6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.3.move", 0xDBA2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.3.pp", 0xDBB7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.moves.3.pp_up", 0xDBB7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.attack", 0xDBB8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.defense", 0xDBB8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.speed", 0xDBB9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.ivs.special", 0xDBB9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.hp", 0xDBAE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.attack", 0xDBB0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.defense", 0xDBB2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.speed", 0xDBB4, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.8.evs.special", 0xDBB6, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.species", 0xDBBE, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.dex_number", 0xDBBE, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.nickname", 0xDE68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.level", 0xDBC1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.exp", 0xDBCC, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.type_1", 0xDBC3, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.type_2", 0xDBC4, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ot_id", 0xDBCA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.status_condition", 0xDBC2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.stats.hp", 0xDBBF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.0.move", 0xDBC0, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.0.pp", 0xDBD5, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.0.pp_up", 0xDBD5, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.1.move", 0xDBC1, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.1.pp", 0xDBD6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.1.pp_up", 0xDBD6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.2.move", 0xDBC2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.2.pp", 0xDBD7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.2.pp_up", 0xDBD7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.3.move", 0xDBC3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.3.pp", 0xDBD8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.moves.3.pp_up", 0xDBD8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.attack", 0xDBD9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.defense", 0xDBD9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.speed", 0xDBDA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.ivs.special", 0xDBDA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.hp", 0xDBCF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.attack", 0xDBD1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.defense", 0xDBD3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.speed", 0xDBD5, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.9.evs.special", 0xDBD7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.species", 0xDBDF, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.dex_number", 0xDBDF, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.nickname", 0xDE73, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.level", 0xDBE2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.exp", 0xDBED, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.type_1", 0xDBE4, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.type_2", 0xDBE5, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ot_id", 0xDBEB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.status_condition", 0xDBE3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.stats.hp", 0xDBE0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.0.move", 0xDBE1, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.0.pp", 0xDBF6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.0.pp_up", 0xDBF6, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.1.move", 0xDBE2, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.1.pp", 0xDBF7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.1.pp_up", 0xDBF7, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.2.move", 0xDBE3, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.2.pp", 0xDBF8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.2.pp_up", 0xDBF8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.3.move", 0xDBE4, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.3.pp", 0xDBF9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.moves.3.pp_up", 0xDBF9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.attack", 0xDBFA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.defense", 0xDBFA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.speed", 0xDBFB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.ivs.special", 0xDBFB, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.hp", 0xDBF0, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.attack", 0xDBF2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.defense", 0xDBF4, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.speed", 0xDBF6, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.10.evs.special", 0xDBF8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.species", 0xDC00, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.dex_number", 0xDC00, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.nickname", 0xDE7E, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.level", 0xDC03, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.exp", 0xDC0E, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.type_1", 0xDC05, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.type_2", 0xDC06, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ot_id", 0xDC0C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.status_condition", 0xDC04, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.stats.hp", 0xDC01, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.0.move", 0xDC02, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.0.pp", 0xDC17, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.0.pp_up", 0xDC17, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.1.move", 0xDC03, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.1.pp", 0xDC18, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.1.pp_up", 0xDC18, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.2.move", 0xDC04, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.2.pp", 0xDC19, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.2.pp_up", 0xDC19, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.3.move", 0xDC05, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.3.pp", 0xDC1A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.moves.3.pp_up", 0xDC1A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.attack", 0xDC1B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.defense", 0xDC1B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.speed", 0xDC1C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.ivs.special", 0xDC1C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.hp", 0xDC11, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.attack", 0xDC13, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.defense", 0xDC15, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.speed", 0xDC17, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.11.evs.special", 0xDC19, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.species", 0xDC21, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.dex_number", 0xDC21, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.nickname", 0xDE89, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.level", 0xDC24, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.exp", 0xDC2F, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.type_1", 0xDC26, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.type_2", 0xDC27, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ot_id", 0xDC2D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.status_condition", 0xDC25, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.stats.hp", 0xDC22, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.0.move", 0xDC23, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.0.pp", 0xDC38, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.0.pp_up", 0xDC38, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.1.move", 0xDC24, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.1.pp", 0xDC39, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.1.pp_up", 0xDC39, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.2.move", 0xDC25, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.2.pp", 0xDC3A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.2.pp_up", 0xDC3A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.3.move", 0xDC26, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.3.pp", 0xDC3B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.moves.3.pp_up", 0xDC3B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.attack", 0xDC3C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.defense", 0xDC3C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.speed", 0xDC3D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.ivs.special", 0xDC3D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.hp", 0xDC32, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.attack", 0xDC34, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.defense", 0xDC36, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.speed", 0xDC38, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.12.evs.special", 0xDC3A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.species", 0xDC42, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.dex_number", 0xDC42, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.nickname", 0xDE94, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.level", 0xDC45, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.exp", 0xDC50, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.type_1", 0xDC47, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.type_2", 0xDC48, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ot_id", 0xDC4E, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.status_condition", 0xDC46, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.stats.hp", 0xDC43, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.0.move", 0xDC44, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.0.pp", 0xDC59, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.0.pp_up", 0xDC59, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.1.move", 0xDC45, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.1.pp", 0xDC5A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.1.pp_up", 0xDC5A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.2.move", 0xDC46, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.2.pp", 0xDC5B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.2.pp_up", 0xDC5B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.3.move", 0xDC47, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.3.pp", 0xDC5C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.moves.3.pp_up", 0xDC5C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.attack", 0xDC5D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.defense", 0xDC5D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.speed", 0xDC5E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.ivs.special", 0xDC5E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.hp", 0xDC53, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.attack", 0xDC55, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.defense", 0xDC57, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.speed", 0xDC59, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.13.evs.special", 0xDC5B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.species", 0xDC63, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.dex_number", 0xDC63, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.nickname", 0xDE9F, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.level", 0xDC66, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.exp", 0xDC71, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.type_1", 0xDC68, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.type_2", 0xDC69, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ot_id", 0xDC6F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.status_condition", 0xDC67, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.stats.hp", 0xDC64, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.0.move", 0xDC65, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.0.pp", 0xDC7A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.0.pp_up", 0xDC7A, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.1.move", 0xDC66, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.1.pp", 0xDC7B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.1.pp_up", 0xDC7B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.2.move", 0xDC67, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.2.pp", 0xDC7C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.2.pp_up", 0xDC7C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.3.move", 0xDC68, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.3.pp", 0xDC7D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.moves.3.pp_up", 0xDC7D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.attack", 0xDC7E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.defense", 0xDC7E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.speed", 0xDC7F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.ivs.special", 0xDC7F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.hp", 0xDC74, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.attack", 0xDC76, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.defense", 0xDC78, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.speed", 0xDC7A, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.14.evs.special", 0xDC7C, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.species", 0xDC84, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.dex_number", 0xDC84, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.nickname", 0xDEAA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.level", 0xDC87, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.exp", 0xDC92, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.type_1", 0xDC89, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.type_2", 0xDC8A, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ot_id", 0xDC90, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.status_condition", 0xDC88, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.stats.hp", 0xDC85, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.0.move", 0xDC86, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.0.pp", 0xDC9B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.0.pp_up", 0xDC9B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.1.move", 0xDC87, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.1.pp", 0xDC9C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.1.pp_up", 0xDC9C, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.2.move", 0xDC88, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.2.pp", 0xDC9D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.2.pp_up", 0xDC9D, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.3.move", 0xDC89, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.3.pp", 0xDC9E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.moves.3.pp_up", 0xDC9E, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.attack", 0xDC9F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.defense", 0xDC9F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.speed", 0xDCA0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.ivs.special", 0xDCA0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.hp", 0xDC95, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.attack", 0xDC97, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.defense", 0xDC99, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.speed", 0xDC9B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.15.evs.special", 0xDC9D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.species", 0xDCA5, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.dex_number", 0xDCA5, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.nickname", 0xDEB5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.level", 0xDCA8, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.exp", 0xDCB3, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.type_1", 0xDCAA, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.type_2", 0xDCAB, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ot_id", 0xDCB1, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.status_condition", 0xDCA9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.stats.hp", 0xDCA6, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.0.move", 0xDCA7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.0.pp", 0xDCBC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.0.pp_up", 0xDCBC, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.1.move", 0xDCA8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.1.pp", 0xDCBD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.1.pp_up", 0xDCBD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.2.move", 0xDCA9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.2.pp", 0xDCBE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.2.pp_up", 0xDCBE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.3.move", 0xDCAA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.3.pp", 0xDCBF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.moves.3.pp_up", 0xDCBF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.attack", 0xDCC0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.defense", 0xDCC0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.speed", 0xDCC1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.ivs.special", 0xDCC1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.hp", 0xDCB6, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.attack", 0xDCB8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.defense", 0xDCBA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.speed", 0xDCBC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.16.evs.special", 0xDCBE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.species", 0xDCC6, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.dex_number", 0xDCC6, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.nickname", 0xDEC0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.level", 0xDCC9, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.exp", 0xDCD4, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.type_1", 0xDCCB, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.type_2", 0xDCCC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ot_id", 0xDCD2, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.status_condition", 0xDCCA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.stats.hp", 0xDCC7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.0.move", 0xDCC8, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.0.pp", 0xDCDD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.0.pp_up", 0xDCDD, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.1.move", 0xDCC9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.1.pp", 0xDCDE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.1.pp_up", 0xDCDE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.2.move", 0xDCCA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.2.pp", 0xDCDF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.2.pp_up", 0xDCDF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.3.move", 0xDCCB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.3.pp", 0xDCE0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.moves.3.pp_up", 0xDCE0, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.attack", 0xDCE1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.defense", 0xDCE1, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.speed", 0xDCE2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.ivs.special", 0xDCE2, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.hp", 0xDCD7, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.attack", 0xDCD9, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.defense", 0xDCDB, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.speed", 0xDCDD, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.17.evs.special", 0xDCDF, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.species", 0xDCE7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.dex_number", 0xDCE7, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.nickname", 0xDECB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.level", 0xDCEA, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.exp", 0xDCF5, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.type_1", 0xDCEC, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.type_2", 0xDCED, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ot_id", 0xDCF3, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.status_condition", 0xDCEB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.stats.hp", 0xDCE8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.0.move", 0xDCE9, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.0.pp", 0xDCFE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.0.pp_up", 0xDCFE, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.1.move", 0xDCEA, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.1.pp", 0xDCFF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.1.pp_up", 0xDCFF, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.2.move", 0xDCEB, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.2.pp", 0xDD00, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.2.pp_up", 0xDD00, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.3.move", 0xDCEC, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.3.pp", 0xDD01, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.moves.3.pp_up", 0xDD01, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.attack", 0xDD02, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.defense", 0xDD02, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.speed", 0xDD03, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.ivs.special", 0xDD03, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.hp", 0xDCF8, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.attack", 0xDCFA, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.defense", 0xDCFC, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.speed", 0xDCFE, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.18.evs.special", 0xDD00, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.species", 0xDD08, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.dex_number", 0xDD08, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.nickname", 0xDED6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.level", 0xDD0B, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.exp", 0xDD16, [0, 0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.type_1", 0xDD0D, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.type_2", 0xDD0E, [0], "Normal");
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ot_id", 0xDD14, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.status_condition", 0xDD0C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.stats.hp", 0xDD09, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.0.move", 0xDD0A, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.0.pp", 0xDD1F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.0.pp_up", 0xDD1F, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.1.move", 0xDD0B, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.1.pp", 0xDD20, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.1.pp_up", 0xDD20, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.2.move", 0xDD0C, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.2.pp", 0xDD21, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.2.pp_up", 0xDD21, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.3.move", 0xDD0D, [0], null);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.3.pp", 0xDD22, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.moves.3.pp_up", 0xDD22, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.attack", 0xDD23, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.defense", 0xDD23, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.speed", 0xDD24, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.ivs.special", 0xDD24, [0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.hp", 0xDD19, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.attack", 0xDD1B, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.defense", 0xDD1D, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.speed", 0xDD1F, [0, 0], 0);
            mapper.AssertAreEqual("pc.pokemon_storage.current_box.19.evs.special", 0xDD21, [0, 0], 0);
            mapper.AssertAreEqual("pc.item_storage.item_count", 0xD539, [1], 1);
            mapper.AssertAreEqual("pc.item_storage.items.0.item", 0xD53A, [20], "POTION");
            mapper.AssertAreEqual("pc.item_storage.items.0.quantity", 0xD53B, [1], 1);
            mapper.AssertAreEqual("pc.item_storage.items.1.item", 0xD53C, [255], null);
            mapper.AssertAreEqual("pc.item_storage.items.1.quantity", 0xD53D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.2.item", 0xD53E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.2.quantity", 0xD53F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.3.item", 0xD540, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.3.quantity", 0xD541, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.4.item", 0xD542, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.4.quantity", 0xD543, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.5.item", 0xD544, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.5.quantity", 0xD545, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.6.item", 0xD546, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.6.quantity", 0xD547, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.7.item", 0xD548, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.7.quantity", 0xD549, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.8.item", 0xD54A, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.8.quantity", 0xD54B, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.9.item", 0xD54C, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.9.quantity", 0xD54D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.10.item", 0xD54E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.10.quantity", 0xD54F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.11.item", 0xD550, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.11.quantity", 0xD551, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.12.item", 0xD552, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.12.quantity", 0xD553, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.13.item", 0xD554, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.13.quantity", 0xD555, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.14.item", 0xD556, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.14.quantity", 0xD557, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.15.item", 0xD558, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.15.quantity", 0xD559, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.16.item", 0xD55A, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.16.quantity", 0xD55B, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.17.item", 0xD55C, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.17.quantity", 0xD55D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.18.item", 0xD55E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.18.quantity", 0xD55F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.19.item", 0xD560, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.19.quantity", 0xD561, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.20.item", 0xD562, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.20.quantity", 0xD563, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.21.item", 0xD564, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.21.quantity", 0xD565, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.22.item", 0xD566, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.22.quantity", 0xD567, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.23.item", 0xD568, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.23.quantity", 0xD569, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.24.item", 0xD56A, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.24.quantity", 0xD56B, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.25.item", 0xD56C, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.25.quantity", 0xD56D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.26.item", 0xD56E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.26.quantity", 0xD56F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.27.item", 0xD570, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.27.quantity", 0xD571, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.28.item", 0xD572, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.28.quantity", 0xD573, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.29.item", 0xD574, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.29.quantity", 0xD575, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.30.item", 0xD576, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.30.quantity", 0xD577, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.31.item", 0xD578, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.31.quantity", 0xD579, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.32.item", 0xD57A, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.32.quantity", 0xD57B, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.33.item", 0xD57C, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.33.quantity", 0xD57D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.34.item", 0xD57E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.34.quantity", 0xD57F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.35.item", 0xD580, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.35.quantity", 0xD581, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.36.item", 0xD582, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.36.quantity", 0xD583, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.37.item", 0xD584, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.37.quantity", 0xD585, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.38.item", 0xD586, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.38.quantity", 0xD587, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.39.item", 0xD588, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.39.quantity", 0xD589, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.40.item", 0xD58A, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.40.quantity", 0xD58B, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.41.item", 0xD58C, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.41.quantity", 0xD58D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.42.item", 0xD58E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.42.quantity", 0xD58F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.43.item", 0xD590, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.43.quantity", 0xD591, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.44.item", 0xD592, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.44.quantity", 0xD593, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.45.item", 0xD594, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.45.quantity", 0xD595, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.46.item", 0xD596, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.46.quantity", 0xD597, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.47.item", 0xD598, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.47.quantity", 0xD599, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.48.item", 0xD59A, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.48.quantity", 0xD59B, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.49.item", 0xD59C, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.49.quantity", 0xD59D, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.50.item", 0xD59E, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.50.quantity", 0xD59F, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.51.item", 0xD5A0, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.51.quantity", 0xD5A1, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.52.item", 0xD5A2, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.52.quantity", 0xD5A3, [0], 0);
            mapper.AssertAreEqual("pc.item_storage.items.53.item", 0xD5A4, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.53.quantity", 0xD5A5, [111], 111);
            mapper.AssertAreEqual("pc.item_storage.items.54.item", 0xD5A6, [1], "MASTER BALL");
            mapper.AssertAreEqual("pc.item_storage.items.54.quantity", 0xD5A7, [252], 252);
            mapper.AssertAreEqual("pc.item_storage.items.55.item", 0xD5A8, [2], "ULTRA BALL");
            mapper.AssertAreEqual("pc.item_storage.items.55.quantity", 0xD5A9, [24], 24);
            mapper.AssertAreEqual("pc.item_storage.items.56.item", 0xD5AA, [218], "TM18: Counter");
            mapper.AssertAreEqual("pc.item_storage.items.56.quantity", 0xD5AB, [1], 1);
            mapper.AssertAreEqual("pc.item_storage.items.57.item", 0xD5AC, [0], null);
            mapper.AssertAreEqual("pc.item_storage.items.57.quantity", 0xD5AD, [22], 22);
            mapper.AssertAreEqual("screen.text.prompt", 0xC4F2, [15], "");
            mapper.AssertAreEqual("screen.menu.current_item", 0xCC26, [0], 0);
            mapper.AssertAreEqual("screen.column_1.tiles.0", 0x9C0C, [15], 15);
            mapper.AssertAreEqual("screen.column_1.tiles.1", 0x9C2C, [15], 15);
            mapper.AssertAreEqual("screen.column_1.tiles.2", 0x9C4C, [15], 15);
            mapper.AssertAreEqual("screen.column_1.tiles.3", 0x9C6C, [15], 15);
            mapper.AssertAreEqual("screen.column_1.tiles.4", 0x9C8C, [5], 5);
            mapper.AssertAreEqual("screen.column_1.tiles.5", 0x9CAC, [16], 16);
            mapper.AssertAreEqual("screen.column_1.tiles.6", 0x9CCC, [9], 9);
            mapper.AssertAreEqual("options.text_speed", 0xD354, [3], "Mid");
            mapper.AssertAreEqual("options.sound_1", 0xD354, [3], false);
            mapper.AssertAreEqual("options.sound_2", 0xD354, [3], false);
            mapper.AssertAreEqual("options.battle_style", 0xD354, [3], false);
            mapper.AssertAreEqual("options.battle_animations", 0xD354, [3], false);
            mapper.AssertAreEqual("game_time.hours", 0xDA3F, [0, 1], 1);
            mapper.AssertAreEqual("game_time.minutes", 0xDA41, [0, 24], 24);
            mapper.AssertAreEqual("game_time.seconds", 0xDA43, [8], 8);
            mapper.AssertAreEqual("game_time.frames", 0xDA44, [23], 23);
            mapper.AssertAreEqual("input.a", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.b", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.select", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.start", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.right", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.left", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.up", 0xFFB1, [0], false);
            mapper.AssertAreEqual("input.down", 0xFFB1, [0], false);
            mapper.AssertAreEqual("meta.generation", "1");
            mapper.AssertAreEqual("meta.game_name", "Yellow");
            mapper.AssertAreEqual("meta.game_type", "Third Version");
            mapper.AssertAreEqual("meta.state", "Overworld");
        }

    }
}
