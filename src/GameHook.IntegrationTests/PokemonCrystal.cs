using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonCrystal : BaseTest
    {
        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBC_PokemonCrystal(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0xD47D, [128, 139, 139, 128, 141, 80, 80, 80, 80, 80, 80], "ALLAN");
            mapper.AssertAreEqual("player.gender", 0xD472, [0], "Male");
            mapper.AssertAreEqual("player.player_id", 0xD47B, [39, 94], 10078);
            mapper.AssertAreEqual("player.hall_of_fame_count", 0xD95E, [0], 0);
            mapper.AssertAreEqual("player.team_count", 0xDCD7, [1], 1);
            mapper.AssertAreEqual("player.party_position", 0);
            //mapper.AssertAreEqual("player.active_pokemon.species", 0xC62C, [158], "Totodile");
            //mapper.AssertAreEqual("player.active_pokemon.dex_number", 0xC62C, [158], 158);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0xDE41, [141, 136, 130, 138, 80, 80, 80, 80, 80, 80, 80], "NICK");
            mapper.AssertAreEqual("player.active_pokemon.level", 0xC639, [5], 5);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0xDCE7, [0, 0, 135], 135);
            mapper.AssertAreEqual("player.active_pokemon.type_1", 0xC64A, [21], "Water");
            mapper.AssertAreEqual("player.active_pokemon.type_2", 0xC64B, [21], "Water");
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0xDCE5, [39, 94], 10078);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0xDCFF, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0xC62E, [10], "Scratch");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0xC634, [34], 34);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0xC634, [34], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0xC62F, [43], "Leer");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0xC635, [30], 30);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0xC635, [30], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0xC630, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0xC636, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0xC636, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0xC631, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0xC637, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0xC637, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0xC63C, [0, 19], 19);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0xC63E, [0, 21], 21);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0xC640, [0, 12], 12);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0xC642, [0, 12], 12);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0xC644, [0, 10], 10);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_attack", 0xC646, [0, 10], 10);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_defense", 0xC648, [0, 10], 10);
            mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 15);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0xDCF4, [187], 11);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0xDCF4, [187], 11);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0xDCF5, [155], 9);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special", 0xDCF5, [155], 11);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0xDCEA, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0xDCEC, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0xDCEE, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0xDCF0, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.special", 0xDCF2, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0xC6CC, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0xC6CD, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0xC6CE, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_attack", 0xC6CF, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_defense", 0xC6D0, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0xC6D1, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0xC6D2, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.confused", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.toxic", 0xC66C, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.leech_seed", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.curse", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.in_love", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.nightmare", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.protect", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.identified", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.perish", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.endure", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.rollout", 0xC668, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.curled", 0xC669, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bide", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.rampage", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.in_loop", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.flinched", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.charged", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.underground", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.flying", 0xC66A, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bypass_accuracy", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.mist", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.focus_energy", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.substitute", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.recharge", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.rage", 0xC66B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.transformed", 0xC66C, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.encored", 0xC66C, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.lock_on", 0xC66C, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.destiny_bond", 0xC66C, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.cant_run", 0xC66C, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.counters.rollout", 0xC672, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.confuse", 0xC673, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.toxic", 0xC674, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.disable", 0xC675, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.encore", 0xC676, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.perish", 0xC677, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.fury_cutter", 0xC678, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.protect", 0xC679, [0], 0);
            mapper.AssertAreEqual("player.team.0.species", 0xDCDF, [158], "Totodile");
            mapper.AssertAreEqual("player.team.0.dex_number", 0xDCDF, [158], 158);
            mapper.AssertAreEqual("player.team.0.nickname", 0xDE41, [141, 136, 130, 138, 80, 80, 80, 80, 80, 80, 80], "NICK");
            mapper.AssertAreEqual("player.team.0.level", 0xDCFE, [5], 5);
            mapper.AssertAreEqual("player.team.0.exp", 0xDCE7, [0, 0, 135], 135);
            mapper.AssertAreEqual("player.team.0.ot_id", 0xDCE5, [39, 94], 10078);
            mapper.AssertAreEqual("player.team.0.held_item", 0xDCE0, [173], "Berry");
            mapper.AssertAreEqual("player.team.0.friendship", 0xDCFA, [70], 70);
            mapper.AssertAreEqual("player.team.0.shiny", false);
            mapper.AssertAreEqual("player.team.0.pokerus", 0xDCFB, [0], 0);
            mapper.AssertAreEqual("player.team.0.status_condition", 0xDCFF, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0xDCE1, [10], "Scratch");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0xDCF6, [34], 34);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0xDCF6, [34], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0xDCE2, [43], "Leer");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0xDCF7, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0xDCF7, [30], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0xDCE3, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0xDCF8, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0xDCF8, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0xDCE4, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0xDCF9, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0xDCF9, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0xDD01, [0, 19], 19);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0xDD03, [0, 21], 21);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0xDD05, [0, 12], 12);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0xDD07, [0, 12], 12);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0xDD09, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0xDD0B, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0xDD0D, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 15);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0xDCF4, [187], 11);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0xDCF4, [187], 11);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0xDCF5, [155], 9);
            mapper.AssertAreEqual("player.team.0.ivs.special", 0xDCF5, [155], 11);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0xDCEA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0xDCEC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0xDCEE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0xDCF0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.evs.special", 0xDCF2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.hidden_power.type", "Dark");
            mapper.AssertAreEqual("player.team.0.hidden_power.power", 70);
            mapper.AssertAreEqual("player.team.1.species", 0xDD0F, [0], null);
            mapper.AssertAreEqual("player.team.1.dex_number", 0xDD0F, [0], null);
            mapper.AssertAreEqual("player.team.1.nickname", 0xDE4C, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.1.level", 0xDD2E, [0], 0);
            mapper.AssertAreEqual("player.team.1.exp", 0xDD17, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ot_id", 0xDD15, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.held_item", 0xDD10, [0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0xDD2A, [0], 0);
            mapper.AssertAreEqual("player.team.1.shiny", false);
            mapper.AssertAreEqual("player.team.1.pokerus", 0xDD2B, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0xDD2F, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0xDD11, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0xDD26, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0xDD26, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0xDD12, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0xDD27, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0xDD27, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0xDD13, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0xDD28, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0xDD28, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0xDD14, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0xDD29, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0xDD29, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0xDD31, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0xDD33, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0xDD35, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0xDD37, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0xDD39, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0xDD3B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0xDD3D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0xDD24, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0xDD24, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0xDD25, [0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special", 0xDD25, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0xDD1A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0xDD1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0xDD1E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0xDD20, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special", 0xDD22, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.hidden_power.type", "Fighting");
            mapper.AssertAreEqual("player.team.1.hidden_power.power", 31);
            mapper.AssertAreEqual("player.team.2.species", 0xDD3F, [0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0xDD3F, [0], null);
            mapper.AssertAreEqual("player.team.2.nickname", 0xDE57, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.2.level", 0xDD5E, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0xDD47, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ot_id", 0xDD45, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.held_item", 0xDD40, [0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0xDD5A, [0], 0);
            mapper.AssertAreEqual("player.team.2.shiny", false);
            mapper.AssertAreEqual("player.team.2.pokerus", 0xDD5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0xDD5F, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0xDD41, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0xDD56, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0xDD56, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0xDD42, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0xDD57, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0xDD57, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0xDD43, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0xDD58, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0xDD58, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0xDD44, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0xDD59, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0xDD59, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0xDD61, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0xDD63, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0xDD65, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0xDD67, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0xDD69, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0xDD6B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0xDD6D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0xDD54, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0xDD54, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0xDD55, [0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special", 0xDD55, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0xDD4A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0xDD4C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0xDD4E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0xDD50, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special", 0xDD52, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.hidden_power.type", "Fighting");
            mapper.AssertAreEqual("player.team.2.hidden_power.power", 31);
            mapper.AssertAreEqual("player.team.3.species", 0xDD6F, [0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0xDD6F, [0], null);
            mapper.AssertAreEqual("player.team.3.nickname", 0xDE62, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.3.level", 0xDD8E, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0xDD77, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ot_id", 0xDD75, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.held_item", 0xDD70, [0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0xDD8A, [0], 0);
            mapper.AssertAreEqual("player.team.3.shiny", false);
            mapper.AssertAreEqual("player.team.3.pokerus", 0xDD8B, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0xDD8F, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0xDD71, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0xDD86, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0xDD86, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0xDD72, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0xDD87, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0xDD87, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0xDD73, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0xDD88, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0xDD88, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0xDD74, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0xDD89, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0xDD89, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0xDD91, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0xDD93, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0xDD95, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0xDD97, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0xDD99, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0xDD9B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0xDD9D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0xDD84, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0xDD84, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0xDD85, [0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special", 0xDD85, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0xDD7A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0xDD7C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0xDD7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0xDD80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special", 0xDD82, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.hidden_power.type", "Fighting");
            mapper.AssertAreEqual("player.team.3.hidden_power.power", 31);
            mapper.AssertAreEqual("player.team.4.species", 0xDD9F, [0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0xDD9F, [0], null);
            mapper.AssertAreEqual("player.team.4.nickname", 0xDE6D, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.4.level", 0xDDBE, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0xDDA7, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ot_id", 0xDDA5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.held_item", 0xDDA0, [0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0xDDBA, [0], 0);
            mapper.AssertAreEqual("player.team.4.shiny", false);
            mapper.AssertAreEqual("player.team.4.pokerus", 0xDDBB, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0xDDBF, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0xDDA1, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0xDDB6, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0xDDB6, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0xDDA2, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0xDDB7, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0xDDB7, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0xDDA3, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0xDDB8, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0xDDB8, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0xDDA4, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0xDDB9, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0xDDB9, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0xDDC1, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0xDDC3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0xDDC5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0xDDC7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0xDDC9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0xDDCB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0xDDCD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0xDDB4, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0xDDB4, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0xDDB5, [0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special", 0xDDB5, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0xDDAA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0xDDAC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0xDDAE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0xDDB0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special", 0xDDB2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.hidden_power.type", "Fighting");
            mapper.AssertAreEqual("player.team.4.hidden_power.power", 31);
            mapper.AssertAreEqual("player.team.5.species", 0xDDCF, [0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0xDDCF, [0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0xDE78, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.5.level", 0xDDEE, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0xDDD7, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_id", 0xDDD5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.held_item", 0xDDD0, [0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0xDDEA, [0], 0);
            mapper.AssertAreEqual("player.team.5.shiny", false);
            mapper.AssertAreEqual("player.team.5.pokerus", 0xDDEB, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0xDDEF, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0xDDD1, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0xDDE6, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0xDDE6, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0xDDD2, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0xDDE7, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0xDDE7, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0xDDD3, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0xDDE8, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0xDDE8, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0xDDD4, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0xDDE9, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0xDDE9, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0xDDF1, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0xDDF3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0xDDF5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0xDDF7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0xDDF9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0xDDFB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0xDDFD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0xDDE4, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0xDDE4, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0xDDE5, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special", 0xDDE5, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0xDDDA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0xDDDC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0xDDDE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0xDDE0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special", 0xDDE2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.hidden_power.type", "Fighting");
            mapper.AssertAreEqual("player.team.5.hidden_power.power", 31);
            mapper.AssertAreEqual("player.badges.0", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.8", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.9", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.10", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.11", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.12", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.13", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.14", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.15", 0xD858, [0], false);
            mapper.AssertAreEqual("player.pokegear.map_card", 0xD957, [132], false);
            mapper.AssertAreEqual("player.pokegear.radio_card", 0xD957, [132], false);
            mapper.AssertAreEqual("player.pokegear.phone_card", 0xD957, [132], true);
            mapper.AssertAreEqual("player.pokegear.expansion_card", 0xD957, [132], false);
            mapper.AssertAreEqual("player.pokegear.obtained", 0xD957, [132], true);
            mapper.AssertAreEqual("bag.money", 0xD84E, [0, 11, 184], 3000);
            mapper.AssertAreEqual("bag.mom_money", 0xD851, [0, 0, 0], 0);
            mapper.AssertAreEqual("bag.mom_saving", 0xD854, [0], false);
            mapper.AssertAreEqual("bag.coins", 0xD855, [0, 0], 0);
            mapper.AssertAreEqual("bag.item_count", 0xD892, [1], 1);
            mapper.AssertAreEqual("bag.items.0.item", 0xD893, [18], "Potion");
            mapper.AssertAreEqual("bag.items.0.quantity", 0xD894, [1], 1);
            mapper.AssertAreEqual("bag.items.1.item", 0xD895, [255], "Berry");
            mapper.AssertAreEqual("bag.items.1.quantity", 0xD896, [0], 0);
            mapper.AssertAreEqual("bag.items.2.item", 0xD897, [0], null);
            mapper.AssertAreEqual("bag.items.2.quantity", 0xD898, [0], 0);
            mapper.AssertAreEqual("bag.items.3.item", 0xD899, [0], null);
            mapper.AssertAreEqual("bag.items.3.quantity", 0xD89A, [0], 0);
            mapper.AssertAreEqual("bag.items.4.item", 0xD89B, [0], null);
            mapper.AssertAreEqual("bag.items.4.quantity", 0xD89C, [0], 0);
            mapper.AssertAreEqual("bag.items.5.item", 0xD89D, [0], null);
            mapper.AssertAreEqual("bag.items.5.quantity", 0xD89E, [0], 0);
            mapper.AssertAreEqual("bag.items.6.item", 0xD89F, [0], null);
            mapper.AssertAreEqual("bag.items.6.quantity", 0xD8A0, [0], 0);
            mapper.AssertAreEqual("bag.items.7.item", 0xD8A1, [0], null);
            mapper.AssertAreEqual("bag.items.7.quantity", 0xD8A2, [0], 0);
            mapper.AssertAreEqual("bag.items.8.item", 0xD8A3, [0], null);
            mapper.AssertAreEqual("bag.items.8.quantity", 0xD8A4, [0], 0);
            mapper.AssertAreEqual("bag.items.9.item", 0xD8A5, [0], null);
            mapper.AssertAreEqual("bag.items.9.quantity", 0xD8A6, [0], 0);
            mapper.AssertAreEqual("bag.items.10.item", 0xD8A7, [0], null);
            mapper.AssertAreEqual("bag.items.10.quantity", 0xD8A8, [0], 0);
            mapper.AssertAreEqual("bag.items.11.item", 0xD8A9, [0], null);
            mapper.AssertAreEqual("bag.items.11.quantity", 0xD8AA, [0], 0);
            mapper.AssertAreEqual("bag.items.12.item", 0xD8AB, [0], null);
            mapper.AssertAreEqual("bag.items.12.quantity", 0xD8AC, [0], 0);
            mapper.AssertAreEqual("bag.items.13.item", 0xD8AD, [0], null);
            mapper.AssertAreEqual("bag.items.13.quantity", 0xD8AE, [0], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0xD8AF, [0], null);
            mapper.AssertAreEqual("bag.items.14.quantity", 0xD8B0, [0], 0);
            mapper.AssertAreEqual("bag.items.15.item", 0xD8B1, [0], null);
            mapper.AssertAreEqual("bag.items.15.quantity", 0xD8B2, [0], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0xD8B3, [0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0xD8B4, [0], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0xD8B5, [0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0xD8B6, [0], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0xD8B7, [0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0xD8B8, [0], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0xD8B9, [0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0xD8BA, [0], 0);
            mapper.AssertAreEqual("bag.items.20.item", 0xD8BA, [0], null);
            mapper.AssertAreEqual("bag.items.20.quantity", 0xD8BB, [0], 0);
            mapper.AssertAreEqual("bag.ball_count", 0xD8D7, [0], 0);
            mapper.AssertAreEqual("bag.balls.0.item", 0xD8D8, [255], "Berry");
            mapper.AssertAreEqual("bag.balls.0.quantity", 0xD8D9, [0], 0);
            mapper.AssertAreEqual("bag.balls.1.item", 0xD8DA, [0], null);
            mapper.AssertAreEqual("bag.balls.1.quantity", 0xD8DB, [0], 0);
            mapper.AssertAreEqual("bag.balls.2.item", 0xD8DC, [0], null);
            mapper.AssertAreEqual("bag.balls.2.quantity", 0xD8DD, [0], 0);
            mapper.AssertAreEqual("bag.balls.3.item", 0xD8DE, [0], null);
            mapper.AssertAreEqual("bag.balls.3.quantity", 0xD8DF, [0], 0);
            mapper.AssertAreEqual("bag.balls.4.item", 0xD8E0, [0], null);
            mapper.AssertAreEqual("bag.balls.4.quantity", 0xD8E1, [0], 0);
            mapper.AssertAreEqual("bag.balls.5.item", 0xD8E2, [0], null);
            mapper.AssertAreEqual("bag.balls.5.quantity", 0xD8E3, [0], 0);
            mapper.AssertAreEqual("bag.balls.6.item", 0xD8E4, [0], null);
            mapper.AssertAreEqual("bag.balls.6.quantity", 0xD8E5, [0], 0);
            mapper.AssertAreEqual("bag.balls.7.item", 0xD8E6, [0], null);
            mapper.AssertAreEqual("bag.balls.7.quantity", 0xD8E7, [0], 0);
            mapper.AssertAreEqual("bag.balls.8.item", 0xD8E8, [0], null);
            mapper.AssertAreEqual("bag.balls.8.quantity", 0xD8E9, [0], 0);
            mapper.AssertAreEqual("bag.balls.9.item", 0xD8EA, [0], null);
            mapper.AssertAreEqual("bag.balls.9.quantity", 0xD8EB, [0], 0);
            mapper.AssertAreEqual("bag.balls.10.item", 0xD8EC, [0], null);
            mapper.AssertAreEqual("bag.balls.10.quantity", 0xD8ED, [0], 0);
            mapper.AssertAreEqual("bag.balls.11.item", 0xD8ED, [0], null);
            mapper.AssertAreEqual("bag.balls.11.quantity", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("bag.key_count", 0xD8BC, [0], 0);
            mapper.AssertAreEqual("bag.key_items.0", 0xD8BD, [255], "Berry");
            mapper.AssertAreEqual("bag.key_items.1", 0xD8BE, [0], null);
            mapper.AssertAreEqual("bag.key_items.2", 0xD8BF, [0], null);
            mapper.AssertAreEqual("bag.key_items.3", 0xD8C0, [0], null);
            mapper.AssertAreEqual("bag.key_items.4", 0xD8C1, [0], null);
            mapper.AssertAreEqual("bag.key_items.5", 0xD8C2, [0], null);
            mapper.AssertAreEqual("bag.key_items.6", 0xD8C3, [0], null);
            mapper.AssertAreEqual("bag.key_items.7", 0xD8C4, [0], null);
            mapper.AssertAreEqual("bag.key_items.8", 0xD8C5, [0], null);
            mapper.AssertAreEqual("bag.key_items.9", 0xD8C6, [0], null);
            mapper.AssertAreEqual("bag.key_items.10", 0xD8C7, [0], null);
            mapper.AssertAreEqual("bag.key_items.11", 0xD8C8, [0], null);
            mapper.AssertAreEqual("bag.key_items.12", 0xD8C9, [0], null);
            mapper.AssertAreEqual("bag.key_items.13", 0xD8CA, [0], null);
            mapper.AssertAreEqual("bag.key_items.14", 0xD8CB, [0], null);
            mapper.AssertAreEqual("bag.key_items.15", 0xD8CC, [0], null);
            mapper.AssertAreEqual("bag.key_items.16", 0xD8CD, [0], null);
            mapper.AssertAreEqual("bag.key_items.17", 0xD8CE, [0], null);
            mapper.AssertAreEqual("bag.key_items.18", 0xD8CF, [0], null);
            mapper.AssertAreEqual("bag.key_items.19", 0xD8D0, [0], null);
            mapper.AssertAreEqual("bag.key_items.20", 0xD8D1, [0], null);
            mapper.AssertAreEqual("bag.key_items.21", 0xD8D2, [0], null);
            mapper.AssertAreEqual("bag.key_items.22", 0xD8D3, [0], null);
            mapper.AssertAreEqual("bag.key_items.23", 0xD8D4, [0], null);
            mapper.AssertAreEqual("bag.key_items.24", 0xD8D5, [0], null);
            mapper.AssertAreEqual("bag.key_items.25", 0xD8D6, [0], null);
            mapper.AssertAreEqual("bag.tms.TM01-DynamicPunch", 0xD859, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM02-Headbutt", 0xD85A, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM03-Curse", 0xD85B, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM04-Rollout", 0xD85C, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM05-Roar", 0xD85D, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM06-Toxic", 0xD85E, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM07-Zap Cannon", 0xD85F, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM08-Rock Smash", 0xD860, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM09-Psych Up", 0xD861, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM10-Hidden Power", 0xD862, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM11-Sunny Day", 0xD863, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM12-Sweet Scent", 0xD864, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM13-Snore", 0xD865, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM14-Blizzard", 0xD866, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM15-Hyperbeam", 0xD867, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM16-Icy Wind", 0xD868, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM17-Protect", 0xD869, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM18-Rain Dance", 0xD86A, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM19-Giga Drain", 0xD86B, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM20-Endure", 0xD86C, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM21-Frustration", 0xD86D, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM22-SolarBeam", 0xD86E, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM23-Iron Tail", 0xD86F, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM24-DragonBreath", 0xD870, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM25-Thunder", 0xD871, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM26-Earthquake", 0xD872, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM27-Return", 0xD873, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM28-Dig", 0xD874, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM29-Psychic", 0xD875, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM30-Shadow Ball", 0xD876, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM31-Mud-Slap", 0xD877, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM32-Double Team", 0xD878, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM33-Ice Punch", 0xD879, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM34-Swagger", 0xD87A, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM35-Sleep Talk", 0xD87B, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM36-Sludge Bomb", 0xD87C, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM37-Sandstorm", 0xD87D, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM38-Fireblast", 0xD87E, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM39-Swift", 0xD87F, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM40-Defense Curl", 0xD880, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM41-ThunderPunch", 0xD881, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM42-Dream Eater", 0xD882, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM43-Detect", 0xD883, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM44-Rest", 0xD884, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM45-Attract", 0xD885, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM46-Thief", 0xD886, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM47-Steel Wing", 0xD887, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM48-Fire Punch", 0xD888, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM49-Fury Cutter", 0xD889, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM50-Nightmare", 0xD88A, [0], 0);
            mapper.AssertAreEqual("bag.hms.HM01", 0xD88B, [0], false);
            mapper.AssertAreEqual("bag.hms.HM02", 0xD88C, [0], false);
            mapper.AssertAreEqual("bag.hms.HM03", 0xD88D, [0], false);
            mapper.AssertAreEqual("bag.hms.HM04", 0xD88E, [0], false);
            mapper.AssertAreEqual("bag.hms.HM05", 0xD88F, [0], false);
            mapper.AssertAreEqual("bag.hms.HM06", 0xD890, [0], false);
            mapper.AssertAreEqual("bag.hms.HM07", 0xD891, [0], false);
            mapper.AssertAreEqual("overworld.map_name", 0xDCB5, [24, 3], "Route 29");
            mapper.AssertAreEqual("overworld.map_group", 0xDCB5, [24], "New Bark");
            mapper.AssertAreEqual("overworld.map_index", 0xDCB6, [3], 3);
            mapper.AssertAreEqual("overworld.y", 0xDCB7, [10], 10);
            mapper.AssertAreEqual("overworld.x", 0xDCB8, [45], 45);
            mapper.AssertAreEqual("overworld.movement_state", 0xD95D, [0], "Walk");
            mapper.AssertAreEqual("overworld.encounter_rate", 25);
            mapper.AssertAreEqual("overworld.encounter_rates.morning", 0xD25A, [25], 25);
            mapper.AssertAreEqual("overworld.encounter_rates.day", 0xD25B, [25], 25);
            mapper.AssertAreEqual("overworld.encounter_rates.night", 0xD25C, [25], 25);
            mapper.AssertAreEqual("overworld.encounter_rates.water", 0xD25D, [0], 0);
            mapper.AssertAreEqual("flags.beat_champion", 0xD4B5, [0], false);
            mapper.AssertAreEqual("flags.status_flags.pokedex", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.unown_dex", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.flash", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.caught_pokerus", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.rocket_signal", 0xD84C, [16], true);
            mapper.AssertAreEqual("flags.status_flags.no_wild_encounters", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.hall_of_fame", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.main_menu_mobile_choices", 0xD84C, [16], false);
            mapper.AssertAreEqual("flags.status_flags.rockets_in_radio_tower", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.safari_game", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.bug_contest_timer", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.unused_3", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.bike_shop_call", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.unused_5", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.reached_goldenrod", 0xD84D, [128], false);
            mapper.AssertAreEqual("flags.status_flags.rockets_in_mahogany", 0xD84D, [128], true);
            mapper.AssertAreEqual("flags.daily_flags.kurt_making_balls", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.bug_contest", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.fish_swarm", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.time_capsule", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.all_fruit_trees", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.got_shuckie_today", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.goldenrod_underground_bargain", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.trainer_house", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.mt_moon_square_clefairy", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.union_cave_lapras", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.goldenrod_underground_got_haircut", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.goldenrod_dept_store_tm27_return", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.daisys_grooming", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.indigo_plateau_rival_fight", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.move_tutor", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.buenas_password", 0xDC20, [0], false);
            mapper.AssertAreEqual("flags.swarm_flags.buenas_password", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.swarm_flags.goldenrod_dept_store_sale", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.swarm_flags.dunsparce_swarm", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.swarm_flags.yanma_swarm", 0xDC1F, [0], false);
            mapper.AssertAreEqual("flags.swarm_flags.mobile_4", 0xDC1F, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_1", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_2", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_3", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_4", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_5", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_6", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_7", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_8", 0xDA72, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm31_mud_slap", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm49_fury_cutter", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm01_dynamicpunch", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm45_attract", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm30_shadow_ball", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm23_iron_tail", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm16_icy_wind", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm24_dragonbreath", 0xDA73, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm01_cut", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm02_fly", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm03_surf", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm04_strength", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm05_flash", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm06_whirlpool", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_old_rod", 0xDA74, [0], false);
            mapper.AssertAreEqual("event_flags.got_good_rod", 0xDA75, [20], false);
            mapper.AssertAreEqual("event_flags.got_super_rod", 0xDA75, [20], false);
            mapper.AssertAreEqual("event_flags.got_a_pokemon_from_elm", 0xDA75, [20], true);
            mapper.AssertAreEqual("event_flags.got_cyndaquil_from_elm", 0xDA75, [20], false);
            mapper.AssertAreEqual("event_flags.got_totodile_from_elm", 0xDA75, [20], true);
            mapper.AssertAreEqual("event_flags.got_chikorita_from_elm", 0xDA75, [20], false);
            mapper.AssertAreEqual("event_flags.got_mystery_egg_from_mr_pokemon", 0xDA75, [20], false);
            mapper.AssertAreEqual("event_flags.gave_mystery_egg_to_elm", 0xDA75, [20], false);
            mapper.AssertAreEqual("event_flags.jasmine_returned_to_gym", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.cleared_radio_tower", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.cleared_rocket_hideout", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.got_secretpotion_from_pharmacy", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.got_ss_ticket_from_elm", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.used_the_card_key_in_the_radio_tower", 0xDA76, [32], true);
            mapper.AssertAreEqual("event_flags.refused_to_help_lance_at_lake_of_rage", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.got_berry_from_route_30_house", 0xDA76, [32], false);
            mapper.AssertAreEqual("event_flags.made_whitney_cry", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.herded_farfetchd", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.fought_sudowoodo", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.cleared_slowpoke_well", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.refused_to_take_egg_from_elms_aide", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.got_togepi_egg_from_elms_aide", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.made_unown_appear_in_ruins", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.fast_ship_destination_olivine", 0xDA77, [0], false);
            mapper.AssertAreEqual("event_flags.fast_ship_first_time", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.fast_ship_has_arrived", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.fast_ship_found_girl", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.fast_ship_lazy_sailor", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.fast_ship_informed_about_lazy_sailor", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.kurt_gave_you_lure_ball", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.initialized_events", 0xDA78, [64], true);
            mapper.AssertAreEqual("event_flags.jasmine_explained_amphys_sickness", 0xDA78, [64], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_explained_weird_magikarp", 0xDA79, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_asked_for_magikarp", 0xDA79, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_elixir_on_standby", 0xDA79, [0], false);
            mapper.AssertAreEqual("event_flags.healed_moomoo", 0xDA79, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm13_snore_from_moomoo_farm", 0xDA79, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_farmer_about_moomoo", 0xDA79, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_mom_after_mystery_egg_quest", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.dude_talked_to_you", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.learned_to_catch_pokemon", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.elm_called_about_stolen_pokemon", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_elite_four", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.got_shuckie", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.mania_took_shuckie_or_let_you_keep_him", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.got_sunny_day_from_radio_tower", 0xDA7A, [0], false);
            mapper.AssertAreEqual("event_flags.got_pink_bow_from_mary", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.used_basement_key", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.received_card_key", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm08_rock_smash", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.lance_healed_you_in_team_rocket_base", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.got_mystic_water_in_cherrygrove", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm05_roar", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.got_eevee", 0xDA7B, [0], false);
            mapper.AssertAreEqual("event_flags.got_kenya", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kenya", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.got_hp_up_from_randy", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm50_nightmare", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.togepi_hatched", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.showed_togepi_to_elm", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.got_everstone_from_elm", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.got_quick_claw", 0xDA7C, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm10_hidden_power", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm36_sludge_bomb", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_itemfinder", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_bicycle", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_squirtbottle", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_miracle_seed_in_route_32", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_charcoal_in_charcoal_kiln", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm02_headbutt", 0xDA7D, [0], false);
            mapper.AssertAreEqual("event_flags.decided_to_help_lance", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.got_tyrogue_from_kiyo", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.met_frieda_of_friday", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.got_poison_barb_from_frieda", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.met_tuscany_of_tuesday", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.got_pink_bow_from_tuscany", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.met_arthur_of_thursday", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.got_hard_stone_from_arthur", 0xDA7E, [0], false);
            mapper.AssertAreEqual("event_flags.met_sunny_of_sunday", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.got_magnet_from_sunny", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.met_wesley_of_wednesday", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.got_blackbelt_from_wesley", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.met_santos_of_saturday", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.got_spell_tag_from_santos", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.met_monica_of_monday", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.got_sharp_beak_from_monica", 0xDA7F, [0], false);
            mapper.AssertAreEqual("event_flags.got_soft_sand_from_kate", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.got_metal_coat_from_grandpa_on_ss_aqua", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.got_blackglasses_in_dark_cave", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.got_kings_rock_in_slowpoke_well", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm47_steel_wing", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm37_sandstorm", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.first_time_banking_with_mom", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.told_elm_about_togepi_over_the_phone", 0xDA80, [0], false);
            mapper.AssertAreEqual("event_flags.got_clear_bell", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.got_silver_wing", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm12_sweet_scent", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.released_the_beasts", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.got_master_ball_from_elm", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_hidden_max_potion", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_5f_hidden_full_restore", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_5f_hidden_carbos", 0xDA81, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_hidden_ether", 0xDA82, [0], false);
            mapper.AssertAreEqual("event_flags.national_park_hidden_full_heal", 0xDA82, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_hidden_hyper_potion", 0xDA82, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_hidden_revive", 0xDA82, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_hidden_full_heal", 0xDA82, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_hidden_ether", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_hidden_super_potion", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_hidden_full_heal", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_hidden_parlyz_heal", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_hidden_super_potion", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_hidden_antidote", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_hidden_max_potion", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_hidden_revive", 0xDA83, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_outside_hidden_hyper_potion", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_hidden_max_repel", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_hidden_full_restore", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_hidden_max_revive", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b1f_hidden_max_potion", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_mahogany_side_hidden_carbos", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_blackthorn_side_hidden_ice_heal", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_hidden_rare_candy", 0xDA84, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_hidden_ultra_ball", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_hidden_full_restore", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_hidden_dire_hit", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_hidden_ultra_ball", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_2_hidden_max_potion", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_hidden_elixer", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_hidden_max_potion", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_hidden_full_heal", 0xDA85, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_hidden_revive", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_hidden_max_potion", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_hidden_max_elixer", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.route_28_hidden_rare_candy", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.route_30_hidden_potion", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.route_32_hidden_great_ball", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.route_32_hidden_super_potion", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.route_34_hidden_rare_candy", 0xDA86, [0], false);
            mapper.AssertAreEqual("event_flags.route_34_hidden_super_potion", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_37_hidden_ether", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_39_hidden_nugget", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_40_hidden_hyper_potion", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_41_hidden_max_ether", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_42_hidden_max_potion", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_44_hidden_elixer", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.route_45_hidden_pp_up", 0xDA87, [0], false);
            mapper.AssertAreEqual("event_flags.violet_city_hidden_hyper_potion", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.azalea_town_hidden_full_heal", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.cianwood_city_hidden_revive", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.cianwood_city_hidden_max_ether", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.ecruteak_city_hidden_hyper_potion", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_hidden_full_restore", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_hidden_rare_candy", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_hidden_max_potion", 0xDA88, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_outside_hidden_full_restore", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.met_floria", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_floria_at_flower_shop", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.bugging_kurt_too_much", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_ruins_coward", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.got_dratini", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.can_give_gs_ball_to_kurt", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.gave_gs_ball_to_kurt", 0xDA89, [0], false);
            mapper.AssertAreEqual("event_flags.forest_is_restless", 0xDA8A, [0], false);
            mapper.AssertAreEqual("event_flags.answered_dragon_master_quiz_wrong", 0xDA8A, [0], false);
            mapper.AssertAreEqual("event_flags.got_nugget_from_guy", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.returned_machine_part", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.met_manager_at_power_plant", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.met_rocket_grunt_at_cerulean_gym", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.met_reds_mom", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.restored_power_to_kanto", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.got_coins_from_gambler_at_celadon", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.met_copycat_found_out_about_lost_item", 0xDA8B, [0], false);
            mapper.AssertAreEqual("event_flags.returned_lost_item_to_copycat", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.got_pass_from_copycat", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.got_lost_item_from_fan_club", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.listened_to_fan_club_president_but_bag_was_full", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.listened_to_fan_club_president", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_seafoam_gym_guide_once", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.enable_diploma_printing", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.cinnabar_rocks_cleared", 0xDA8C, [0], false);
            mapper.AssertAreEqual("event_flags.cleared_nugget_bridge", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_wardens_granddaughter", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm03_curse", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_cleanse_tag", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm19_giga_drain", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm06_toxic", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_up_grade", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm07_zap_cannon", 0xDA8D, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm42_dream_eater", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_oak_in_kanto", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.got_hp_up_from_vermilion_guy", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm29_psychic", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.digletts_cave_hidden_max_revive", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.underground_path_hidden_full_restore", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.underground_path_hidden_x_special", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_hidden_x_accuracy", 0xDA8E, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_hidden_x_defend", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_hidden_max_potion", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_port_hidden_protein", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.vermilion_port_hidden_iron", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.mount_moon_square_hidden_moon_stone", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_max_ether", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_full_heal", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_full_restore", 0xDA8F, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_revive", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_4_hidden_ultra_ball", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_9_hidden_ether", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_12_hidden_elixer", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_13_hidden_calcium", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_11_hidden_revive", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_17_hidden_max_ether", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_17_hidden_max_elixer", 0xDA90, [0], false);
            mapper.AssertAreEqual("event_flags.route_25_hidden_potion", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.found_leftovers_in_celadon_cafe", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.found_berserk_gene_in_cerulean_city", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.found_machine_part_in_cerulean_gym", 0xDA91, [8], true);
            mapper.AssertAreEqual("event_flags.vermilion_city_hidden_full_heal", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.celadon_city_hidden_pp_up", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.cinnabar_island_hidden_rare_candy", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_hidden_ultra_ball", 0xDA91, [8], false);
            mapper.AssertAreEqual("event_flags.gina_gave_leaf_stone", 0xDA92, [0], false);
            mapper.AssertAreEqual("event_flags.alan_gave_fire_stone", 0xDA92, [0], false);
            mapper.AssertAreEqual("event_flags.dana_gave_thunderstone", 0xDA92, [0], false);
            mapper.AssertAreEqual("event_flags.tully_gave_water_stone", 0xDA92, [0], false);
            mapper.AssertAreEqual("event_flags.tiffany_gave_pink_bow", 0xDA92, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_red_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_blu_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_ylw_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_grn_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_wht_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_blk_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_pnk_apricorn", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.jack_asked_for_phone_number", 0xDABD, [0], false);
            mapper.AssertAreEqual("event_flags.beverly_asked_for_phone_number", 0xDABE, [0], false);
            mapper.AssertAreEqual("event_flags.huey_asked_for_phone_number", 0xDABE, [0], false);
            mapper.AssertAreEqual("event_flags.got_protein_from_huey", 0xDABE, [0], false);
            mapper.AssertAreEqual("event_flags.got_hp_up_from_joey", 0xDABE, [0], false);
            mapper.AssertAreEqual("event_flags.got_carbos_from_vance", 0xDABE, [0], false);
            mapper.AssertAreEqual("event_flags.got_iron_from_parry", 0xDABF, [0], false);
            mapper.AssertAreEqual("event_flags.got_calcium_from_erin", 0xDABF, [0], false);
            mapper.AssertAreEqual("event_flags.kenji_on_break", 0xDABF, [0], false);
            mapper.AssertAreEqual("event_flags.gaven_asked_for_phone_number", 0xDABF, [0], false);
            mapper.AssertAreEqual("event_flags.beth_asked_for_phone_number", 0xDABF, [0], false);
            mapper.AssertAreEqual("event_flags.jose_asked_for_phone_number", 0xDABF, [0], false);
            mapper.AssertAreEqual("event_flags.reena_asked_for_phone_number", 0xDAC0, [0], false);
            mapper.AssertAreEqual("event_flags.joey_asked_for_phone_number", 0xDAC0, [0], false);
            mapper.AssertAreEqual("event_flags.wade_asked_for_phone_number", 0xDAC0, [0], false);
            mapper.AssertAreEqual("event_flags.ralph_asked_for_phone_number", 0xDAC0, [0], false);
            mapper.AssertAreEqual("event_flags.liz_asked_for_phone_number", 0xDAC1, [0], false);
            mapper.AssertAreEqual("event_flags.anthony_asked_for_phone_number", 0xDAC1, [0], false);
            mapper.AssertAreEqual("event_flags.todd_asked_for_phone_number", 0xDAC1, [0], false);
            mapper.AssertAreEqual("event_flags.gina_asked_for_phone_number", 0xDAC1, [0], false);
            mapper.AssertAreEqual("event_flags.irwin_asked_for_phone_number", 0xDAC2, [0], false);
            mapper.AssertAreEqual("event_flags.arnie_asked_for_phone_number", 0xDAC2, [0], false);
            mapper.AssertAreEqual("event_flags.alan_asked_for_phone_number", 0xDAC2, [0], false);
            mapper.AssertAreEqual("event_flags.dana_asked_for_phone_number", 0xDAC3, [0], false);
            mapper.AssertAreEqual("event_flags.chad_asked_for_phone_number", 0xDAC3, [0], false);
            mapper.AssertAreEqual("event_flags.derek_asked_for_phone_number", 0xDAC3, [0], false);
            mapper.AssertAreEqual("event_flags.tully_asked_for_phone_number", 0xDAC3, [0], false);
            mapper.AssertAreEqual("event_flags.brent_asked_for_phone_number", 0xDAC4, [0], false);
            mapper.AssertAreEqual("event_flags.tiffany_asked_for_phone_number", 0xDAC4, [0], false);
            mapper.AssertAreEqual("event_flags.vance_asked_for_phone_number", 0xDAC4, [0], false);
            mapper.AssertAreEqual("event_flags.wilton_asked_for_phone_number", 0xDAC4, [0], false);
            mapper.AssertAreEqual("event_flags.kenji_asked_for_phone_number", 0xDAC5, [0], false);
            mapper.AssertAreEqual("event_flags.parry_asked_for_phone_number", 0xDAC5, [0], false);
            mapper.AssertAreEqual("event_flags.erin_asked_for_phone_number", 0xDAC5, [0], false);
            mapper.AssertAreEqual("event_flags.buena_offered_her_phone_number_no_blue_card", 0xDAC5, [0], false);
            mapper.AssertAreEqual("event_flags.solved_ho_oh_puzzle", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.solved_kabuto_puzzle", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.solved_omanyte_puzzle", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.solved_aerodactyl_puzzle", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.deco_bed_1", 0xDAC6, [16], true);
            mapper.AssertAreEqual("event_flags.deco_bed_2", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.deco_bed_3", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.deco_bed_4", 0xDAC6, [16], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_1", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_2", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_3", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_4", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_plant_1", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_plant_2", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_plant_3", 0xDAC7, [128], false);
            mapper.AssertAreEqual("event_flags.deco_poster_1", 0xDAC7, [128], true);
            mapper.AssertAreEqual("event_flags.deco_poster_2", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_poster_3", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_poster_4", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_famicom", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_snes", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_n64", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_virtual_boy", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_pikachu_doll", 0xDAC8, [0], false);
            mapper.AssertAreEqual("event_flags.deco_surfing_pikachu_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_clefairy_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_jigglypuff_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_bulbasaur_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_charmander_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_squirtle_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_poliwag_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_diglett_doll", 0xDAC9, [0], false);
            mapper.AssertAreEqual("event_flags.deco_staryu_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_magikarp_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_oddish_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_gengar_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_shellder_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_grimer_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_voltorb_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_weedle_doll", 0xDACA, [0], false);
            mapper.AssertAreEqual("event_flags.deco_unown_doll", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.deco_geodude_doll", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.deco_machop_doll", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.deco_tentacool_doll", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.players_room_poster", 0xDACB, [16], true);
            mapper.AssertAreEqual("event_flags.deco_gold_trophy", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.deco_silver_trophy", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.deco_big_snorlax_doll", 0xDACB, [16], false);
            mapper.AssertAreEqual("event_flags.deco_big_onix_doll", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.deco_big_lapras_doll", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.warped_from_route_35_national_park_gate", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.switch_1", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.switch_2", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.switch_3", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.emergency_switch", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.switch_4", 0xDACC, [0], false);
            mapper.AssertAreEqual("event_flags.switch_5", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_6", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_7", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_8", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_9", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_10", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_11", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_12", 0xDACD, [0], false);
            mapper.AssertAreEqual("event_flags.switch_13", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.switch_14", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.uncovered_staircase_in_mahogany_mart", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.turned_off_security_cameras", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.security_camera_1", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.security_camera_2", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.security_camera_3", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.security_camera_4", 0xDACE, [0], false);
            mapper.AssertAreEqual("event_flags.security_camera_5", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_1", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_2", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_3", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_4", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_5", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_6", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_7", 0xDACF, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_8", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_9", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_10", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_11", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_12", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_13", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_14", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_15", 0xDAD0, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_16", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_17", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_18", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_19", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_20", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_21", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_22", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.learned_hail_giovanni", 0xDAD1, [0], false);
            mapper.AssertAreEqual("event_flags.opened_door_to_rocket_hideout_transmitter", 0xDAD2, [144], false);
            mapper.AssertAreEqual("event_flags.learned_slowpoketail", 0xDAD2, [144], false);
            mapper.AssertAreEqual("event_flags.learned_raticate_tail", 0xDAD2, [144], false);
            mapper.AssertAreEqual("event_flags.opened_door_to_giovannis_office", 0xDAD2, [144], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_layout_1", 0xDAD2, [144], true);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_layout_2", 0xDAD2, [144], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_layout_3", 0xDAD2, [144], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_blocked_off", 0xDAD2, [144], true);
            mapper.AssertAreEqual("event_flags.left_mons_with_contest_officer", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.wills_room_entrance_closed", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.wills_room_exit_open", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.kogas_room_entrance_closed", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.kogas_room_exit_open", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.brunos_room_entrance_closed", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.brunos_room_exit_open", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.karens_room_entrance_closed", 0xDAD3, [0], false);
            mapper.AssertAreEqual("event_flags.karens_room_exit_open", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.lances_room_entrance_closed", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.lances_room_exit_open", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_sun_stone", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_everstone", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_gold_berry", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_berry", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.fought_ho_oh", 0xDAD4, [0], false);
            mapper.AssertAreEqual("event_flags.fought_lugia", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rival_in_mt_moon", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.met_bills_grandpa", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.showed_lickitung_to_bills_grandpa", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.showed_oddish_to_bills_grandpa", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.showed_staryu_to_bills_grandpa", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.showed_growlithe_vulpix_to_bills_grandpa", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.showed_pichu_to_bills_grandpa", 0xDAD5, [0], false);
            mapper.AssertAreEqual("event_flags.got_everstone_from_bills_grandpa", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.got_leaf_stone_from_bills_grandpa", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.got_water_stone_from_bills_grandpa", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.got_fire_stone_from_bills_grandpa", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.got_thunderstone_from_bills_grandpa", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.listened_to_initial_radio", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.wall_opened_in_ho_oh_chamber", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.wall_opened_in_kabuto_chamber", 0xDAD6, [0], false);
            mapper.AssertAreEqual("event_flags.wall_opened_in_omanyte_chamber", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wall_opened_in_aerodactyl_chamber", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.welcomed_to_pokecom_center", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wade_has_berry", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wade_has_psncureberry", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wade_has_przcureberry", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wade_has_bitter_berry", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wilton_has_ultra_ball", 0xDAD7, [0], false);
            mapper.AssertAreEqual("event_flags.wilton_has_great_ball", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.wilton_has_poke_ball", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.hole_in_burned_tower", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.fought_eusine", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.koji_allows_you_passage_to_tin_tower", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.fought_suicune", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.got_rainbow_wing", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.huey_protein", 0xDAD8, [0], false);
            mapper.AssertAreEqual("event_flags.joey_hp_up", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.vance_carbos", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.parry_iron", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.erin_calcium", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.buena_offered_her_phone_number", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.met_buena", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.got_odd_egg", 0xDAD9, [0], false);
            mapper.AssertAreEqual("event_flags.got_gs_ball_from_goldenrod_pokemon_center", 0xDADA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_elaine", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_paula", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_kaylee", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_susie", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_denise", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_kara", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_wendy", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_lisa", 0xDAEF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_jill", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_mary", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_katie", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_dawn", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_tara", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_nicole", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_lori", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_jody", 0xDAF0, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_nikki", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_diana", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_briana", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_rod", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_abe", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_bryan", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_theo", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_toby", 0xDAF1, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_denis", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_vance", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_hank", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_roy", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_boris", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_bob", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_jose", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_peter", 0xDAF2, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_jose2", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_perry", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_bret", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_jose3", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_vance2", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_vance3", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_boarder_ronald", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_boarder_brad", 0xDAF3, [0], false);
            mapper.AssertAreEqual("event_flags.beat_boarder_douglas", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_chow", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_nico", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_jin", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_troy", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_jeffrey", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_ping", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_edmond", 0xDAF4, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_neal", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_li", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_roland", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_todd", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_ivan", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_elliot", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_barry", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_lloyd", 0xDAF5, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_dean", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_sid", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_hervey", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_dale", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_ted", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_todd2", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_todd3", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_thomas", 0xDAF6, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_leroy", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_david", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_john", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_jerry", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_spencer", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_burglar_duncan", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_burglar_eddie", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_burglar_corey", 0xDAF7, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_benny", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_kazu", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_dwayne", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_harris", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_zeke", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_charles", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_riley", 0xDAF8, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_joel", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_glenn", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_nathan", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_franklin", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_herman", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_fidel", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_greg", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_norman", 0xDAF9, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_mark", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_phil", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_richard", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_gilbert", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_jared", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_rodney", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_otis", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_dick", 0xDAFA, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_ned", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_burt", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_bill", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_walt", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_ray", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_lyle", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_justin", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_ralph", 0xDAFB, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_arnold", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_kyle", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_henry", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_marvin", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_tully", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_andre", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_raymond", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_wilton", 0xDAFC, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_edgar", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_jonah", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_martin", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_stephen", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_barney", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_ralph2", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_ralph3", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_tully2", 0xDAFD, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_tully3", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_wilton2", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_scott", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_wilton3", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_amy_and_may", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_ann_and_anne", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_ann_and_anne2", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_amy_and_may2", 0xDAFE, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_jo_and_zoe", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_jo_and_zoe2", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_meg_and_peg", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_meg_and_peg2", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_jack", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_kip", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_alan", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_johnny", 0xDAFF, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_danny", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_tommy", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_dudley", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_joe", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_billy", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_chad", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_nate", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_ricky", 0xDB00, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_jack2", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_jack3", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_alan2", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_alan3", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_chad2", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_chad3", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_liz", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_gina", 0xDB01, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_brooke", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_kim", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_cindy", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_hope", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_sharon", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_debra", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_gina2", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_erin", 0xDB02, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_liz2", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_liz3", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_heidi", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_edna", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_gina3", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tiffany2", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tiffany3", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_erin2", 0xDB03, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tanya", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tiffany", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_erin3", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_guitarist_clyde", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_guitarist_vincent", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_irwin", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_fritz", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_horton", 0xDB04, [0], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_irwin2", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_irwin3", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_preston", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_edward", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_gregory", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_virgil", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_alfred", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_scientist_ross", 0xDB05, [0], false);
            mapper.AssertAreEqual("event_flags.beat_scientist_mitch", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_scientist_jed", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_scientist_marc", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_scientist_rich", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kenji2", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_yoshi", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kenji3", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_lao", 0xDB06, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_nob", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kiyo", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_lung", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kenji", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_wai", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_victoria", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_samantha", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_julie", 0xDB07, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_jaclyn", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_brenda", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_cassie", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_caroline", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_carlene", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_jessica", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_rachael", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_angelica", 0xDB08, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_kendra", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_veronica", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_julia", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_theresa", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_valerie", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_falkner", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bugsy", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_whitney", 0xDB09, [0], false);
            mapper.AssertAreEqual("event_flags.beat_morty", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_jasmine", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_chuck", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pryce", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_clair", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_brock", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_misty", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_ltsurge", 0xDB0A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_erika", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_janine", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sabrina", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blaine", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_blue", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_william", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_derek", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_robert", 0xDB0B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_joshua", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_carter", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_trevor", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_brandon", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_jeremy", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_colin", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_derek2", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_derek3", 0xDB0C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_alex", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_beverly", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_ruth", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_beverly2", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_beverly3", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_georgia", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_naoko", 0xDB0D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_sayo", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_zuki", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_kuni", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_miki", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_larry", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_andrew", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_calvin", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_shane", 0xDB0E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_ben", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_brent", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_ron", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_ethan", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_brent2", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_brent3", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_issac", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_donald", 0xDB0F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_zach", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_1", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_2", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_3", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_4", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_5", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_6", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_7", 0xDB10, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_8", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_9", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_10", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_11", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_12", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_13", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_14", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_15", 0xDB11, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_16", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_17", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_18", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_19", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_20", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_21", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_22", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_23", 0xDB12, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_24", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_25", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_26", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_27", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_28", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_29", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_30", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_31", 0xDB13, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_1", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_2", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_3", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_4", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_5", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_carrie", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_bridget", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_alice", 0xDB14, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_krise", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_connie", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_linda", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_laura", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_shannon", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_michelle", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_dana", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_ellen", 0xDB15, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_connie2", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_connie3", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_dana2", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_lass_dana3", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_anthony2", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_russell", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_phillip", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_leonard", 0xDB16, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_anthony", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_benjamin", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_erik", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_michael", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_parry", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_timothy", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_bailey", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_anthony3", 0xDB17, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_tim", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_noland", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_sidney", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_kenny", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_jim", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_daniel", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_parry2", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_parry3", 0xDB18, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_don", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_rob", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_ed", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wade", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_benny", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_al", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_josh", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_arnie", 0xDB19, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_ken", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wade2", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wade3", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_doug", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_arnie2", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_arnie3", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_officer_keith", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_officer_dirk", 0xDB1A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_nick", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_aaron", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_paul", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_cody", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_mike", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_gaven2", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_gaven3", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_ryan", 0xDB1B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_jake", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_gaven", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_blake", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_brian", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_erick", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_andy", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_tyler", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_sean", 0xDB1C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_kevin", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_steve", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_allen", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_gwen", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_lois", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_fran", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_lola", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_kate", 0xDB1D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_irene", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_kelly", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_joyce", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_beth", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_reena", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_megan", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_beth2", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_carol", 0xDB1E, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_quinn", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_emma", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_cybil", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_jenn", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_beth3", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_reena2", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_reena3", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivef_1", 0xDB1F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivef_2", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_1", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_2", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_3", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_4", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_eugene", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_huey", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_terrell", 0xDB20, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_kent", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_ernest", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_jeff", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_garrett", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_kenneth", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_stanly", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_harry", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_huey2", 0xDB21, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_huey3", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_stan", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_eric", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_gregg", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_jay", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beay_super_nerd_dave", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_sam", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_tom", 0xDB22, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_pat", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_shawn", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_teru", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_martha", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_grace", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_bethany", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_margret", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_ethel", 0xDB23, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_rebecca", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_medium_doris", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_skier_roxanne", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_skier_clarissa", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_harold", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_simon", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_randall", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_charlie", 0xDB24, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_george", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_berke", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_kirk", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_mathew", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_hal", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_paton", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_daryl", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_walter", 0xDB25, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_tony", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_jerome", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_tucker", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_rick", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_cameron", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_seth", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_james", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_lewis", 0xDB26, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_parker", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_joey", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_mikey", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_albert", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_gordon", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_samuel", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_ian", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_joey2", 0xDB27, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_joey3", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_warren", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_jimmy", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_owen", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_jason", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_teacher_colette", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_teacher_hillary", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_teacher_shirley", 0xDB28, [0], false);
            mapper.AssertAreEqual("event_flags.beat_elite_4_will", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_elite_4_koga", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_elite_4_bruno", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_elite_4_karen", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_champion_lance", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_darin", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_cara", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_twins_lea_and_pia", 0xDB29, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wayne", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_olivia", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_jaime", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_camper_quentin", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_miller", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_hugh", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_markus", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_rex", 0xDB2A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_allan", 0xDB2B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_gaku", 0xDB2B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_masa", 0xDB2B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_sage_koji", 0xDB2B, [0], false);
            mapper.AssertAreEqual("event_flags.cyndaquil_pokeball_in_elms_lab", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.totodile_pokeball_in_elms_lab", 0xDB3A, [2], true);
            mapper.AssertAreEqual("event_flags.chikorita_pokeball_in_elms_lab", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.violet_city_pp_up", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.violet_city_rare_candy", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_elixer", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_tm_detect", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_1f_parlyz_heal", 0xDB3A, [2], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_2f_x_accuracy", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_3f_potion", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_3f_escape_rope", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_3f_full_heal", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_ultra_ball", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_pp_up", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_escape_rope", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_5f_rare_candy", 0xDB3B, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_7f_max_revive", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_8f_nugget", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_8f_max_elixer", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_8f_full_restore", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_ultra_ball", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_ultra_ball", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_hp_up", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_tm_endure", 0xDB3C, [0], false);
            mapper.AssertAreEqual("event_flags.national_park_parlyz_heal", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.national_park_tm_dig", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_1f_great_ball", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_1f_x_attack", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_1f_potion", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_1f_awakening", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_b1f_tm_swift", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_b1f_x_defend", 0xDB3D, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_b2f_elixer", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.union_cave_b2f_hyper_potion", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.slowpoke_well_b1f_super_potion", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.slowpoke_well_b2f_tm_rain_dance", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_3f_ether", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_rare_candy", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_super_repel", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_tm_swagger", 0xDB3E, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_6f_super_potion", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_hyper_potion", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_nugget", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_guard_spec", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_tm_thief", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_protein", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_x_special", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_full_heal", 0xDB3F, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_ice_heal", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_revive", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_coin_case", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_smoke_ball", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_full_heal", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_ether", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_amulet_coin", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_burn_heal", 0xDB40, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_ultra_ball", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_max_ether", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_tm_sleep_talk", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_outside_ether", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_outside_revive", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_escape_rope", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_max_revive", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_hyper_potion", 0xDB41, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_max_potion", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_rare_candy", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_tm_defense_curl", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_dragon_scale", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_elixer", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_escape_rope", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_hyper_potion", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_carbos", 0xDB42, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm07_waterfall", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_1f_pp_up", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b1f_iron", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_mahogany_side_full_heal", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_mahogany_side_max_potion", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_blackthorn_side_tm_rest", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_b3f_nevermeltice", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_ne_ultra_ball", 0xDB43, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_sw_ultra_ball", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_full_restore", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_carbos", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_calcium", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_nugget", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_escape_rope", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b2f_full_restore", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b2f_max_revive", 0xDB44, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b2f_max_elixer", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_max_elixer", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_protein", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_escape_rope", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_item_rooms_max_revive", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_item_rooms_full_restore", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_potion", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_full_heal", 0xDB45, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_hyper_potion", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_blackthorn_entrance_revive", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_blackthorn_entrance_tm_snore", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_tm_earthquake", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_max_revive", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_full_restore", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_full_heal", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_hp_up", 0xDB46, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_dragon_fang", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.tohjo_falls_moon_stone", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_26_max_elixer", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_27_tm_solarbeam", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_27_rare_candy", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_29_potion", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_31_potion", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_31_poke_ball", 0xDB47, [0], false);
            mapper.AssertAreEqual("event_flags.route_32_great_ball", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_32_repel", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_35_tm_rollout", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_42_ultra_ball", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_42_super_potion", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_43_max_ether", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_44_max_revive", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_44_ultra_ball", 0xDB48, [0], false);
            mapper.AssertAreEqual("event_flags.route_45_nugget", 0xDB49, [192], false);
            mapper.AssertAreEqual("event_flags.route_45_revive", 0xDB49, [192], false);
            mapper.AssertAreEqual("event_flags.route_45_elixer", 0xDB49, [192], false);
            mapper.AssertAreEqual("event_flags.route_45_max_potion", 0xDB49, [192], false);
            mapper.AssertAreEqual("event_flags.route_46_x_speed", 0xDB49, [192], false);
            mapper.AssertAreEqual("event_flags.rival_new_bark_town", 0xDB49, [192], false);
            mapper.AssertAreEqual("event_flags.rival_cherrygrove_city", 0xDB49, [192], true);
            mapper.AssertAreEqual("event_flags.rival_azalea_town", 0xDB49, [192], true);
            mapper.AssertAreEqual("event_flags.rival_team_rocket_base", 0xDB4A, [207], true);
            mapper.AssertAreEqual("event_flags.rival_goldenrod_underground", 0xDB4A, [207], true);
            mapper.AssertAreEqual("event_flags.rival_victory_road", 0xDB4A, [207], true);
            mapper.AssertAreEqual("event_flags.rival_olivine_city", 0xDB4A, [207], true);
            mapper.AssertAreEqual("event_flags.rival_sprout_tower", 0xDB4A, [207], false);
            mapper.AssertAreEqual("event_flags.rival_burned_tower", 0xDB4A, [207], false);
            mapper.AssertAreEqual("event_flags.rival_dragons_den", 0xDB4A, [207], true);
            mapper.AssertAreEqual("event_flags.players_house_mom_1", 0xDB4A, [207], true);
            mapper.AssertAreEqual("event_flags.players_house_mom_2", 0xDB4B, [104], false);
            mapper.AssertAreEqual("event_flags.mr_pokemons_house_oak", 0xDB4B, [104], false);
            mapper.AssertAreEqual("event_flags.violet_city_earl", 0xDB4B, [104], false);
            mapper.AssertAreEqual("event_flags.earls_academy_earl", 0xDB4B, [104], true);
            mapper.AssertAreEqual("event_flags.goldenrod_city_rocket_scout", 0xDB4B, [104], false);
            mapper.AssertAreEqual("event_flags.goldenrod_city_rocket_takeover", 0xDB4B, [104], true);
            mapper.AssertAreEqual("event_flags.radio_tower_rocket_takeover", 0xDB4B, [104], true);
            mapper.AssertAreEqual("event_flags.goldenrod_city_civilians", 0xDB4B, [104], false);
            mapper.AssertAreEqual("event_flags.radio_tower_civilians_after", 0xDB4C, [57], true);
            mapper.AssertAreEqual("event_flags.radio_tower_blackbelt_blocks_stairs", 0xDB4C, [57], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_jasmine", 0xDB4C, [57], false);
            mapper.AssertAreEqual("event_flags.olivine_gym_jasmine", 0xDB4C, [57], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_lance", 0xDB4C, [57], true);
            mapper.AssertAreEqual("event_flags.mahogany_mart_lance_and_dragonite", 0xDB4C, [57], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_lance", 0xDB4C, [57], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_lance_passwords", 0xDB4C, [57], false);
            mapper.AssertAreEqual("event_flags.dragons_den_clair", 0xDB4D, [225], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_security_grunts", 0xDB4D, [225], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_population", 0xDB4D, [225], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_executive", 0xDB4D, [225], false);
            mapper.AssertAreEqual("event_flags.route_43_gate_rockets", 0xDB4D, [225], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_executive", 0xDB4D, [225], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_grunt_with_executive", 0xDB4D, [225], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_dragonite", 0xDB4D, [225], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_electrode_1", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_electrode_2", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_electrode_3", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.blackthorn_city_super_nerd_blocks_gym", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.blackthorn_city_super_nerd_does_not_block_gym", 0xDB4E, [16], true);
            mapper.AssertAreEqual("event_flags.day_care_man_in_day_care", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.day_care_man_on_route_34", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.day_care_mon_1", 0xDB4E, [16], false);
            mapper.AssertAreEqual("event_flags.day_care_mon_2", 0xDB4F, [50], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd", 0xDB4F, [50], true);
            mapper.AssertAreEqual("event_flags.route_34_ilex_forest_gate_teacher_behind_counter", 0xDB4F, [50], false);
            mapper.AssertAreEqual("event_flags.route_34_ilex_forest_gate_lass", 0xDB4F, [50], false);
            mapper.AssertAreEqual("event_flags.route_34_ilex_forest_gate_teacher_in_walkway", 0xDB4F, [50], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_lass", 0xDB4F, [50], true);
            mapper.AssertAreEqual("event_flags.copycat_1", 0xDB4F, [50], false);
            mapper.AssertAreEqual("event_flags.copycat_2", 0xDB4F, [50], false);
            mapper.AssertAreEqual("event_flags.goldenrod_sale_off", 0xDB50, [25], true);
            mapper.AssertAreEqual("event_flags.goldenrod_sale_on", 0xDB50, [25], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_apprentice", 0xDB50, [25], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_charcoal_master", 0xDB50, [25], true);
            mapper.AssertAreEqual("event_flags.charcoal_kiln_farfetch_d", 0xDB50, [25], false);
            mapper.AssertAreEqual("event_flags.charcoal_kiln_apprentice", 0xDB50, [25], false);
            mapper.AssertAreEqual("event_flags.charcoal_kiln_boss", 0xDB50, [25], false);
            mapper.AssertAreEqual("event_flags.route_36_sudowoodo", 0xDB51, [162], false);
            mapper.AssertAreEqual("event_flags.azalea_town_slowpokes", 0xDB51, [162], true);
            mapper.AssertAreEqual("event_flags.azalea_town_slowpoketail_rocket", 0xDB51, [162], false);
            mapper.AssertAreEqual("event_flags.slowpoke_well_slowpokes", 0xDB51, [162], false);
            mapper.AssertAreEqual("event_flags.slowpoke_well_rockets", 0xDB51, [162], false);
            mapper.AssertAreEqual("event_flags.kurts_house_slowpoke", 0xDB51, [162], true);
            mapper.AssertAreEqual("event_flags.guide_gent_in_his_house", 0xDB51, [162], false);
            mapper.AssertAreEqual("event_flags.guide_gent_visible_in_cherrygrove", 0xDB51, [162], true);
            mapper.AssertAreEqual("event_flags.elms_aide_in_violet_pokemon_center", 0xDB52, [29], true);
            mapper.AssertAreEqual("event_flags.elms_aide_in_lab", 0xDB52, [29], false);
            mapper.AssertAreEqual("event_flags.cop_in_elms_lab", 0xDB52, [29], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_outside_scientist", 0xDB52, [29], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_research_center_scientist", 0xDB52, [29], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_inner_chamber_tourists", 0xDB52, [29], false);
            mapper.AssertAreEqual("event_flags.boulder_in_blackthorn_gym_1", 0xDB52, [29], false);
            mapper.AssertAreEqual("event_flags.boulder_in_blackthorn_gym_2", 0xDB52, [29], false);
            mapper.AssertAreEqual("event_flags.boulder_in_blackthorn_gym_3", 0xDB53, [224], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_1", 0xDB53, [224], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_2", 0xDB53, [224], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_3", 0xDB53, [224], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_4", 0xDB53, [224], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_1a", 0xDB53, [224], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_2a", 0xDB53, [224], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_3a", 0xDB53, [224], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_4a", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.mystery_gift_delivery_guy", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.met_bill", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.ecruteak_poke_center_bill", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.route_30_battle", 0xDB54, [239], false);
            mapper.AssertAreEqual("event_flags.route_30_youngster_joey", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_1a", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_2a", 0xDB54, [239], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_3a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_4a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_5a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_6a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_7a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_8a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_9a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_10a", 0xDB55, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_1b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_2b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_3b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_4b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_5b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_6b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_7b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_8b", 0xDB56, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_9b", 0xDB57, [179], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_10b", 0xDB57, [179], true);
            mapper.AssertAreEqual("event_flags.olivine_port_sailor_at_gangway", 0xDB57, [179], false);
            mapper.AssertAreEqual("event_flags.vermilion_port_sailor_at_gangway", 0xDB57, [179], false);
            mapper.AssertAreEqual("event_flags.fast_ship_1f_gentleman", 0xDB57, [179], true);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_nnw_nne_ne_sailor", 0xDB57, [179], true);
            mapper.AssertAreEqual("event_flags.fast_ship_b1f_sailor_left", 0xDB57, [179], false);
            mapper.AssertAreEqual("event_flags.fast_ship_b1f_sailor_right", 0xDB57, [179], true);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_se_sse_gentleman", 0xDB58, [106], false);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_se_sse_captains_cabin_twin_1", 0xDB58, [106], true);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_se_sse_captains_cabin_twin_2", 0xDB58, [106], false);
            mapper.AssertAreEqual("event_flags.olivine_port_passage_pokefan_m", 0xDB58, [106], true);
            mapper.AssertAreEqual("event_flags.route_35_national_park_gate_youngster", 0xDB58, [106], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_civilians", 0xDB58, [106], true);
            mapper.AssertAreEqual("event_flags.mahogany_mart_owners", 0xDB58, [106], true);
            mapper.AssertAreEqual("event_flags.olivine_port_sprites_before_hall_of_fame", 0xDB58, [106], false);
            mapper.AssertAreEqual("event_flags.olivine_port_sprites_after_hall_of_fame", 0xDB59, [189], true);
            mapper.AssertAreEqual("event_flags.fast_ship_passengers_first_trip", 0xDB59, [189], false);
            mapper.AssertAreEqual("event_flags.fast_ship_passengers_eastbound", 0xDB59, [189], true);
            mapper.AssertAreEqual("event_flags.fast_ship_passengers_westbound", 0xDB59, [189], true);
            mapper.AssertAreEqual("event_flags.tin_tower_roof_ho_oh", 0xDB59, [189], true);
            mapper.AssertAreEqual("event_flags.whirl_island_lugia_chamber_lugia", 0xDB59, [189], true);
            mapper.AssertAreEqual("event_flags.kurts_house_kurt_1", 0xDB59, [189], false);
            mapper.AssertAreEqual("event_flags.kurts_house_kurt_2", 0xDB59, [189], true);
            mapper.AssertAreEqual("event_flags.slowpoke_well_kurt", 0xDB5A, [30], false);
            mapper.AssertAreEqual("event_flags.players_house_2f_console", 0xDB5A, [30], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_doll_1", 0xDB5A, [30], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_doll_2", 0xDB5A, [30], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_big_doll", 0xDB5A, [30], true);
            mapper.AssertAreEqual("event_flags.route_35_national_park_gate_officer_contest_day", 0xDB5A, [30], false);
            mapper.AssertAreEqual("event_flags.route_35_national_park_gate_officer_not_contest_day", 0xDB5A, [30], false);
            mapper.AssertAreEqual("event_flags.route_36_national_park_gate_officer_contest_day", 0xDB5A, [30], false);
            mapper.AssertAreEqual("event_flags.route_36_national_park_gate_officer_not_contest_day", 0xDB5B, [38], false);
            mapper.AssertAreEqual("event_flags.goldenrod_train_station_gentleman", 0xDB5B, [38], true);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_beasts_1", 0xDB5B, [38], true);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_beasts_2", 0xDB5B, [38], false);
            mapper.AssertAreEqual("event_flags.blackthorn_city_gramps_blocks_dragons_den", 0xDB5B, [38], false);
            mapper.AssertAreEqual("event_flags.blackthorn_city_gramps_not_blocking_dragons_den", 0xDB5B, [38], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_kabuto_chamber_receptionist", 0xDB5B, [38], false);
            mapper.AssertAreEqual("event_flags.opened_mt_silver", 0xDB5B, [38], false);
            mapper.AssertAreEqual("event_flags.fought_snorlax", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_red_gyarados", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_granny", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_gramps", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_older_haircut_brother", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_younger_haircut_brother", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.mahogany_town_pokefan_m_blocks_east", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.mahogany_town_pokefan_m_blocks_gym", 0xDB5C, [0], false);
            mapper.AssertAreEqual("event_flags.route_32_frieda_of_friday", 0xDB5D, [130], false);
            mapper.AssertAreEqual("event_flags.route_29_tuscany_of_tuesday", 0xDB5D, [130], true);
            mapper.AssertAreEqual("event_flags.route_36_arthur_of_thursday", 0xDB5D, [130], false);
            mapper.AssertAreEqual("event_flags.route_37_sunny_of_sunday", 0xDB5D, [130], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_wesley_of_wednesday", 0xDB5D, [130], false);
            mapper.AssertAreEqual("event_flags.blackthorn_city_santos_of_saturday", 0xDB5D, [130], false);
            mapper.AssertAreEqual("event_flags.route_40_monica_of_monday", 0xDB5D, [130], false);
            mapper.AssertAreEqual("event_flags.lances_room_oak_and_mary", 0xDB5D, [130], true);
            mapper.AssertAreEqual("event_flags.union_cave_b2f_lapras", 0xDB5E, [68], false);
            mapper.AssertAreEqual("event_flags.team_rocket_disbanded", 0xDB5E, [68], false);
            mapper.AssertAreEqual("event_flags.red_in_mt_silver", 0xDB5E, [68], true);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_5f_happiness_lady", 0xDB5E, [68], false);
            mapper.AssertAreEqual("event_flags.burned_tower_morty", 0xDB5E, [68], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_eusine", 0xDB5E, [68], false);
            mapper.AssertAreEqual("event_flags.rang_clear_bell_1", 0xDB5E, [68], true);
            mapper.AssertAreEqual("event_flags.rang_clear_bell_2", 0xDB5E, [68], false);
            mapper.AssertAreEqual("event_flags.floria_at_flower_shop", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.floria_at_sudowoodo", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.goldenrod_city_move_tutor", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.goldenrod_game_corner_move_tutor", 0xDB5F, [247], false);
            mapper.AssertAreEqual("event_flags.route_24_rocket", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.cerulean_gym_rocket", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.route_25_misty_boyfriend", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.trainers_in_cerulean_gym", 0xDB5F, [247], true);
            mapper.AssertAreEqual("event_flags.vermilion_city_snorlax", 0xDB60, [204], false);
            mapper.AssertAreEqual("event_flags.route_5_6_pokefan_m_blocks_underground_path", 0xDB60, [204], false);
            mapper.AssertAreEqual("event_flags.saffron_train_station_population", 0xDB60, [204], true);
            mapper.AssertAreEqual("event_flags.copycats_house_2f_doll", 0xDB60, [204], true);
            mapper.AssertAreEqual("event_flags.vermilion_fan_club_doll", 0xDB60, [204], false);
            mapper.AssertAreEqual("event_flags.blue_in_cinnabar", 0xDB60, [204], false);
            mapper.AssertAreEqual("event_flags.viridian_gym_blue", 0xDB60, [204], true);
            mapper.AssertAreEqual("event_flags.seafoam_gym_gym_guide", 0xDB60, [204], true);
            mapper.AssertAreEqual("event_flags.mt_moon_square_rock", 0xDB61, [10], false);
            mapper.AssertAreEqual("event_flags.mt_moon_square_clefairy", 0xDB61, [10], true);
            mapper.AssertAreEqual("event_flags.mt_moon_rival", 0xDB61, [10], false);
            mapper.AssertAreEqual("event_flags.indigo_plateau_pokecenter_rival", 0xDB61, [10], true);
            mapper.AssertAreEqual("event_flags.teleport_guy", 0xDB61, [10], false);
            mapper.AssertAreEqual("event_flags.picked_up_focus_band", 0xDB61, [10], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_elixer", 0xDB61, [10], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_tm_steel_wing", 0xDB61, [10], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_iron", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_pp_up", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_revive", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_dire_hit", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_max_potion", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_carbos", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_elixer", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.route_4_hp_up", 0xDB62, [0], false);
            mapper.AssertAreEqual("event_flags.route_12_calcium", 0xDB63, [224], false);
            mapper.AssertAreEqual("event_flags.route_12_nugget", 0xDB63, [224], false);
            mapper.AssertAreEqual("event_flags.route_15_pp_up", 0xDB63, [224], false);
            mapper.AssertAreEqual("event_flags.route_25_protein", 0xDB63, [224], false);
            mapper.AssertAreEqual("event_flags.kurts_house_granddaughter_1", 0xDB63, [224], false);
            mapper.AssertAreEqual("event_flags.kurts_house_granddaughter_2", 0xDB63, [224], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_outside_tourist_fisher", 0xDB63, [224], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_outside_tourist_youngsters", 0xDB63, [224], true);
            mapper.AssertAreEqual("event_flags.dragon_shrine_clair", 0xDB64, [11], true);
            mapper.AssertAreEqual("event_flags.battle_tower_battle_room_youngster", 0xDB64, [11], true);
            mapper.AssertAreEqual("event_flags.players_house_1f_neighbor", 0xDB64, [11], false);
            mapper.AssertAreEqual("event_flags.players_neighbors_house_neighbor", 0xDB64, [11], true);
            mapper.AssertAreEqual("event_flags.picked_up_gold_berry_from_ho_oh_item_room", 0xDB64, [11], false);
            mapper.AssertAreEqual("event_flags.picked_up_mysteryberry_from_ho_oh_item_room", 0xDB64, [11], false);
            mapper.AssertAreEqual("event_flags.picked_up_revival_herb_from_ho_oh_item_room", 0xDB64, [11], false);
            mapper.AssertAreEqual("event_flags.picked_up_charcoal_from_ho_oh_item_room", 0xDB64, [11], false);
            mapper.AssertAreEqual("event_flags.picked_up_berry_from_kabuto_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_psncureberry_from_kabuto_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_heal_powder_from_kabuto_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_energypowder_from_kabuto_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_mysteryberry_from_omanyte_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_mystic_water_from_omanyte_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_stardust_from_omanyte_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_star_piece_from_omanyte_item_room", 0xDB65, [0], false);
            mapper.AssertAreEqual("event_flags.picked_up_gold_berry_from_aerodactyl_item_room", 0xDB66, [48], false);
            mapper.AssertAreEqual("event_flags.picked_up_moon_stone_from_aerodactyl_item_room", 0xDB66, [48], false);
            mapper.AssertAreEqual("event_flags.picked_up_heal_powder_from_aerodactyl_item_room", 0xDB66, [48], false);
            mapper.AssertAreEqual("event_flags.picked_up_energy_root_from_aerodactyl_item_room", 0xDB66, [48], false);
            mapper.AssertAreEqual("event_flags.azalea_town_kurt", 0xDB66, [48], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_kurt", 0xDB66, [48], true);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_max_potion", 0xDB66, [48], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_nugget", 0xDB66, [48], false);
            mapper.AssertAreEqual("event_flags.ecruteak_gym_gramps", 0xDB67, [246], false);
            mapper.AssertAreEqual("event_flags.ecruteak_city_gramps", 0xDB67, [246], true);
            mapper.AssertAreEqual("event_flags.eusine_in_burned_tower", 0xDB67, [246], true);
            mapper.AssertAreEqual("event_flags.wise_trios_room_wise_trio_1", 0xDB67, [246], false);
            mapper.AssertAreEqual("event_flags.wise_trios_room_wise_trio_2", 0xDB67, [246], true);
            mapper.AssertAreEqual("event_flags.cianwood_city_eusine", 0xDB67, [246], true);
            mapper.AssertAreEqual("event_flags.saw_suicune_at_cianwood_city", 0xDB67, [246], true);
            mapper.AssertAreEqual("event_flags.saw_suicune_on_route_42", 0xDB67, [246], true);
            mapper.AssertAreEqual("event_flags.saw_suicune_on_route_36", 0xDB68, [225], true);
            mapper.AssertAreEqual("event_flags.ecruteak_tin_tower_entrance_wandering_sage", 0xDB68, [225], false);
            mapper.AssertAreEqual("event_flags.tin_tower_1f_suicune", 0xDB68, [225], false);
            mapper.AssertAreEqual("event_flags.tin_tower_1f_entei", 0xDB68, [225], false);
            mapper.AssertAreEqual("event_flags.tin_tower_1f_raikou", 0xDB68, [225], false);
            mapper.AssertAreEqual("event_flags.tin_tower_1f_eusine", 0xDB68, [225], true);
            mapper.AssertAreEqual("event_flags.tin_tower_1f_wise_trio_1", 0xDB68, [225], true);
            mapper.AssertAreEqual("event_flags.set_when_fought_ho_oh", 0xDB68, [225], true);
            mapper.AssertAreEqual("event_flags.route_30_antidote", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_x_attack", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_antidote", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_ether", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.route_34_nugget", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.route_44_max_repel", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.ice_path_1f_protein", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_calcium", 0xDB69, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_max_elixer", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_ultra_ball", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_2_calcium", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_2_ultra_ball", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_2_pp_up", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.tin_tower_1f_wise_trio_2", 0xDB6A, [32], true);
            mapper.AssertAreEqual("event_flags.tin_tower_6f_max_potion", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.tin_tower_9f_hp_up", 0xDB6A, [32], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_iron", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_ultra_ball", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_full_restore", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_max_ether", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_pp_up", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.radio_tower_5f_ultra_ball", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_dire_hit", 0xDB6B, [128], false);
            mapper.AssertAreEqual("event_flags.battle_tower_open_civilians", 0xDB6B, [128], true);
            mapper.AssertAreEqual("roamers.roamers_current_map_index", 0xDFE4, [3], 3);
            mapper.AssertAreEqual("roamers.roamers_currnet_map_group", 0xDFE5, [24], "New Bark");
            mapper.AssertAreEqual("roamers.roamers_last_map_number", 0xDFE6, [4], 4);
            mapper.AssertAreEqual("roamers.roamers_last_map_group", 0xDFE7, [24], "New Bark");
            mapper.AssertAreEqual("roamers.0.species", 0xDFCF, [0], null);
            mapper.AssertAreEqual("roamers.0.dex_number", 0xDFCF, [0], null);
            mapper.AssertAreEqual("roamers.0.level", 0xDFD0, [0], 0);
            mapper.AssertAreEqual("roamers.0.map_name", 0xDFD1, [255, 255], null);
            mapper.AssertAreEqual("roamers.0.map_group", 0xDFD1, [255], null);
            mapper.AssertAreEqual("roamers.0.map_index", 0xDFD2, [255], 255);
            mapper.AssertAreEqual("roamers.0.hp", 0xDFD3, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.attack", 0xDFD4, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.defense", 0xDFD4, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.speed", 0xDFD5, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.special", 0xDFD5, [0], 0);
            mapper.AssertAreEqual("roamers.1.species", 0xDFD6, [0], null);
            mapper.AssertAreEqual("roamers.1.dex_number", 0xDFD6, [0], null);
            mapper.AssertAreEqual("roamers.1.level", 0xDFD7, [0], 0);
            mapper.AssertAreEqual("roamers.1.map_name", 0xDFD8, [255, 255], null);
            mapper.AssertAreEqual("roamers.1.map_group", 0xDFD8, [255], null);
            mapper.AssertAreEqual("roamers.1.map_index", 0xDFD9, [255], 255);
            mapper.AssertAreEqual("roamers.1.hp", 0xDFDA, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.attack", 0xDFDB, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.defense", 0xDFDB, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.speed", 0xDFDC, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.special", 0xDFDC, [0], 0);
            mapper.AssertAreEqual("roamers.2.species", 0xDFDD, [0], null);
            mapper.AssertAreEqual("roamers.2.dex_number", 0xDFDD, [0], null);
            mapper.AssertAreEqual("roamers.2.level", 0xDFDE, [0], 0);
            mapper.AssertAreEqual("roamers.2.map_name", 0xDFDF, [255, 255], null);
            mapper.AssertAreEqual("roamers.2.map_group", 0xDFDF, [255], null);
            mapper.AssertAreEqual("roamers.2.map_index", 0xDFE0, [255], 255);
            mapper.AssertAreEqual("roamers.2.hp", 0xDFE1, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.attack", 0xDFE2, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.defense", 0xDFE2, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.speed", 0xDFE3, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.special", 0xDFE3, [0], 0);
            mapper.AssertAreEqual("battle.mode", 0xD22D, [1], "Wild");
            mapper.AssertAreEqual("battle.type", 0xD230, [0], "NORMAL");
            mapper.AssertAreEqual("battle.player.party_position", 0xD0D4, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0xC62D, [173], "Berry");
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0xC62C, [158], "Totodile");
            mapper.AssertAreEqual("battle.player.active_pokemon.dex_number", 0xC62C, [158], 158);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0xC64A, [21], "Water");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0xC64B, [21], "Water");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0xC639, [5], 5);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0xC63C, [0, 19], 19);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0xC63E, [0, 21], 21);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0xC640, [0, 12], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0xC642, [0, 12], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0xC644, [0, 10], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0xC646, [0, 10], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0xC648, [0, 10], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0xC6CC, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0xC6CD, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0xC6CE, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0xC6CF, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0xC6D0, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0xC6D1, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0xC6D2, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0xC62E, [10], "Scratch");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0xC634, [34], 34);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", 0xC634, [34], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0xC62F, [43], "Leer");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0xC635, [30], 30);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", 0xC635, [30], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0xC630, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0xC636, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", 0xC636, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0xC631, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0xC637, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", 0xC637, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.confused", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.toxic", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.leech_seed", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.curse", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.in_love", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.nightmare", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.protect", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.identified", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.perish", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.endure", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rollout", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.curled", 0xC669, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bide", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rampage", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.in_loop", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.flinched", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.charged", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.underground", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.flying", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bypass_accuracy", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.mist", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.focus_energy", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.substitute", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.recharge", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rage", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.transformed", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.encored", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.lock_on", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.destiny_bond", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.cant_run", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.rollout", 0xC672, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.confuse", 0xC673, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.toxic", 0xC674, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.disable", 0xC675, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.encore", 0xC676, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.perish", 0xC677, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.fury_cutter", 0xC678, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.protect", 0xC679, [0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0xD26B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.trainer", 0xD22F, [0], null);
            mapper.AssertAreEqual("battle.opponent.id", 0xD231, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team_count", 0xD280, [0], 0);
            mapper.AssertAreEqual("battle.opponent.party_position", 0xC663, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0xD206, [16], "Pidgey");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0xD206, [16], 16);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0xD224, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0xD225, [2], "Flying");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0xD207, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0xD12D, [2], 2);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0xD214, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0xD208, [33], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0xD20E, [34], 34);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", 0xD20E, [34], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0xD209, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0xD20A, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0xD210, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", 0xD210, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0xD20B, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0xD211, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", 0xD211, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0xD216, [0, 7], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0xD218, [0, 13], 13);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0xD21A, [0, 7], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0xD21C, [0, 7], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0xD220, [0, 6], 6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0xD222, [0, 6], 6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0xD21E, [0, 7], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0xC6D4, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0xC6D5, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0xC6D6, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0xC6D7, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0xC6D8, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0xC6D9, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0xC6DA, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.enemy_mon_end", 0xD22D, [1], 1);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.hp", 0xD226, [40, 45], 10285);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.attack", 0xD228, [40, 56], 10296);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.defense", 0xD22A, [35, 255], 9215);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.speed", 0xD22C, [55, 1], 14081);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.special_attack", 0xD22E, [16, 0], 4096);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.special_defense", 0xD230, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0xD20C, [140], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0xD20C, [140], 12);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0xD20D, [210], 13);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special", 0xD20D, [210], 2);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.confused", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.toxic", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.leech_seed", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.curse", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.in_love", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.nightmare", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.protect", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.identified", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.perish", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.endure", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rollout", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.curled", 0xC66E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bide", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rampage", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.in_loop", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.flinched", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.charged", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.underground", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.flying", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bypass_accuracy", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.mist", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.focus_energy", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.substitute", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.recharge", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rage", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.transformed", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.encored", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.lock_on", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.destiny_bond", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.cant_run", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.rollout", 0xC67A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.confuse", 0xC67B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.toxic", 0xC67C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.disable", 0xC67D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.encore", 0xC67E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.perish", 0xC67F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.fury_cutter", 0xC680, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.protect", 0xC681, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0xD288, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0xD288, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0xD3EA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0xD2A7, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0xD290, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xD28E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0xD289, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0xD2A3, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0xD2A4, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0xD2A8, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0xD28A, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0xD29F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0xD29F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0xD28B, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0xD2A0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0xD2A0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0xD28C, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0xD2A1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0xD2A1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0xD28D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0xD2A2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0xD2A2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0xD2AA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0xD2AC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0xD2AE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0xD2B0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0xD2B2, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0xD2B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0xD2B6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0xD29D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0xD29D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0xD29E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special", 0xD29E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0xD293, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0xD295, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0xD297, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0xD299, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special", 0xD29B, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0xD2B8, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0xD2B8, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0xD3F5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0xD2D7, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0xD2C0, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xD2BE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0xD2B9, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0xD2D3, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0xD2D4, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0xD2D8, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0xD2BA, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0xD2CF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0xD2CF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0xD2BB, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0xD2D0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0xD2D0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0xD2BC, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0xD2D1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0xD2D1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0xD2BD, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0xD2D2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0xD2D2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0xD2DA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0xD2DC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0xD2DE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0xD2E0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0xD2E2, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0xD2E4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0xD2E6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0xD2CD, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0xD2CD, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0xD2CE, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special", 0xD2CE, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0xD2C3, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0xD2C5, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0xD2C7, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0xD2C9, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special", 0xD2CB, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0xD2E8, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0xD2E8, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0xD400, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0xD307, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0xD2F0, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xD2EE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0xD2E9, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0xD303, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0xD304, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0xD308, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0xD2EA, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0xD2FF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0xD2FF, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0xD2EB, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0xD300, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0xD300, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0xD2EC, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0xD301, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0xD301, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0xD2ED, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0xD302, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0xD302, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0xD30A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0xD30C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0xD30E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0xD310, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0xD312, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0xD314, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0xD316, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0xD2FD, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0xD2FD, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0xD2FE, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special", 0xD2FE, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0xD2F3, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0xD2F5, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0xD2F7, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0xD2F9, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special", 0xD2FB, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0xD318, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0xD318, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0xD40B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0xD337, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0xD320, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xD31E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0xD319, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0xD333, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0xD334, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0xD338, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0xD31A, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0xD32F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0xD32F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0xD31B, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0xD330, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0xD330, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0xD31C, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0xD331, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0xD331, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0xD31D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0xD332, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0xD332, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0xD33A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0xD33C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0xD33E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0xD340, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0xD342, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0xD344, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0xD346, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0xD32D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0xD32D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0xD32E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special", 0xD32E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0xD323, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0xD325, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0xD327, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0xD329, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special", 0xD32B, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0xD348, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0xD348, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0xD416, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0xD367, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0xD350, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xD34E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0xD349, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0xD363, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0xD364, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0xD368, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0xD34A, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0xD35F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0xD35F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0xD34B, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0xD360, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0xD360, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0xD34C, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0xD361, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0xD361, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0xD34D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0xD362, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0xD362, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0xD36A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0xD36C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0xD36E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0xD370, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0xD372, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0xD374, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0xD376, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0xD35D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0xD35D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0xD35E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special", 0xD35E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0xD353, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0xD355, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0xD357, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0xD359, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special", 0xD35B, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0xD378, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0xD378, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0xD421, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0xD397, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0xD380, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xD37E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0xD379, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0xD393, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0xD394, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0xD398, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0xD37A, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0xD38F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0xD38F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0xD37B, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0xD390, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0xD390, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0xD37C, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0xD391, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0xD391, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0xD37D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0xD392, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0xD392, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0xD39A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0xD39C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0xD39E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0xD3A0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0xD3A2, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0xD3A4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0xD3A6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0xD38D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0xD38D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0xD38E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special", 0xD38E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0xD383, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0xD385, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0xD387, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0xD389, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special", 0xD38B, [0, 0], 0);
            mapper.AssertAreEqual("battle.field.player.safeguard", 0xC6FF, [0], false);
            mapper.AssertAreEqual("battle.field.player.reflect", 0xC6FF, [0], false);
            mapper.AssertAreEqual("battle.field.player.lightscreen", 0xC6FF, [0], false);
            mapper.AssertAreEqual("battle.field.player.safeguard_count", 0xC701, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightscreen_count", 0xC702, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflect_count", 0xC703, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.safeguard", 0xC700, [0], false);
            mapper.AssertAreEqual("battle.field.opponent.reflect", 0xC700, [0], false);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen", 0xC700, [0], false);
            mapper.AssertAreEqual("battle.field.opponent.safeguard_count", 0xCBE3, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen_count", 0xCBE4, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.reflect_count", 0xCBE5, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0xC70A, [0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0xC70B, [0], 0);
            mapper.AssertAreEqual("battle.other.current_damage", 0xD256, [0, 0], 0);
            mapper.AssertAreEqual("battle.other.low_health_alarm", 0xC6FD, [0], "Enabled");
            mapper.AssertAreEqual("battle.other.miss", 0xC667, [0], 0);
            mapper.AssertAreEqual("battle.other.turn_ended", 0xC6B4, [0], 0);
            mapper.AssertAreEqual("battle.other.player_turn_taken", 0xC6DD, [1], 1);
            mapper.AssertAreEqual("battle.other.enemy_turn_taken", 0xC6DC, [1], 1);
            mapper.AssertAreEqual("battle.other.battle_start", 0xD264, [0], 0);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_0", 0xC664, [1], true);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_1", 0xC664, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_2", 0xC664, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_3", 0xC664, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_4", 0xC664, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_5", 0xC664, [1], false);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0xD0EE, [0], 0);
            mapper.AssertAreEqual("battle.other.text_buffer", 0xD073, [132, 173, 164, 172, 184, 80, 191, 56, 23, 234, 6], "Enemy");
            mapper.AssertAreEqual("rival.name", 0xD493, [230, 230, 230, 80, 145, 132, 131, 80, 134, 145, 132], "   ");
            mapper.AssertAreEqual("audio.map_music", 0xC2C0, [52], 52);
            mapper.AssertAreEqual("audio.current_sound", 0xC2BF, [172], 172);
            mapper.AssertAreEqual("audio.music_id", 0xC29D, [172, 0], 44032);
            mapper.AssertAreEqual("audio.music_bank", 0xC29F, [60], 60);
            mapper.AssertAreEqual("audio.channels.0", 0xC101, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channels.1", 0xC133, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channels.2", 0xC165, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channels.3", 0xC197, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.4", 0xC1C9, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.5", 0xC1FB, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.6", 0xC22D, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.7", 0xC25F, [0, 0], 0);
            mapper.AssertAreEqual("screen.text.prompt", 0xC606, [122], "");
            mapper.AssertAreEqual("screen.menu.current_item", 0xCC26, [0], 0);
            mapper.AssertAreEqual("screen.menu.menu_flags", 0xCF81, [64], 64);
            mapper.AssertAreEqual("screen.menu.menu_cursor_position", 0xCF88, [1], 1);
            mapper.AssertAreEqual("screen.menu.party_menu_cursor", 0xD0D8, [0], 0);
            mapper.AssertAreEqual("screen.menu.items_pocket_cursor", 0xD0D9, [0], 0);
            mapper.AssertAreEqual("screen.menu.key_items_pocket_cursor", 0xD0DA, [0], 0);
            mapper.AssertAreEqual("screen.menu.balls_pocket_cursor", 0xD0DB, [0], 0);
            mapper.AssertAreEqual("screen.menu.tmhm_pocket_cursor", 0xD0DC, [0], 0);
            mapper.AssertAreEqual("screen.menu.items_pocket_scroll_position", 0xD0DF, [0], 0);
            mapper.AssertAreEqual("screen.menu.key_items_pocket_scroll_position", 0xD0E0, [0], 0);
            mapper.AssertAreEqual("screen.menu.balls_pocket_scroll_position", 0xD0E1, [0], 0);
            mapper.AssertAreEqual("screen.menu.tmhm_pocket_scroll_position", 0xD0E2, [0], 0);
            mapper.AssertAreEqual("screen.menu.pc_items_cursor", 0xD0D7, [0], 0);
            mapper.AssertAreEqual("screen.menu.pc_items_scroll_position", 0xD0DD, [0], 0);
            mapper.AssertAreEqual("screen.column_1.tiles.0", 0x980C, [0], 0);
            mapper.AssertAreEqual("screen.column_1.tiles.1", 0x982C, [1], 1);
            mapper.AssertAreEqual("screen.column_1.tiles.2", 0x984C, [2], 2);
            mapper.AssertAreEqual("screen.column_1.tiles.3", 0x986C, [3], 3);
            mapper.AssertAreEqual("screen.column_1.tiles.4", 0x988C, [4], 4);
            mapper.AssertAreEqual("screen.column_1.tiles.5", 0x98AC, [5], 5);
            mapper.AssertAreEqual("screen.column_1.tiles.6", 0x98CC, [6], 6);
            mapper.AssertAreEqual("options.text_speed", 0xCFCC, [225], "Fast");
            mapper.AssertAreEqual("options.no_text_scroll", 0xCFCC, [225], false);
            mapper.AssertAreEqual("options.sound", 0xCFCC, [225], true);
            mapper.AssertAreEqual("options.battle_style", 0xCFCC, [225], true);
            mapper.AssertAreEqual("options.battle_animations", 0xCFCC, [225], true);
            mapper.AssertAreEqual("game_time.hours", 0xD4C4, [0, 0], 0);
            mapper.AssertAreEqual("game_time.minutes", 0xD4C6, [3], 3);
            mapper.AssertAreEqual("game_time.seconds", 0xD4C7, [29], 29);
            mapper.AssertAreEqual("game_time.frames", 0xD4C8, [56], 56);
            mapper.AssertAreEqual("time.current.day", 0xD4CB, [0], "Sunday");
            mapper.AssertAreEqual("time.current.hour", 0xFF94, [10], 10);
            mapper.AssertAreEqual("time.current.minute", 0xFF96, [3], 3);
            mapper.AssertAreEqual("time.current.second", 0xFF98, [48], 48);
            mapper.AssertAreEqual("time.current.dst", 0xD4C2, [128], true);
            mapper.AssertAreEqual("time.current.time_of_day", 0xD269, [1], "Day");
            mapper.AssertAreEqual("time.start.day", 0xD4B6, [0], "Sunday");
            mapper.AssertAreEqual("time.start.hour", 0xD4B7, [9], 9);
            mapper.AssertAreEqual("time.start.minute", 0xD4B8, [59], 59);
            mapper.AssertAreEqual("time.start.second", 0xD4B9, [42], 42);
            mapper.AssertAreEqual("time.rtc.day", 0xFF8D, [0, 0], 0);
            mapper.AssertAreEqual("time.rtc.hour", 0xFF8F, [0], 0);
            mapper.AssertAreEqual("time.rtc.minute", 0xFF90, [4], 4);
            mapper.AssertAreEqual("time.rtc.second", 0xFF91, [6], 6);
            mapper.AssertAreEqual("time.rtc.day_hi", 0xFF8D, [0], 0);
            mapper.AssertAreEqual("time.rtc.day_lo", 0xFF8E, [0], 0);
            mapper.AssertAreEqual("time.game_clock.day", 0xD4B6, [0], "Sunday");
            mapper.AssertAreEqual("input.a", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.b", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.select", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.start", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.right", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.left", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.up", 0xFFA4, [0], false);
            mapper.AssertAreEqual("input.down", 0xFFA4, [0], false);
            mapper.AssertAreEqual("meta.generation", "2");
            mapper.AssertAreEqual("meta.game_name", "Crystal");
            mapper.AssertAreEqual("meta.game_type", "Third Version");
            mapper.AssertAreEqual("meta.state", "Battle");
        }

    }
}
