using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonFireRed : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBA_PokemonFireRed(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x20245B0, [205, 189, 201, 206, 206, 255, 255, 255], "SCOTT");
            mapper.AssertAreEqual("player.gender", 0x20245B8, [0], "Male");
            mapper.AssertAreEqual("player.player_id", 0x20245BA, [189, 65], 16829);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", 0x20, [1, 0], "Bulbasaur");
            mapper.AssertAreEqual("player.active_pokemon.dex_number", 0x20, [1, 0], 1);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0x8, [188, 207, 198, 188, 187, 255, 255, 255, 255, 255], "BULBA");
            mapper.AssertAreEqual("player.active_pokemon.level", 0x54, [8], 8);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0x24, [73, 1, 0, 0], 329);
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0x4, [189, 65], 16829);
            // mapper.AssertAreEqual("player.active_pokemon.ability", 0x48, [35, 42, 93, 60], false);
            // mapper.AssertAreEqual("player.active_pokemon.nature", 0);
            mapper.AssertAreEqual("player.active_pokemon.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.active_pokemon.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("player.active_pokemon.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0x30, [73, 0], "Leech Seed");
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0x36, [10], 10);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0x56, [25, 0], 25);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0x5A, [14, 0], 14);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0x5C, [13, 0], 13);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0x5E, [14, 0], 14);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_attack", 0x60, [15, 0], 15);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_defense", 0x62, [17, 0], 17);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0);
            mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 0x48, [35, 42, 93, 60], 3);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0x48, [35, 42, 93, 60], 17);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0x48, [35, 42, 93, 60], 10);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0x48, [35, 42, 93, 60], 26);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_attack", 0x48, [35, 42, 93, 60], 5);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_defense", 0x48, [35, 42, 93, 60], 30);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0x3B, [6], 6);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_defense", 0x3D, [0], 0);
            // mapper.AssertAreEqual("player.active_pokemon.internals.personality_value", 2999519075);
            mapper.AssertAreEqual("player.active_pokemon.internals.checksum", 0x1C, [147, 106], 27283);
            // mapper.AssertAreEqual("player.active_pokemon.misc.is_egg", 0x28, [0, 90, 0, 0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.language", 0x12, [2], "English");
            // mapper.AssertAreEqual("player.active_pokemon.misc.is_bad_egg", 0x13, [2], false);
            // mapper.AssertAreEqual("player.active_pokemon.misc.has_species", 0x13, [2], true);
            // mapper.AssertAreEqual("player.active_pokemon.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.ot_name", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            //mapper.AssertAreEqual("player.active_pokemon.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.pokerus_status", 0x24, [73], 73);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("player.active_pokemon.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.misc.robbins_obedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("player.team.0.species", 0x20, [1, 0], "Bulbasaur");
            mapper.AssertAreEqual("player.team.0.dex_number", 0x20, [1, 0], 1);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [188, 207, 198, 188, 187, 255, 255, 255, 255, 255], "BULBA");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [8], 8);
            mapper.AssertAreEqual("player.team.0.exp", 0x24, [73, 1, 0, 0], 329);
            mapper.AssertAreEqual("player.team.0.ot_id", 0x4, [189, 65], 16829);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [35, 42, 93, 60], false);
            mapper.AssertAreEqual("player.team.0.nature", 0);
            mapper.AssertAreEqual("player.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0x30, [73, 0], "Leech Seed");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0x36, [10], 10);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0x56, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0x5A, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0x5C, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0x5E, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0x60, [15, 0], 15);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0x62, [17, 0], 17);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 0x48, [35, 42, 93, 60], 3);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0x48, [35, 42, 93, 60], 17);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0x48, [35, 42, 93, 60], 10);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0x48, [35, 42, 93, 60], 26);
            mapper.AssertAreEqual("player.team.0.ivs.special_attack", 0x48, [35, 42, 93, 60], 5);
            mapper.AssertAreEqual("player.team.0.ivs.special_defense", 0x48, [35, 42, 93, 60], 30);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0x3B, [6], 6);
            mapper.AssertAreEqual("player.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.internals.personality_value", 2999519075);
            mapper.AssertAreEqual("player.team.0.internals.checksum", 0x1C, [147, 106], 27283);
            mapper.AssertAreEqual("player.team.0.misc.is_egg", 0x28, [0, 90, 0, 0], false);
            mapper.AssertAreEqual("player.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.misc.ot_name", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            mapper.AssertAreEqual("player.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.pokerus_status", 0x24, [73], 73);
            mapper.AssertAreEqual("player.team.0.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("player.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.robbins_obedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("player.team.1.species", 0x20, [19, 0], "Rattata");
            mapper.AssertAreEqual("player.team.1.dex_number", 0x20, [19, 0], 19);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [204, 187, 206, 255, 255, 255, 255, 255, 255, 255], "RAT");
            mapper.AssertAreEqual("player.team.1.level", 0x54, [2], 2);
            mapper.AssertAreEqual("player.team.1.exp", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("player.team.1.ot_id", 0x4, [189, 65], 16829);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [96, 195, 157, 173], true);
            mapper.AssertAreEqual("player.team.1.nature", 23);
            mapper.AssertAreEqual("player.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0x2E, [39, 0], "Tail Whip");
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0x35, [30], 30);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0x58, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0x5E, [8, 0], 8);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0x60, [5, 0], 5);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0x62, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0x48, [96, 195, 157, 173], 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0x48, [96, 195, 157, 173], 27);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0x48, [96, 195, 157, 173], 16);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0x48, [96, 195, 157, 173], 27);
            mapper.AssertAreEqual("player.team.1.ivs.special_attack", 0x48, [96, 195, 157, 173], 25);
            mapper.AssertAreEqual("player.team.1.ivs.special_defense", 0x48, [96, 195, 157, 173], 22);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.internals.personality_value", 79808973);
            mapper.AssertAreEqual("player.team.1.internals.checksum", 0x1C, [133, 92], 23685);
            mapper.AssertAreEqual("player.team.1.misc.is_egg", 0x28, [0, 70, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.1.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.1.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.misc.ot_name", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            mapper.AssertAreEqual("player.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.pokerus_status", 0x24, [8], 8);
            mapper.AssertAreEqual("player.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.robbins_obedience", 0x2C, [33, 0, 39, 0], 2555937);
            mapper.AssertAreEqual("player.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.nature", 0);
            mapper.AssertAreEqual("player.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.nature", 0);
            mapper.AssertAreEqual("player.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.3.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.3.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.nature", 0);
            mapper.AssertAreEqual("player.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.nature", 0);
            mapper.AssertAreEqual("player.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0x20264CA, [0], false);
            mapper.AssertAreEqual("player.vs_seeker.steps_until_use", 0x2025B8C, [0], 0);
            mapper.AssertAreEqual("player.vs_seeker.steps_until_charged", 0x2025B8D, [0], 0);
            mapper.AssertAreEqual("bag.quantity_decryption_key", 0x202465C, [1, 0], 1);
            mapper.AssertAreEqual("overworld.map_name", 0x2031DBC, [3, 1], "VIRIDIAN_CITY");
            mapper.AssertAreEqual("overworld.map_index", 0x2031DBC, [3, 1], 259);
            mapper.AssertAreEqual("battle.player.party_position", 0x2023BCE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.party_position_2", 0x2023BD2, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.party_position", 0x2023BD2, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.name", 0x20386AE, [72, 1], "RIVAL_OAKS_LAB_CHARMANDER");
            mapper.AssertAreEqual("battle.opponent.trainer", 0x20386AE, [72, 1], "RIVAL_OAKS_LAB_CHARMANDER");
            mapper.AssertAreEqual("battle.opponent.id", 0x20386AE, [72, 1], 328);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x202402A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x2023C3C, [19, 0], "Rattata");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0x2023C3C, [19, 0], 19);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x2023C6C, [204, 187, 206, 206, 187, 206, 187, 255, 33, 0, 0], "RATTATA");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x2023C66, [4], 4);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x2023C80, [64, 0, 0, 0], 64);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x2023C67, [70], 70);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.personality_value", 0x2023C84, [145, 125, 142, 50], 848199057);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x2023C5C, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x2023C6A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.focus_energy", 0x2023C8E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x2023C5D, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x2023C5E, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_1", 0x2023C88, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_2", 0x2023C88, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x2023C78, [205, 189, 201, 206, 206, 255, 255, 255], "SCOTT");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x2023C48, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x2023C60, [34], 34);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x2023C4A, [39, 0], "Tail Whip");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x2023C61, [27], 27);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x2023C4C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x2023C62, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x2023C4E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x2023C63, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x2023C64, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x2023C68, [16, 0], 16);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x2023C3E, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x2023C40, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x2023C42, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x2023C44, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x2023C46, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x2023C50, [172, 171, 47, 143], 12);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x2023C50, [172, 171, 47, 143], 29);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x2023C50, [172, 171, 47, 143], 10);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x2023C50, [172, 171, 47, 143], 31);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x2023C50, [172, 171, 47, 143], 18);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x2023C50, [172, 171, 47, 143], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x2023C55, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x2023C56, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x2023C57, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x2023C58, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x2023C59, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x2023C5A, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x2023C5B, [6], "0");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x20, [19, 0], "Rattata");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x20, [19, 0], 19);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x8, [204, 187, 206, 206, 187, 206, 187, 255, 0, 0], "RATTATA");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x54, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x24, [64, 0, 0, 0], 64);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0x4, [189, 65], 16829);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x48, [172, 171, 47, 143], true);
            mapper.AssertAreEqual("battle.opponent.team.0.nature", 7);
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x34, [34], 34);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2E, [39, 0], "Tail Whip");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x35, [27], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x58, [16, 0], 16);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x5A, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x5C, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x5E, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x60, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x62, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x48, [172, 171, 47, 143], 12);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x48, [172, 171, 47, 143], 29);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x48, [172, 171, 47, 143], 10);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x48, [172, 171, 47, 143], 31);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x48, [172, 171, 47, 143], 18);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x48, [172, 171, 47, 143], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 848199057);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x1C, [156, 35], 9116);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.is_egg", 0x28, [0, 70, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ot_name", 0x14, [205, 189, 201, 206, 206, 255, 255], "SCOTT");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.pokerus_status", 0x24, [64], 64);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.robbins_obedience", 0x2C, [33, 0, 39, 0], 2555937);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.party_position", 0x2023BD4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.field.player.safeguard", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.reflect", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.lightscreen", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguard_count", 0x2023DEA, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightscreen_count", 0x2023DE6, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflect_count", 0x2023DE4, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.safeguard", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.reflect", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.safeguard_count", 0x2023DF5, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen_count", 0x2023DF1, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.reflect_count", 0x2023DEF, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x2023F1C, [0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x2023F48, [0], 0);
            mapper.AssertAreEqual("battle.flags.double", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.link", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.is_battle", 0x2022B4C, [4, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.flags.trainer", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.first_battle", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.link_in_battle", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.multi", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.safari", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.battle_tower", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.old_man_tutorial", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.roamer", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.eReader_trainer", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.kyogre_groudon", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.ghost_unveiled", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.regi", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.ghost", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.pokedude", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.wild_scripted", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.legenadry_frlg", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.trainer_tower", 0x2022B4C, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.other.battle_outcomes", 0x2023E8A, [1], "WON");
            mapper.AssertAreEqual("battle.other.battle_background_tiles", 0x2024018, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.other.battle_background_tiles_buffer", 0x202401C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.other.battle_dialogue", 0x2023D44, [6], 6);
            mapper.AssertAreEqual("events.trash_can_puzzle", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.beat_champion", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.game_clear", 0x2026539, [3], false);
            mapper.AssertAreEqual("events.hide_bulbasaur_ball", 0x2026439, [53], true);
            mapper.AssertAreEqual("events.hide_squirtle_ball", 0x2026439, [53], false);
            mapper.AssertAreEqual("events.hide_charmander_ball", 0x2026439, [53], true);
            mapper.AssertAreEqual("events.hide_oak_in_his_lab", 0x2026439, [53], false);
            mapper.AssertAreEqual("events.hide_oak_in_pallet_town", 0x2026439, [53], true);
            mapper.AssertAreEqual("events.hide_rival_in_lab", 0x2026439, [53], true);
            mapper.AssertAreEqual("events.hide_pewter_city_gym_guide", 0x2026439, [53], false);
            mapper.AssertAreEqual("events.hide_dome_fossil", 0x2026439, [53], false);
            mapper.AssertAreEqual("events.hide_helix_fossil", 0x202643A, [232], false);
            mapper.AssertAreEqual("events.hide_nugget_bridge_rocket", 0x202643A, [232], false);
            mapper.AssertAreEqual("events.hide_bill_clefairy", 0x202643A, [232], false);
            mapper.AssertAreEqual("events.hide_bill_human_sea_cottage", 0x202643A, [232], true);
            mapper.AssertAreEqual("events.hide_tower_fuji", 0x202643A, [232], false);
            mapper.AssertAreEqual("events.hide_pokehouse_fuji", 0x202643A, [232], true);
            mapper.AssertAreEqual("events.hide_lift_key", 0x202643A, [232], true);
            mapper.AssertAreEqual("events.hide_silph_scope", 0x202643A, [232], true);
            mapper.AssertAreEqual("events.hide_hideout_giovanni", 0x202643B, [180], false);
            mapper.AssertAreEqual("events.hide_town_map", 0x202643B, [180], false);
            mapper.AssertAreEqual("events.hide_pokedex", 0x202643B, [180], true);
            mapper.AssertAreEqual("events.hide_cerulean_rocket", 0x202643B, [180], false);
            mapper.AssertAreEqual("events.hide_cerulean_rival", 0x202643B, [180], true);
            mapper.AssertAreEqual("events.hide_ss_anne_rival", 0x202643B, [180], true);
            mapper.AssertAreEqual("events.hide_saffron_rockets", 0x202643B, [180], false);
            mapper.AssertAreEqual("events.hide_saffron_civilians", 0x202643B, [180], true);
            mapper.AssertAreEqual("events.hide_seafoam_1f_boulder_1", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_1f_boulder_2", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b1f_boulder_1", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b1f_boulder_2", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b2f_boulder_1", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b2f_boulder_2", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b3f_boulder_1", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b3f_boulder_2", 0x202643C, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_b3f_boulder_3", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_seafoam_b3f_boulder_4", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_seafoam_b3f_boulder_5", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_seafoam_b3f_boulder_6", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_seafoam_b4f_boulder_1", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_seafoam_b4f_boulder_2", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_silph_rival", 0x202643D, [128], false);
            mapper.AssertAreEqual("events.hide_route_22_rival", 0x202643D, [128], true);
            mapper.AssertAreEqual("events.hide_pewter_museum_guide", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_tower_rival", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_moltres", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_silph_rockets", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_route_12_snorlax", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_viridian_giovanni", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_old_amber", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_eevee_ball", 0x202643E, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_2f_boulder", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_victory_road_3f_boulder", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_oak_in_champ_room", 0x202643F, [4], true);
            mapper.AssertAreEqual("events.hide_game_corner_rocket", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_guard", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_zapdos", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_tower_rocket_1", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_celadon_rockets", 0x202643F, [4], false);
            mapper.AssertAreEqual("events.hide_dojo_hitmonlee_ball", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_dojo_hitmonchan_ball", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_cinnabar_bill", 0x2026440, [4], true);
            mapper.AssertAreEqual("events.hide_union_room_player_1", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_union_room_player_2", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_union_room_player_3", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_union_room_player_4", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_union_room_player_5", 0x2026440, [4], false);
            mapper.AssertAreEqual("events.hide_union_room_player_6", 0x2026441, [248], false);
            mapper.AssertAreEqual("events.hide_union_room_player_7", 0x2026441, [248], false);
            mapper.AssertAreEqual("events.hide_union_room_player_8", 0x2026441, [248], false);
            mapper.AssertAreEqual("events.hide_cinnabar_seagallop", 0x2026441, [248], true);
            mapper.AssertAreEqual("events.hide_saffron_fan_club_blackbelt", 0x2026441, [248], true);
            mapper.AssertAreEqual("events.hide_saffron_fan_club_rocker", 0x2026441, [248], true);
            mapper.AssertAreEqual("events.hide_saffron_fan_club_woman", 0x2026441, [248], true);
            mapper.AssertAreEqual("events.hide_saffron_fan_club_beauty", 0x2026441, [248], true);
            mapper.AssertAreEqual("events.hide_mg_deliverymen", 0x2026442, [112], false);
            mapper.AssertAreEqual("events.hide_one_island_bill", 0x2026442, [112], false);
            mapper.AssertAreEqual("events.hide_one_island_pokecenter_bill", 0x2026442, [112], false);
            mapper.AssertAreEqual("events.hide_one_island_pokecenter_celio", 0x2026442, [112], false);
            mapper.AssertAreEqual("events.hide_two_island_game_corner_biker", 0x2026442, [112], true);
            mapper.AssertAreEqual("events.hide_two_island_game_corner_lostelle", 0x2026442, [112], true);
            mapper.AssertAreEqual("events.hide_lostelle_in_her_home", 0x2026442, [112], true);
            mapper.AssertAreEqual("events.hide_three_island_bikers", 0x2026443, [56], false);
            mapper.AssertAreEqual("events.hide_lostelle_in_berry_forest", 0x2026443, [56], false);
            mapper.AssertAreEqual("events.hide_two_island_woman", 0x2026443, [56], true);
            mapper.AssertAreEqual("events.hide_two_island_beauty", 0x2026443, [56], true);
            mapper.AssertAreEqual("events.hide_two_island_super_nerd", 0x2026443, [56], true);
            mapper.AssertAreEqual("events.hide_three_island_antibikers", 0x2026443, [56], false);
            mapper.AssertAreEqual("events.hide_route_16_snorlax", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_mewtwo", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_articuno", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_tower_rocket_2", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_tower_rocket_3", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_electrode_1", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_electrode_2", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_ss_anne", 0x2026444, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_rockets", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_mt_ember_exterior_rockets", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_ruby", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_icefall_cave_lorelei", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_lorelei_in_her_house", 0x2026445, [16], true);
            mapper.AssertAreEqual("events.hide_icefall_cave_rockets", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_ruin_valley_scientist", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_sapphire", 0x2026445, [16], false);
            mapper.AssertAreEqual("events.hide_dotted_hole_scientist", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_three_island_lone_biker", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_pewter_city_running_shoes_guy", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_lost_cave_selphy", 0x2026446, [247], false);
            mapper.AssertAreEqual("events.hide_resort_gorgeous_selphy", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_resort_gorgeous_inside_selphy", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_selphys_butler", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_four_island_rival", 0x2026446, [247], true);
            mapper.AssertAreEqual("events.hide_six_island_pokecenter_rival", 0x2026447, [226], false);
            mapper.AssertAreEqual("events.hide_deoxys", 0x2026447, [226], true);
            mapper.AssertAreEqual("events.hide_birth_island_meteorite", 0x2026447, [226], false);
            mapper.AssertAreEqual("events.hide_lugia", 0x2026447, [226], false);
            mapper.AssertAreEqual("events.hide_ho_oh", 0x2026447, [226], false);
            mapper.AssertAreEqual("events.hide_postgame_gossipers", 0x2026447, [226], true);
            mapper.AssertAreEqual("events.hide_fame_checker_erika_journals", 0x2026447, [226], true);
            mapper.AssertAreEqual("events.hide_fame_checker_koga_journal", 0x2026447, [226], true);
            mapper.AssertAreEqual("events.hide_fame_checker_lt_surge_journal", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_vermilion_city_oaks_aide", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_cinnabar_pokecenter_bill", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_credits_rival", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_credits_oak", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_lorelei_house_meowth_doll", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_lorelei_house_chansey_doll", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_loreleis_house_nidoran_f_doll", 0x2026448, [255], true);
            mapper.AssertAreEqual("events.hide_lorelei_house_jigglypuff_doll", 0x2026449, [95], true);
            mapper.AssertAreEqual("events.hide_loreleis_house_nidoran_m_doll", 0x2026449, [95], true);
            mapper.AssertAreEqual("events.hide_loreleis_house_fearow_doll", 0x2026449, [95], true);
            mapper.AssertAreEqual("events.hide_loreleis_house_pidgeot_doll", 0x2026449, [95], true);
            mapper.AssertAreEqual("events.hide_loreleis_house_lapras_doll", 0x2026449, [95], true);
            mapper.AssertAreEqual("events.hide_misc_kanto_rockets", 0x2026449, [95], false);
            mapper.AssertAreEqual("events.hide_saffron_city_pokecenter_sabrina_journals", 0x2026449, [95], true);
            mapper.AssertAreEqual("events.hide_route2_ether", 0x202645E, [0], false);
            mapper.AssertAreEqual("events.hide_route2_paralyze_heal", 0x202645E, [0], false);
            mapper.AssertAreEqual("events.hide_viridian_forest_poke_ball", 0x202645E, [0], false);
            mapper.AssertAreEqual("events.hide_viridian_forest_antidote", 0x202645E, [0], false);
            mapper.AssertAreEqual("events.hide_viridian_forest_potion", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_1f_paralyze_heal", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_1f_tm09", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_1f_potion", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_1f_rare_candy", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_1f_escape_rope", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_1f_moon_stone", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_b2f_star_piece", 0x202645F, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_b2f_tm46", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_route4_tm05", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_route24_tm45", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_route25_tm43", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_1f_room2_tm31", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_2f_room2_stardust", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_2f_room4_x_attack", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_b1f_room2_tm44", 0x2026460, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_b1f_room3_ether", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_b1f_room5_super_potion", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_ssanne_kitchen_great_ball", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_route9_tm40", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b1f_escape_rope", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b1f_hyper_potion", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b2f_x_speed", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b2f_moon_stone", 0x2026461, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b2f_tm12", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b2f_super_potion", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b3f_rare_candy", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b3f_tm21", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b4f_tm49", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b4f_max_ether", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b4f_calcium", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_3f_escape_rope", 0x2026462, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_4f_elixir", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_4f_awakening", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_4f_great_ball", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_5f_nugget", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_6f_rare_candy", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_6f_x_accuracy", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_route12_tm48", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_route12_iron", 0x2026463, [0], false);
            mapper.AssertAreEqual("events.hide_route15_tm18", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_center_nugget", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_east_max_potion", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_east_full_restore", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_east_tm11", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_east_leaf_stone", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_north_protein", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_north_tm47", 0x2026464, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_west_tm32", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_west_gold_teeth", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_west_max_potion", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_west_max_revive", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_3f_hyper_potion", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_4f_max_revive", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_4f_escape_rope", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_4f_full_heal", 0x2026465, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_5f_protein", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_5f_tm01", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_5f_card_key", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_6f_hp_up", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_6f_x_special", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_7f_calcium", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_7f_tm08", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_10f_carbos", 0x2026466, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_10f_ultra_ball", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_10f_rare_candy", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_max_potion", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_tm17", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_tm25", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_thunder_stone", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_power_plant_elixir", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_1f_carbos", 0x2026467, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_1f_escape_rope", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_2f_calcium", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_3f_max_potion", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_3f_iron", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_b1f_tm14", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_b1f_full_restore", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_b1f_tm22", 0x2026468, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_b1f_secret_key", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_1f_rare_candy", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_1f_tm02", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_2f_guard_spec", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_2f_tm07", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_2f_full_heal", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_2f_tm37", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_3f_max_revive", 0x2026469, [0], false);
            mapper.AssertAreEqual("events.hide_victory_road_3f_tm50", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_1f_max_elixir", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_1f_nugget", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_1f_full_restore", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_2f_full_restore", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_2f_pp_up", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_2f_ultra_ball", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_b1f_max_revive", 0x202646A, [0], false);
            mapper.AssertAreEqual("events.hide_cerulean_cave_b1f_ultra_ball", 0x202646B, [0], false);
            mapper.AssertAreEqual("events.hide_fuchsia_city_wardens_house_rare_candy", 0x202646B, [0], false);
            mapper.AssertAreEqual("events.hide_two_island_revive", 0x202646B, [0], false);
            mapper.AssertAreEqual("events.hide_three_island_zinc", 0x202646B, [0], false);
            mapper.AssertAreEqual("events.hide_viridian_forest_potion_2", 0x202646B, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_b2f_revive", 0x202646B, [0], false);
            mapper.AssertAreEqual("events.hide_mt_moon_b2f_antidote", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_route11_x_defend", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_route9_burn_heal", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_rock_tunnel_1f_repel", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_rock_tunnel_1f_pearl", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_rock_tunnel_1f_escape_rope", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_rock_tunnel_b1f_revive", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_rock_tunnel_b1f_max_ether", 0x202646C, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_8f_iron", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_11f_zinc", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_1f_protein", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_2f_zinc", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_mansion_2f_hp_up", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_viridian_city_potion", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_route11_great_ball", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_route11_awakening", 0x202646D, [0], false);
            mapper.AssertAreEqual("events.hide_pokemon_tower_5f_cleanse_tag", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_celadon_city_ether", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_rocket_hideout_b3f_black_glasses", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_safari_zone_north_quick_claw", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_islands_1f_ice_heal", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_islands_b1f_water_stone", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_islands_b1f_revive", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_islands_b2f_big_pearl", 0x202646E, [0], false);
            mapper.AssertAreEqual("events.hide_seafoam_islands_b4f_ultra_ball", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_four_island_star_piece", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_four_island_stardust", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_one_island_kindle_road_ether", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_one_island_kindle_road_max_repel", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_one_island_kindle_road_carbos", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_meadow_max_potion", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_meadow_pp_up", 0x202646F, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_memorial_pillar_metal_coat", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_six_island_outcast_island_pp_up", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_six_island_water_path_elixir", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_six_island_water_path_dragon_scale", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_six_island_ruin_valley_full_restore", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_six_island_ruin_valley_hp_up", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_six_island_ruin_valley_sun_stone", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_seven_island_sevault_canyon_kings_rock", 0x2026470, [0], false);
            mapper.AssertAreEqual("events.hide_seven_island_sevault_canyon_max_elixir", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_seven_island_sevault_canyon_nugget", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_three_island_berry_forest_max_ether", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_three_island_berry_forest_full_heal", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_three_island_berry_forest_max_elixir", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_mt_ember_exterior_ultra_ball", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_mt_ember_exterior_fire_stone", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_mt_ember_exterior_dire_hit", 0x2026471, [0], false);
            mapper.AssertAreEqual("events.hide_four_island_icefall_cave_1f_ultra_ball", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_four_island_icefall_cave_1f_hm07", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_four_island_icefall_cave_b1f_full_restore", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_four_island_icefall_cave_b1f_never_melt_ice", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_rocket_warehouse_big_pearl", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_rocket_warehouse_tm36", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_rocket_warehouse_pearl", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_rocket_warehouse_up_grade", 0x2026472, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_lost_cave_room10_silk_scarf", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_lost_cave_room11_lax_incense", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_lost_cave_room12_sea_incense", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_lost_cave_room13_max_revive", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.hide_five_island_lost_cave_room14_rare_candy", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.hide_seven_island_sevault_canyon_house_lucky_punch", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.hide_silph_co_4f_tm41", 0x2026473, [0], false);
            mapper.AssertAreEqual("events.got_potion_on_route_1", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_tm34_from_surge", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_fossil_from_mt_moon", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.helped_bill_in_sea_cottage", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_ss_ticket", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_ss_ticket_dup", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_tm42_at_memorial_pillar", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_hm01", 0x202647A, [0], false);
            mapper.AssertAreEqual("events.got_hm02", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.got_hm03", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.got_hm04", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.got_hm05", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.rescued_mr_fuji", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.got_poke_flute", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.got_tm28_from_rocket", 0x202647B, [0], false);
            mapper.AssertAreEqual("events.got_old_rod", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.got_bike_voucher", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.got_coin_case", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.got_good_rod", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.got_tm29_from_mr_psychic", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.got_lapras_from_silph", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.got_pokeballs_from_oak_after_22_rival", 0x202647C, [0], false);
            mapper.AssertAreEqual("events.did_mimien_trade", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.bought_magikarp", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.did_zynx_trade", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.did_ms_nido_trade", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.did_ch_ding_trade", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.got_tm38_from_blaine", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.oak_skip_22_rival_check", 0x202647D, [0], false);
            mapper.AssertAreEqual("events.got_master_ball_from_silph", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.did_nina_trade", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.got_itemfinder", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.woke_up_route_12_snorlax", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.got_tm39_from_brock", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.got_super_rod", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.got_exp_share_from_oaks_aide", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.did_marc_trade", 0x202647E, [0], false);
            mapper.AssertAreEqual("events.beat_rival_in_oaks_lab", 0x202647F, [1], true);
            mapper.AssertAreEqual("events.got_tm06_from_koga", 0x202647F, [1], false);
            mapper.AssertAreEqual("events.got_tm27", 0x202647F, [1], false);
            mapper.AssertAreEqual("events.got_old_amber", 0x202647F, [1], false);
            mapper.AssertAreEqual("events.got_eevee", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.found_both_vermilion_gym_switches", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.cinnabar_gym_quiz_1", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.pending_daycare_egg", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.cinnabar_gym_quiz_2", 0x2026480, [0], false);
            mapper.AssertAreEqual("events.cinnabar_gym_quiz_3", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.cinnabar_gym_quiz_4", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.cinnabar_gym_quiz_5", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.cinnabar_gym_quiz_6", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.pokemon_mansion_switch_state", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.opened_rocket_hideout", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.got_10_coins_from_gambler", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.got_20_coins_from_gambler", 0x2026481, [0], false);
            mapper.AssertAreEqual("events.got_20_coins_from_gambler_2", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.got_bicycle", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.got_dome_fossil", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.got_helix_fossil", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.did_esphere_trade", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.did_tangeny_trade", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.did_seelor_trade", 0x2026482, [0], false);
            mapper.AssertAreEqual("events.got_hitmon_from_dojo", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_2f_door_1", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_2f_door_2", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_3f_door_1", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_3f_door_2", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_4f_door_1", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_4f_door_2", 0x2026483, [0], false);
            mapper.AssertAreEqual("events.silph_5f_door_1", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_5f_door_2", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_5f_door_3", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_6f_door", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_7f_door_1", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_7f_door_2", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_7f_door_3", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_8f_door", 0x2026484, [0], false);
            mapper.AssertAreEqual("events.silph_9f_door_1", 0x2026485, [0], false);
            mapper.AssertAreEqual("events.silph_9f_door_2", 0x2026485, [0], false);
            mapper.AssertAreEqual("events.silph_9f_door_3", 0x2026485, [0], false);
            mapper.AssertAreEqual("events.silph_9f_door_4", 0x2026485, [0], false);
            mapper.AssertAreEqual("events.silph_10f_door", 0x2026485, [0], false);
            mapper.AssertAreEqual("events.silph_11f_door", 0x2026485, [0], false);
            mapper.AssertAreEqual("events.met_sticker_man", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.pallet_lady_not_blocking_sign", 0x2026486, [2], true);
            mapper.AssertAreEqual("events.got_vs_seeker", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.got_tm19_from_erika", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.got_tm33_from_thirsty_girl", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.got_tm20_from_thirsty_girl", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.got_tm16_from_thirsty_girl", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.got_tm03_from_misty", 0x2026486, [2], false);
            mapper.AssertAreEqual("events.got_tm26_from_giovanni", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.got_tm04_from_sabrina", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.got_fame_checker", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.got_record_setting_magikarp", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.two_island_shop_introduced", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.two_island_shop_expanded_1", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.two_island_shop_expanded_2", 0x2026487, [0], false);
            mapper.AssertAreEqual("events.two_island_shop_expanded_3", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.sevii_detour_finished", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.visited_two_island", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.rescued_lostelle", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.can_use_rocket_hideout_lift", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.got_tea", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.received_aurora_ticket", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.received_mystic_ticket", 0x2026489, [0], false);
            mapper.AssertAreEqual("events.received_old_sea_map", 0x2026489, [0], false);
            mapper.AssertAreEqual("events.got_powder_jar", 0x202648B, [0], false);
            mapper.AssertAreEqual("events.fought_mewtwo", 0x202648B, [0], false);
            mapper.AssertAreEqual("events.fought_moltres", 0x202648B, [0], false);
            mapper.AssertAreEqual("events.fought_articuno", 0x202648B, [0], false);
            mapper.AssertAreEqual("events.fought_zapdos", 0x202648B, [0], false);
            mapper.AssertAreEqual("events.tutor_double_edge", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_thunder_wave", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_rock_slide", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_explosion", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_mega_punch", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_mega_kick", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_dream_eater", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_soft_boiled", 0x202648C, [0], false);
            mapper.AssertAreEqual("events.tutor_substitute", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.tutor_swords_dance", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.tutor_seismic_toss", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.tutor_counter", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.tutor_metronome", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.tutor_mimic", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.tutor_body_slam", 0x202648D, [128], false);
            mapper.AssertAreEqual("events.visited_oaks_lab", 0x202648D, [128], true);
            mapper.AssertAreEqual("events.fought_power_plant_electrode_1", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.fought_power_plant_electrode_2", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.stopped_seafoam_b3f_current", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.stopped_seafoam_b4f_current", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.talked_to_lorelei_after_warehouse", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.defeated_rockets_in_warehouse", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.unlocked_rocket_warehouse", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.no_room_for_tm42_at_memorial_pillar", 0x202648E, [0], false);
            mapper.AssertAreEqual("events.learned_yes_nah_chansey", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.got_nest_ball_from_water_path_house_1", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.got_togepi_egg", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.no_room_for_togepi_egg", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.recovered_sapphire", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.got_ruby", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.tutor_frenzy_plant", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.tutor_blast_burn", 0x202648F, [0], false);
            mapper.AssertAreEqual("events.tutor_hydro_cannon", 0x2026490, [0], false);
            mapper.AssertAreEqual("events.learned_all_moves_at_cape_brink", 0x2026490, [0], false);
            mapper.AssertAreEqual("events.got_nugget_from_dunsparce_tunnel", 0x2026490, [0], false);
            mapper.AssertAreEqual("events.used_cut_on_ruin_valley_braille", 0x2026490, [0], false);
            mapper.AssertAreEqual("events.fought_deoxys", 0x2026490, [0], false);
            mapper.AssertAreEqual("events.revived_dome", 0x2026491, [0], false);
            mapper.AssertAreEqual("events.revived_helix", 0x2026491, [0], false);
            mapper.AssertAreEqual("events.revived_amber", 0x2026491, [0], false);
            mapper.AssertAreEqual("events.got_hm06", 0x2026491, [0], false);
            mapper.AssertAreEqual("events.shown_mystic_ticket", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.shown_aurora_ticket", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.fought_lugia", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.fought_ho_oh", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.oak_saw_dex_completion", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.lugia_flew_away", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.ho_oh_flew_away", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.deoxys_flew_away", 0x2026492, [0], false);
            mapper.AssertAreEqual("events.talked_to_tea_lady_after_hof", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.talked_to_oaks_aide_in_vermilion", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.got_everstone_from_oaks_aide", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.got_moon_stone_from_joyful_game_corner", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.got_full_restore_from_three_island_defender", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.got_amulet_coin_from_oaks_aide", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.no_room_for_joyful_game_corner_moon_stone", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.oaks_rating_is_via_pc", 0x2026493, [0], false);
            mapper.AssertAreEqual("events.hidden_item_viridian_forest_potion", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_viridian_forest_antidote", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b2f_moon_stone", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b2f_ether", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route25_elixir", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route25_ether", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route9_ether", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x07", 0x20264B1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_ssanne_b1f_corridor_hyper_potion", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route10_super_potion", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route10_max_ether", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_rocket_hideout_b1f_pp_up", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_rocket_hideout_b3f_nugget", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_rocket_hideout_b4f_nest_ball", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_pokemon_tower_5f_big_mushroom", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route13_pp_up", 0x20264B2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x10", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route17_rare_candy", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route17_full_restore", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route17_pp_up", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route17_max_revive", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route17_max_elixir", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_safari_zone_center_leaf_stone", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_safari_zone_west_revive", 0x20264B3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_5f_elixir", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_9f_max_potion", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_saffron_city_copycats_house_2f_nugget", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_power_plant_max_elixir", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_power_plant_thunder_stone", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_seafoam_islands_b3f_nugget", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_seafoam_islands_b4f_water_stone", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_pokemon_mansion_1f_moon_stone", 0x20264B4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_pokemon_mansion_3f_rare_candy", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_pokemon_mansion_b1f_elixir", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_full_restore", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_ultra_ball", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_max_ether", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_victory_road_1f_ultra_ball", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_victory_road_1f_full_restore", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_cerulean_cave_1f_ultra_ball", 0x20264B5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x28", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route11_escape_rope", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route12_hyper_potion", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x2b", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x2c", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x2d", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x2e", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_pp_up", 0x20264B6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_vermilion_city_max_ether", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_cerulean_city_rare_candy", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route4_great_ball", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_2", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_3", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_4", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_5", 0x20264B7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_6", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_7", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_8", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_9", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_10", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_11", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_celadon_city_game_corner_coins_12", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_seven_island_sevault_canyon_cheri_berry", 0x20264B8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_seven_island_tanoby_ruins_heart_scale_4", 0x20264B9, [207], true);
            mapper.AssertAreEqual("events.hidden_item_seven_island_tanoby_ruins_heart_scale", 0x20264B9, [207], true);
            mapper.AssertAreEqual("events.hidden_item_seven_island_tanoby_ruins_heart_scale_2", 0x20264B9, [207], true);
            mapper.AssertAreEqual("events.hidden_item_seven_island_tanoby_ruins_heart_scale_3", 0x20264B9, [207], true);
            mapper.AssertAreEqual("events.hidden_item_five_island_rocket_warehouse_nest_ball", 0x20264B9, [207], false);
            mapper.AssertAreEqual("events.hidden_item_five_island_rocket_warehouse_net_ball", 0x20264B9, [207], false);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_potion", 0x20264B9, [207], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_antidote", 0x20264B9, [207], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_paralyze_heal", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_awakening", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_burn_heal", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_ice_heal", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_north_south_tunnel_ether", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_potion", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_antidote", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_paralyze_heal", 0x20264BA, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_awakening", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_burn_heal", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_ice_heal", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_underground_path_east_west_tunnel_ether", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b1f_tiny_mushroom", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b1f_tiny_mushroom_2", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b1f_tiny_mushroom_3", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b1f_big_mushroom", 0x20264BB, [255], true);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b1f_big_mushroom_2", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_mt_moon_b1f_big_mushroom_3", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_razz_berry", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_bluk_berry", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_nanab_berry", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_wepear_berry", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_oran_berry", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_cheri_berry", 0x20264BC, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_chesto_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_pecha_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_rawst_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_aspear_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_persim_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_pinap_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_berry_forest_lum_berry", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_stardust", 0x20264BD, [255], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_stardust_2", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_pearl", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_pearl_2", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_ultra_ball", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_ultra_ball_2", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_star_piece", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_one_island_treasure_beach_big_pearl", 0x20264BE, [127], true);
            mapper.AssertAreEqual("events.hidden_item_two_island_cape_brink_rare_candy", 0x20264BE, [127], false);
            mapper.AssertAreEqual("events.hidden_item_pewter_city_poke_ball", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route3_oran_berry", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route4_persim_berry", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route24_pecha_berry", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route25_oran_berry", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route25_bluk_berry", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route6_sitrus_berry", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route6_rare_candy", 0x20264BF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_ssanne_kitchen_pecha_berry", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_ssanne_kitchen_cheri_berry", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_ssanne_kitchen_chesto_berry", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route9_rare_candy", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_unused_0x7c", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route10_persim_berry", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route10_cheri_berry", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route8_rawst_berry", 0x20264C0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route8_lum_berry", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route8_leppa_berry", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route12_rare_candy", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route12_leftovers", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route16_leftovers", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_fuchsia_city_max_revive", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_rocket_hideout_b4f_net_ball", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_2f_ultra_ball", 0x20264C1, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_3f_protein", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_4f_iron", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_5f_pp_up", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_6f_carbos", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_7f_zinc", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_8f_nugget", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_9f_calcium", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_10f_hp_up", 0x20264C2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_silph_co_11f_revive", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_lum_berry", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_sitrus_berry", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_aspear_berry", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route23_leppa_berry", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route14_zinc", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route9_chesto_berry", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route10_nanab_berry", 0x20264C3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route7_wepear_berry", 0x20264C4, [6], false);
            mapper.AssertAreEqual("events.hidden_item_route20_stardust", 0x20264C4, [6], true);
            mapper.AssertAreEqual("events.hidden_item_route21_north_pearl", 0x20264C4, [6], true);
            mapper.AssertAreEqual("events.hidden_item_route23_max_elixir", 0x20264C4, [6], false);
            mapper.AssertAreEqual("events.hidden_item_route4_razz_berry", 0x20264C4, [6], false);
            mapper.AssertAreEqual("events.hidden_item_route14_pinap_berry", 0x20264C4, [6], false);
            mapper.AssertAreEqual("events.hidden_item_mt_ember_exterior_fire_stone", 0x20264C4, [6], false);
            mapper.AssertAreEqual("events.hidden_item_pokemon_tower_7f_soothe_bell", 0x20264C4, [6], false);
            mapper.AssertAreEqual("events.hidden_item_navel_rock_summit_sacred_ash", 0x20264C5, [192], false);
            mapper.AssertAreEqual("events.hidden_item_two_island_cape_brink_pp_max", 0x20264C5, [192], false);
            mapper.AssertAreEqual("events.hidden_item_mt_ember_exterior_ultra_ball", 0x20264C5, [192], false);
            mapper.AssertAreEqual("events.hidden_item_three_island_dunsparce_tunnel_nugget", 0x20264C5, [192], false);
            mapper.AssertAreEqual("events.hidden_item_three_island_pp_up", 0x20264C5, [192], false);
            mapper.AssertAreEqual("events.hidden_item_three_island_bond_bridge_max_repel", 0x20264C5, [192], false);
            mapper.AssertAreEqual("events.hidden_item_three_island_bond_bridge_pearl", 0x20264C5, [192], true);
            mapper.AssertAreEqual("events.hidden_item_three_island_bond_bridge_stardust", 0x20264C5, [192], true);
            mapper.AssertAreEqual("events.hidden_item_four_island_pearl", 0x20264C6, [199], true);
            mapper.AssertAreEqual("events.hidden_item_four_island_ultra_ball", 0x20264C6, [199], true);
            mapper.AssertAreEqual("events.hidden_item_five_island_memorial_pillar_big_pearl", 0x20264C6, [199], true);
            mapper.AssertAreEqual("events.hidden_item_five_island_memorial_pillar_razz_berry", 0x20264C6, [199], false);
            mapper.AssertAreEqual("events.hidden_item_five_island_memorial_pillar_sitrus_berry", 0x20264C6, [199], false);
            mapper.AssertAreEqual("events.hidden_item_five_island_memorial_pillar_bluk_berry", 0x20264C6, [199], false);
            mapper.AssertAreEqual("events.hidden_item_five_island_resort_gorgeous_nest_ball", 0x20264C6, [199], true);
            mapper.AssertAreEqual("events.hidden_item_five_island_resort_gorgeous_stardust", 0x20264C6, [199], true);
            mapper.AssertAreEqual("events.hidden_item_five_island_resort_gorgeous_star_piece", 0x20264C7, [31], true);
            mapper.AssertAreEqual("events.hidden_item_five_island_resort_gorgeous_stardust_2", 0x20264C7, [31], true);
            mapper.AssertAreEqual("events.hidden_item_six_island_outcast_island_star_piece", 0x20264C7, [31], true);
            mapper.AssertAreEqual("events.hidden_item_six_island_outcast_island_net_ball", 0x20264C7, [31], true);
            mapper.AssertAreEqual("events.hidden_item_six_island_green_path_ultra_ball", 0x20264C7, [31], true);
            mapper.AssertAreEqual("events.hidden_item_six_island_water_path_aspear_berry", 0x20264C7, [31], false);
            mapper.AssertAreEqual("events.hidden_item_six_island_water_path_oran_berry", 0x20264C7, [31], false);
            mapper.AssertAreEqual("events.hidden_item_six_island_water_path_pinap_berry", 0x20264C7, [31], false);
            mapper.AssertAreEqual("events.hidden_item_six_island_leppa_berry", 0x20264C8, [6], false);
            mapper.AssertAreEqual("events.hidden_item_seven_island_trainer_tower_big_pearl", 0x20264C8, [6], true);
            mapper.AssertAreEqual("events.hidden_item_seven_island_trainer_tower_pearl", 0x20264C8, [6], true);
            mapper.AssertAreEqual("events.hidden_item_seven_island_trainer_tower_nanab_berry", 0x20264C8, [6], false);
            mapper.AssertAreEqual("events.hidden_item_seven_island_sevault_canyon_entrance_rawst_berry", 0x20264C8, [6], false);
            mapper.AssertAreEqual("events.hidden_item_viridian_city_gym_macho_brace", 0x20264C8, [6], false);
            mapper.AssertAreEqual("events.hidden_item_ssanne_exterior_lava_cookie", 0x20264C8, [6], false);
            mapper.AssertAreEqual("events.defeated_brock", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_misty", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_lt_surge", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_erika", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_koga", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_sabrina", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_blaine", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_leader_giovanni", 0x20264CA, [0], false);
            mapper.AssertAreEqual("events.defeated_lorelei", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.defeated_bruno", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.defeated_agatha", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.defeated_lance", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.defeated_champ", 0x20264CB, [0], false);
            mapper.AssertAreEqual("events.sys_safari_mode", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_vs_seeker_charging", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_cruise_mode", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_white_flute_active", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_black_flute_active", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_use_strength", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_flash_active", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_special_wild_battle", 0x2026534, [0], false);
            mapper.AssertAreEqual("events.sys_ql_departed", 0x2026535, [0], false);
            mapper.AssertAreEqual("events.badge01_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge02_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge03_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge04_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge05_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge06_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge07_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.badge08_get", 0x2026538, [0], false);
            mapper.AssertAreEqual("events.sys_pokemon_get", 0x2026539, [3], true);
            mapper.AssertAreEqual("events.sys_pokedex_get", 0x2026539, [3], true);
            mapper.AssertAreEqual("events.sys_game_clear", 0x2026539, [3], false);
            mapper.AssertAreEqual("events.sys_set_trainer_card_profile", 0x2026539, [3], false);
            mapper.AssertAreEqual("events.sys_b_dash", 0x2026539, [3], false);
            mapper.AssertAreEqual("events.sys_on_cycling_road", 0x202653A, [0], false);
            mapper.AssertAreEqual("events.sys_not_someones_pc", 0x202653A, [0], false);
            mapper.AssertAreEqual("events.sys_reset_rtc_enable", 0x202653A, [0], false);
            mapper.AssertAreEqual("events.sys_mystery_gift_enabled", 0x202653B, [65], false);
            mapper.AssertAreEqual("events.sys_ribbon_get", 0x202653B, [65], false);
            mapper.AssertAreEqual("events.sys_saw_help_system_intro", 0x202653B, [65], false);
            mapper.AssertAreEqual("events.opened_start_menu", 0x202653B, [65], true);
            mapper.AssertAreEqual("events.sys_national_dex", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_pc_storage_disabled", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_informed_of_local_wireless_player", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.shown_box_was_full_message", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_can_link_with_rs", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_sevii_map_123", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_sevii_map_4567", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_got_berry_pouch", 0x202653C, [0], false);
            mapper.AssertAreEqual("events.sys_deoxys_awakened", 0x202653D, [0], false);
            mapper.AssertAreEqual("events.sys_unlocked_tanoby_ruins", 0x202653D, [0], false);
            mapper.AssertAreEqual("events.enable_ship_navel_rock", 0x202653D, [0], false);
            mapper.AssertAreEqual("events.enable_ship_birth_island", 0x202653D, [0], false);
            mapper.AssertAreEqual("events.world_map_pallet_town", 0x2026546, [3], true);
            mapper.AssertAreEqual("events.world_map_viridian_city", 0x2026546, [3], true);
            mapper.AssertAreEqual("events.world_map_pewter_city", 0x2026546, [3], false);
            mapper.AssertAreEqual("events.world_map_cerulean_city", 0x2026546, [3], false);
            mapper.AssertAreEqual("events.world_map_lavender_town", 0x2026546, [3], false);
            mapper.AssertAreEqual("events.world_map_vermilion_city", 0x2026546, [3], false);
            mapper.AssertAreEqual("events.world_map_celadon_city", 0x2026546, [3], false);
            mapper.AssertAreEqual("events.world_map_fuchsia_city", 0x2026546, [3], false);
            mapper.AssertAreEqual("events.world_map_cinnabar_island", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_indigo_plateau_exterior", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_saffron_city", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_one_island", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_two_island", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_three_island", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_four_island", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_five_island", 0x2026547, [0], false);
            mapper.AssertAreEqual("events.world_map_seven_island", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_six_island", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_route4_pokemon_center_1f", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_route10_pokemon_center_1f", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_viridian_forest", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_mt_moon_1f", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_ssanne_exterior", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_underground_path_north_south_tunnel", 0x2026548, [0], false);
            mapper.AssertAreEqual("events.world_map_underground_path_east_west_tunnel", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_digletts_cave_b1f", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_victory_road_1f", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_rocket_hideout_b1f", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_silph_co_1f", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_pokemon_mansion_1f", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_safari_zone_center", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_pokemon_league_loreleis_room", 0x2026549, [0], false);
            mapper.AssertAreEqual("events.world_map_rock_tunnel_1f", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_seafoam_islands_1f", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_pokemon_tower_1f", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_cerulean_cave_1f", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_power_plant", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_navel_rock_exterior", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_mt_ember_exterior", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_three_island_berry_forest", 0x202654A, [0], false);
            mapper.AssertAreEqual("events.world_map_four_island_icefall_cave_entrance", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_five_island_rocket_warehouse", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_trainer_tower_lobby", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_six_island_dotted_hole_1f", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_five_island_lost_cave_entrance", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_six_island_pattern_bush", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_six_island_altering_cave", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_seven_island_tanoby_ruins_monean_chamber", 0x202654B, [0], false);
            mapper.AssertAreEqual("events.world_map_three_island_dunsparce_tunnel", 0x202654C, [0], false);
            mapper.AssertAreEqual("events.world_map_seven_island_sevault_canyon_tanoby_key", 0x202654C, [0], false);
            mapper.AssertAreEqual("events.world_map_birth_island_exterior", 0x202654C, [0], false);
            mapper.AssertAreEqual("events.dont_show_map_name_popup", 0x20370E0, [0], false);
            mapper.AssertAreEqual("events.dont_transition_music", 0x20370E0, [0], false);
            mapper.AssertAreEqual("options.battle_animations", 0x2025569, [0], false);
            mapper.AssertAreEqual("options.battle_style", 0x2025569, [0], false);
            mapper.AssertAreEqual("options.sound", 0x2025569, [0], false);
            mapper.AssertAreEqual("options.button_mode", 0x2025567, [0], 0);
            mapper.AssertAreEqual("game_time.hours", 0x20245BE, [0], 0);
            mapper.AssertAreEqual("game_time.minutes", 0x20245C0, [12], 12);
            mapper.AssertAreEqual("game_time.seconds", 0x20245C1, [12], 12);
            //mapper.AssertAreEqual("game_time.frames", 0x20245C2, [52], 52);
            mapper.AssertAreEqual("pointers.dma_1", 0x3005008, [84, 85, 2, 2], 33707348);
            mapper.AssertAreEqual("pointers.dma_2", 0x300500C, [176, 69, 2, 2], 33703344);
            mapper.AssertAreEqual("pointers.dma_3", 0x3005010, [60, 147, 2, 2], 33723196);
            mapper.AssertAreEqual("pointers.callback_1", 0x30030F0, [73, 101, 5, 8], "Overworld");
            mapper.AssertAreEqual("pointers.callback_2", 0x30030F4, [201, 101, 5, 8], null);
            mapper.AssertAreEqual("meta.generation", "3");
            mapper.AssertAreEqual("meta.game_name", "FireRed and LeafGreen");
            mapper.AssertAreEqual("meta.game_type", "Remakes");
            mapper.AssertAreEqual("meta.state", "Overworld");
        }

    }
}
