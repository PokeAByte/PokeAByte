using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonEmerald : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBA_PokemonEmerald(3);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x2024A68, [187, 255, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.gender", 0x2024A70, [0], "Male");
            mapper.AssertAreEqual("player.player_id", 0x2024A72, [62, 47], 12094);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", 0x20, [24, 1], "Torchic");
            mapper.AssertAreEqual("player.active_pokemon.dex_number", 0x20, [24, 1], 255);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0x8, [189, 194, 195, 189, 197, 191, 200, 163, 255, 255], "CHICKEN2");
            mapper.AssertAreEqual("player.active_pokemon.level", 0x54, [8], 8);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0x24, [80, 1, 0, 0], 336);
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("player.active_pokemon.ability", 0x48, [100, 198, 38, 50], false);
            mapper.AssertAreEqual("player.active_pokemon.nature", 3);
            mapper.AssertAreEqual("player.active_pokemon.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.active_pokemon.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("player.active_pokemon.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0x2C, [10, 0], "Scratch");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0x34, [32], 32);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0x30, [116, 0], "Focus Energy");
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0x36, [30], 30);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0x5A, [17, 0], 17);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0x5E, [13, 0], 13);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_attack", 0x60, [14, 0], 14);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_defense", 0x62, [15, 0], 15);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0);
            mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 0x48, [100, 198, 38, 50], 4);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0x48, [100, 198, 38, 50], 19);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0x48, [100, 198, 38, 50], 17);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0x48, [100, 198, 38, 50], 13);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_attack", 0x48, [100, 198, 38, 50], 2);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_defense", 0x48, [100, 198, 38, 50], 25);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0x38, [2], 2);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0x39, [4], 4);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0x3B, [1], 1);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.internals.personality_value", 1782944528);
            mapper.AssertAreEqual("player.active_pokemon.internals.checksum", 0x1C, [98, 180], 46178);
            mapper.AssertAreEqual("player.active_pokemon.misc.is_egg", 0x28, [0, 90, 0, 0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.active_pokemon.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.active_pokemon.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.pokerus_status", 0x24, [80], 80);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("player.active_pokemon.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.misc.robbins_obedience", 0x2C, [10, 0, 45, 0], 2949130);
            mapper.AssertAreEqual("player.team.0.species", 0x20, [24, 1], "Torchic");
            mapper.AssertAreEqual("player.team.0.dex_number", 0x20, [24, 1], 255);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [189, 194, 195, 189, 197, 191, 200, 163, 255, 255], "CHICKEN2");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [8], 8);
            mapper.AssertAreEqual("player.team.0.exp", 0x24, [80, 1, 0, 0], 336);
            mapper.AssertAreEqual("player.team.0.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [100, 198, 38, 50], false);
            mapper.AssertAreEqual("player.team.0.nature", 3);
            mapper.AssertAreEqual("player.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0x2C, [10, 0], "Scratch");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0x34, [32], 32);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0x30, [116, 0], "Focus Energy");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0x36, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0x5A, [17, 0], 17);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0x5E, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0x60, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0x62, [15, 0], 15);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 0x48, [100, 198, 38, 50], 4);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0x48, [100, 198, 38, 50], 19);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0x48, [100, 198, 38, 50], 17);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0x48, [100, 198, 38, 50], 13);
            mapper.AssertAreEqual("player.team.0.ivs.special_attack", 0x48, [100, 198, 38, 50], 2);
            mapper.AssertAreEqual("player.team.0.ivs.special_defense", 0x48, [100, 198, 38, 50], 25);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0x38, [2], 2);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0x39, [4], 4);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0x3B, [1], 1);
            mapper.AssertAreEqual("player.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.internals.personality_value", 1782944528);
            mapper.AssertAreEqual("player.team.0.internals.checksum", 0x1C, [98, 180], 46178);
            mapper.AssertAreEqual("player.team.0.misc.is_egg", 0x28, [0, 90, 0, 0], false);
            mapper.AssertAreEqual("player.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.pokerus_status", 0x24, [80], 80);
            mapper.AssertAreEqual("player.team.0.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("player.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.robbins_obedience", 0x2C, [10, 0, 45, 0], 2949130);
            mapper.AssertAreEqual("player.team.1.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("player.team.1.dex_number", 0x20, [30, 1], 261);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [188, 189, 188, 190, 188, 255, 255, 255, 255, 255], "BCBDB");
            mapper.AssertAreEqual("player.team.1.level", 0x54, [2], 2);
            mapper.AssertAreEqual("player.team.1.exp", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("player.team.1.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [162, 231, 26, 22], false);
            mapper.AssertAreEqual("player.team.1.nature", 15);
            mapper.AssertAreEqual("player.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0x58, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0x5A, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0x5E, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0x62, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0x48, [162, 231, 26, 22], 2);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0x48, [162, 231, 26, 22], 29);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0x48, [162, 231, 26, 22], 25);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0x48, [162, 231, 26, 22], 21);
            mapper.AssertAreEqual("player.team.1.ivs.special_attack", 0x48, [162, 231, 26, 22], 1);
            mapper.AssertAreEqual("player.team.1.ivs.special_defense", 0x48, [162, 231, 26, 22], 11);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.internals.personality_value", 3493365440);
            mapper.AssertAreEqual("player.team.1.internals.checksum", 0x1C, [168, 120], 30888);
            mapper.AssertAreEqual("player.team.1.misc.is_egg", 0x28, [0, 72, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.1.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.1.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.pokerus_status", 0x24, [8], 8);
            mapper.AssertAreEqual("player.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.robbins_obedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("player.team.2.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("player.team.2.dex_number", 0x20, [30, 1], 261);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [189, 189, 189, 189, 189, 189, 189, 189, 189, 189], "CCCCCCCCCC");
            mapper.AssertAreEqual("player.team.2.level", 0x54, [3], 3);
            mapper.AssertAreEqual("player.team.2.exp", 0x24, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("player.team.2.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [52, 231, 102, 40], false);
            mapper.AssertAreEqual("player.team.2.nature", 1);
            mapper.AssertAreEqual("player.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0x56, [15, 0], 15);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0x58, [15, 0], 15);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0x5A, [9, 0], 9);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0x5E, [7, 0], 7);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0x62, [7, 0], 7);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0x48, [52, 231, 102, 40], 20);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0x48, [52, 231, 102, 40], 25);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0x48, [52, 231, 102, 40], 25);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0x48, [52, 231, 102, 40], 13);
            mapper.AssertAreEqual("player.team.2.ivs.special_attack", 0x48, [52, 231, 102, 40], 6);
            mapper.AssertAreEqual("player.team.2.ivs.special_defense", 0x48, [52, 231, 102, 40], 20);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.internals.personality_value", 3790259126);
            mapper.AssertAreEqual("player.team.2.internals.checksum", 0x1C, [154, 136], 34970);
            mapper.AssertAreEqual("player.team.2.misc.is_egg", 0x28, [0, 70, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.2.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.2.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.2.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.2.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.pokerus_status", 0x24, [27], 27);
            mapper.AssertAreEqual("player.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.robbins_obedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("player.team.3.species", 0x20, [34, 1], "Wurmple");
            mapper.AssertAreEqual("player.team.3.dex_number", 0x20, [34, 1], 265);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [209, 207, 204, 199, 202, 198, 191, 255, 3, 0], "WURMPLE");
            mapper.AssertAreEqual("player.team.3.level", 0x54, [2], 2);
            mapper.AssertAreEqual("player.team.3.exp", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("player.team.3.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [176, 175, 19, 151], true);
            mapper.AssertAreEqual("player.team.3.nature", 4);
            mapper.AssertAreEqual("player.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0x34, [31], 31);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0x2E, [81, 0], "String Shot");
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0x56, [14, 0], 14);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0x58, [14, 0], 14);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0x5E, [5, 0], 5);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0x62, [5, 0], 5);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0x48, [176, 175, 19, 151], 16);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0x48, [176, 175, 19, 151], 29);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0x48, [176, 175, 19, 151], 7);
            mapper.AssertAreEqual("player.team.3.ivs.special_attack", 0x48, [176, 175, 19, 151], 17);
            mapper.AssertAreEqual("player.team.3.ivs.special_defense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.internals.personality_value", 405712429);
            mapper.AssertAreEqual("player.team.3.internals.checksum", 0x1C, [0, 234], 59904);
            mapper.AssertAreEqual("player.team.3.misc.is_egg", 0x28, [0, 72, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.3.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.3.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.3.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.3.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.pokerus_status", 0x24, [8], 8);
            mapper.AssertAreEqual("player.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.robbins_obedience", 0x2C, [33, 0, 81, 0], 5308449);
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.nature", 0);
            mapper.AssertAreEqual("player.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.nature", 0);
            mapper.AssertAreEqual("player.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0x2026D22, [0], false);
            mapper.AssertAreEqual("bag.quantity_decryption_key", 0x2024B14, [90, 52], 13402);
            mapper.AssertAreEqual("bag.money", 0x2025EA4, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.0.item", 0x2025F74, [14, 0], "Antidote");
            mapper.AssertAreEqual("bag.items.0.quantity", 0x2025F76, [91, 52], 1);
            mapper.AssertAreEqual("bag.items.1.item", 0x2025F78, [0, 0], null);
            mapper.AssertAreEqual("bag.items.1.quantity", 0x2025F7A, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.2.item", 0x2025F7C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.2.quantity", 0x2025F7E, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.3.item", 0x2025F80, [0, 0], null);
            mapper.AssertAreEqual("bag.items.3.quantity", 0x2025F82, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.4.item", 0x2025F84, [0, 0], null);
            mapper.AssertAreEqual("bag.items.4.quantity", 0x2025F86, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.5.item", 0x2025F88, [0, 0], null);
            mapper.AssertAreEqual("bag.items.5.quantity", 0x2025F8A, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.6.item", 0x2025F8C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.6.quantity", 0x2025F8E, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.7.item", 0x2025F90, [0, 0], null);
            mapper.AssertAreEqual("bag.items.7.quantity", 0x2025F92, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.8.item", 0x2025F94, [0, 0], null);
            mapper.AssertAreEqual("bag.items.8.quantity", 0x2025F96, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.9.item", 0x2025F98, [0, 0], null);
            mapper.AssertAreEqual("bag.items.9.quantity", 0x2025F9A, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.10.item", 0x2025F9C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.10.quantity", 0x2025F9E, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.11.item", 0x2025FA0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.11.quantity", 0x2025FA2, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.12.item", 0x2025FA4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.12.quantity", 0x2025FA6, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.13.item", 0x2025FA8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.13.quantity", 0x2025FAA, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0x2025FAC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.14.quantity", 0x2025FAE, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.15.item", 0x2025FB0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.15.quantity", 0x2025FB2, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0x2025FB4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0x2025FB6, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0x2025FB8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0x2025FBA, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0x2025FBC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0x2025FBE, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0x2025FC0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0x2025FC2, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.20.item", 0x2025FC4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.20.quantity", 0x2025FC6, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.21.item", 0x2025FC8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.21.quantity", 0x2025FCA, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.22.item", 0x2025FCC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.22.quantity", 0x2025FCE, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.23.item", 0x2025FD0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.23.quantity", 0x2025FD2, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.24.item", 0x2025FD4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.24.quantity", 0x2025FD6, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.25.item", 0x2025FD8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.25.quantity", 0x2025FDA, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.26.item", 0x2025FDC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.26.quantity", 0x2025FDE, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.27.item", 0x2025FE0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.27.quantity", 0x2025FE2, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.28.item", 0x2025FE4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.28.quantity", 0x2025FE6, [90, 52], 0);
            mapper.AssertAreEqual("bag.items.29.item", 0x2025FE8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.29.quantity", 0x2025FEA, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.0.item", 0x2025FEC, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.0.quantity", 0x2025FEE, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.1.item", 0x2025FF0, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.1.quantity", 0x2025FF2, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.2.item", 0x2025FF4, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.2.quantity", 0x2025FF6, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.3.item", 0x2025FF8, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.3.quantity", 0x2025FFA, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.4.item", 0x2025FFC, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.4.quantity", 0x2025FFE, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.5.item", 0x2026000, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.5.quantity", 0x2026002, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.6.item", 0x2026004, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.6.quantity", 0x2026006, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.7.item", 0x2026008, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.7.quantity", 0x202600A, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.8.item", 0x202600C, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.8.quantity", 0x202600E, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.9.item", 0x2026010, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.9.quantity", 0x2026012, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.10.item", 0x2026014, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.10.quantity", 0x2026016, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.11.item", 0x2026018, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.11.quantity", 0x202601A, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.12.item", 0x202601C, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.12.quantity", 0x202601E, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.13.item", 0x2026020, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.13.quantity", 0x2026022, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.14.item", 0x2026024, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.14.quantity", 0x2026026, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.15.item", 0x2026028, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.15.quantity", 0x202602A, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.16.item", 0x202602C, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.16.quantity", 0x202602E, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.17.item", 0x2026030, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.17.quantity", 0x2026032, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.18.item", 0x2026034, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.18.quantity", 0x2026036, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.19.item", 0x2026038, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.19.quantity", 0x202603A, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.20.item", 0x202603C, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.20.quantity", 0x202603E, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.21.item", 0x2026040, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.21.quantity", 0x2026042, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.22.item", 0x2026044, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.22.quantity", 0x2026046, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.23.item", 0x2026048, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.23.quantity", 0x202604A, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.24.item", 0x202604C, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.24.quantity", 0x202604E, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.25.item", 0x2026050, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.25.quantity", 0x2026052, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.26.item", 0x2026054, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.26.quantity", 0x2026056, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.27.item", 0x2026058, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.27.quantity", 0x202605A, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.28.item", 0x202605C, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.28.quantity", 0x202605E, [90, 52], 0);
            mapper.AssertAreEqual("bag.key_items.29.item", 0x2026060, [0, 0], null);
            mapper.AssertAreEqual("bag.key_items.29.quantity", 0x2026062, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.0.item", 0x2026064, [4, 0], "Poke Ball");
            mapper.AssertAreEqual("bag.balls.0.quantity", 0x2026066, [84, 52], 14);
            mapper.AssertAreEqual("bag.balls.1.item", 0x2026068, [12, 0], "Premier Ball");
            mapper.AssertAreEqual("bag.balls.1.quantity", 0x202606A, [91, 52], 1);
            mapper.AssertAreEqual("bag.balls.2.item", 0x202606C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.2.quantity", 0x202606E, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.3.item", 0x2026070, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.3.quantity", 0x2026072, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.4.item", 0x2026074, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.4.quantity", 0x2026076, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.5.item", 0x2026078, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.5.quantity", 0x202607A, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.6.item", 0x202607C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.6.quantity", 0x202607E, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.7.item", 0x2026080, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.7.quantity", 0x2026082, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.8.item", 0x2026084, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.8.quantity", 0x2026086, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.9.item", 0x2026088, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.9.quantity", 0x202608A, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.10.item", 0x202608C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.10.quantity", 0x202608E, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.11.item", 0x2026090, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.11.quantity", 0x2026092, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.12.item", 0x2026094, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.12.quantity", 0x2026096, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.13.item", 0x2026098, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.13.quantity", 0x202609A, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.14.item", 0x202609C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.14.quantity", 0x202609E, [90, 52], 0);
            mapper.AssertAreEqual("bag.balls.15.item", 0x20260A0, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.15.quantity", 0x20260A2, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.0.item", 0x20260A4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.0.quantity", 0x20260A6, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.1.item", 0x20260A8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.1.quantity", 0x20260AA, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.2.item", 0x20260AC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.2.quantity", 0x20260AE, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.3.item", 0x20260B0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.3.quantity", 0x20260B2, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.4.item", 0x20260B4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.4.quantity", 0x20260B6, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.5.item", 0x20260B8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.5.quantity", 0x20260BA, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.6.item", 0x20260BC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.6.quantity", 0x20260BE, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.7.item", 0x20260C0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.7.quantity", 0x20260C2, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.8.item", 0x20260C4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.8.quantity", 0x20260C6, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.9.item", 0x20260C8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.9.quantity", 0x20260CA, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.10.item", 0x20260CC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.10.quantity", 0x20260CE, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.11.item", 0x20260D0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.11.quantity", 0x20260D2, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.12.item", 0x20260D4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.12.quantity", 0x20260D6, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.13.item", 0x20260D8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.13.quantity", 0x20260DA, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.14.item", 0x20260DC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.14.quantity", 0x20260DE, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.15.item", 0x20260E0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.15.quantity", 0x20260E2, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.16.item", 0x20260E4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.16.quantity", 0x20260E6, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.17.item", 0x20260E8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.17.quantity", 0x20260EA, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.18.item", 0x20260EC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.18.quantity", 0x20260EE, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.19.item", 0x20260F0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.19.quantity", 0x20260F2, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.20.item", 0x20260F4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.20.quantity", 0x20260F6, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.21.item", 0x20260F8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.21.quantity", 0x20260FA, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.22.item", 0x20260FC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.22.quantity", 0x20260FE, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.23.item", 0x2026100, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.23.quantity", 0x2026102, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.24.item", 0x2026104, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.24.quantity", 0x2026106, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.25.item", 0x2026108, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.25.quantity", 0x202610A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.26.item", 0x202610C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.26.quantity", 0x202610E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.27.item", 0x2026110, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.27.quantity", 0x2026112, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.28.item", 0x2026114, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.28.quantity", 0x2026116, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.29.item", 0x2026118, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.29.quantity", 0x202611A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.30.item", 0x202611C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.30.quantity", 0x202611E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.31.item", 0x2026120, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.31.quantity", 0x2026122, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.32.item", 0x2026124, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.32.quantity", 0x2026126, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.33.item", 0x2026128, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.33.quantity", 0x202612A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.34.item", 0x202612C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.34.quantity", 0x202612E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.35.item", 0x2026130, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.35.quantity", 0x2026132, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.36.item", 0x2026134, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.36.quantity", 0x2026136, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.37.item", 0x2026138, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.37.quantity", 0x202613A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.38.item", 0x202613C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.38.quantity", 0x202613E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.39.item", 0x2026140, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.39.quantity", 0x2026142, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.40.item", 0x2026144, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.40.quantity", 0x2026146, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.41.item", 0x2026148, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.41.quantity", 0x202614A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.42.item", 0x202614C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.42.quantity", 0x202614E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.43.item", 0x2026150, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.43.quantity", 0x2026152, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.44.item", 0x2026154, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.44.quantity", 0x2026156, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.45.item", 0x2026158, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.45.quantity", 0x202615A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.46.item", 0x202615C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.46.quantity", 0x202615E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.47.item", 0x2026160, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.47.quantity", 0x2026162, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.48.item", 0x2026164, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.48.quantity", 0x2026166, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.49.item", 0x2026168, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.49.quantity", 0x202616A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.50.item", 0x202616C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.50.quantity", 0x202616E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.51.item", 0x2026170, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.51.quantity", 0x2026172, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.52.item", 0x2026174, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.52.quantity", 0x2026176, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.53.item", 0x2026178, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.53.quantity", 0x202617A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.54.item", 0x202617C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.54.quantity", 0x202617E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.55.item", 0x2026180, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.55.quantity", 0x2026182, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.56.item", 0x2026184, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.56.quantity", 0x2026186, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.57.item", 0x2026188, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.57.quantity", 0x202618A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.58.item", 0x202618C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.58.quantity", 0x202618E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.59.item", 0x2026190, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.59.quantity", 0x2026192, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.60.item", 0x2026194, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.60.quantity", 0x2026196, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.61.item", 0x2026198, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.61.quantity", 0x202619A, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.62.item", 0x202619C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.62.quantity", 0x202619E, [90, 52], 0);
            mapper.AssertAreEqual("bag.tmhm.63.item", 0x20261A0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.63.quantity", 0x20261A2, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.0.item", 0x20261A4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.0.quantity", 0x20261A6, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.1.item", 0x20261A8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.1.quantity", 0x20261AA, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.2.item", 0x20261AC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.2.quantity", 0x20261AE, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.3.item", 0x20261B0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.3.quantity", 0x20261B2, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.4.item", 0x20261B4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.4.quantity", 0x20261B6, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.5.item", 0x20261B8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.5.quantity", 0x20261BA, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.6.item", 0x20261BC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.6.quantity", 0x20261BE, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.7.item", 0x20261C0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.7.quantity", 0x20261C2, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.8.item", 0x20261C4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.8.quantity", 0x20261C6, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.9.item", 0x20261C8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.9.quantity", 0x20261CA, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.10.item", 0x20261CC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.10.quantity", 0x20261CE, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.11.item", 0x20261D0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.11.quantity", 0x20261D2, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.12.item", 0x20261D4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.12.quantity", 0x20261D6, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.13.item", 0x20261D8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.13.quantity", 0x20261DA, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.14.item", 0x20261DC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.14.quantity", 0x20261DE, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.15.item", 0x20261E0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.15.quantity", 0x20261E2, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.16.item", 0x20261E4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.16.quantity", 0x20261E6, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.17.item", 0x20261E8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.17.quantity", 0x20261EA, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.18.item", 0x20261EC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.18.quantity", 0x20261EE, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.19.item", 0x20261F0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.19.quantity", 0x20261F2, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.20.item", 0x20261F4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.20.quantity", 0x20261F6, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.21.item", 0x20261F8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.21.quantity", 0x20261FA, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.22.item", 0x20261FC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.22.quantity", 0x20261FE, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.23.item", 0x2026200, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.23.quantity", 0x2026202, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.24.item", 0x2026204, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.24.quantity", 0x2026206, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.25.item", 0x2026208, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.25.quantity", 0x202620A, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.26.item", 0x202620C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.26.quantity", 0x202620E, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.27.item", 0x2026210, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.27.quantity", 0x2026212, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.28.item", 0x2026214, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.28.quantity", 0x2026216, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.29.item", 0x2026218, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.29.quantity", 0x202621A, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.30.item", 0x202621C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.30.quantity", 0x202621E, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.31.item", 0x2026220, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.31.quantity", 0x2026222, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.32.item", 0x2026224, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.32.quantity", 0x2026226, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.33.item", 0x2026228, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.33.quantity", 0x202622A, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.34.item", 0x202622C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.34.quantity", 0x202622E, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.35.item", 0x2026230, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.35.quantity", 0x2026232, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.36.item", 0x2026234, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.36.quantity", 0x2026236, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.37.item", 0x2026238, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.37.quantity", 0x202623A, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.38.item", 0x202623C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.38.quantity", 0x202623E, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.39.item", 0x2026240, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.39.quantity", 0x2026242, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.40.item", 0x2026244, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.40.quantity", 0x2026246, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.41.item", 0x2026248, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.41.quantity", 0x202624A, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.42.item", 0x202624C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.42.quantity", 0x202624E, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.43.item", 0x2026250, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.43.quantity", 0x2026252, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.44.item", 0x2026254, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.44.quantity", 0x2026256, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.45.item", 0x2026258, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.45.quantity", 0x202625A, [90, 52], 0);
            mapper.AssertAreEqual("bag.berries.46.item", 0x202625C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.46.quantity", 0x202625E, [0, 0], 13402);
            mapper.AssertAreEqual("overworld.map_name", 0x20322E4, [0, 10], "OLDALE_TOWN");
            mapper.AssertAreEqual("overworld.map_index", 0x20322E4, [0, 10], 2560);
            mapper.AssertAreEqual("overworld.walk_run_state", 0x2037078, [255], null);
            mapper.AssertAreEqual("overworld.safari_steps", 0x2039996, [0], 0);
            mapper.AssertAreEqual("battle.player.team_count", 0x20244E9, [4], 4);
            mapper.AssertAreEqual("battle.player.party_position", 0x202406E, [0], 0);
            mapper.AssertAreEqual("battle.player.party_position_2", 0x202406F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0x2024084, [24, 1], "Torchic");
            mapper.AssertAreEqual("battle.player.active_pokemon.dex_number", 0x2024084, [24, 1], 255);
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0x20240B4, [189, 194, 195, 189, 197, 191, 200, 163, 255, 0, 0], "CHICKEN2");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0x20240AE, [8], 8);
            mapper.AssertAreEqual("battle.player.active_pokemon.exp", 0x20240C8, [57, 1, 0, 0], 313);
            mapper.AssertAreEqual("battle.player.active_pokemon.friendship", 0x20240AF, [85], 85);
            mapper.AssertAreEqual("battle.player.active_pokemon.personality_value", 0x20240CC, [16, 147, 69, 106], 1782944528);
            mapper.AssertAreEqual("battle.player.active_pokemon.ability", 0x20240A4, [66], "Blaze");
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0x20240B2, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.focus_energy", 0x20240D6, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0x20240A5, [10], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0x20240A6, [10], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.status_1", 0x20240D0, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_2", 0x20240D0, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.ot_name", 0x20240C0, [187, 255, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0x2024090, [10, 0], "Scratch");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0x20240A8, [32], 32);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0x2024092, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0x20240A9, [40], 40);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0x2024094, [116, 0], "Focus Energy");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0x20240AA, [30], 30);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0x2024096, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0x20240AB, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0x20240AC, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0x20240B0, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0x2024086, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0x2024088, [12, 0], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0x202408A, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0x202408C, [14, 0], 14);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0x202408E, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.hp", 0x2024098, [100, 198, 38, 50], 4);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.attack", 0x2024098, [100, 198, 38, 50], 19);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.defense", 0x2024098, [100, 198, 38, 50], 17);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.speed", 0x2024098, [100, 198, 38, 50], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_attack", 0x2024098, [100, 198, 38, 50], 2);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_defense", 0x2024098, [100, 198, 38, 50], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0x202409D, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0x202409E, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0x202409F, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0x20240A0, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0x20240A1, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0x20240A2, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0x20240A3, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.species", 0x2024134, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.dex_number", 0x2024134, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nickname", 0x2024164, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.level", 0x202415E, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.exp", 0x2024178, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.friendship", 0x202415F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.personality_value", 0x202417C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ability", 0x2024154, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.held_item", 0x2024162, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.focus_energy", 0x2024186, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_1", 0x2024155, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_2", 0x2024156, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_1", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_2", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ot_name", 0x2024170, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.move", 0x2024140, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp", 0x2024158, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.move", 0x2024142, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp", 0x2024159, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.move", 0x2024144, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp", 0x202415A, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.move", 0x2024146, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp", 0x202415B, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp", 0x202415C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp_max", 0x2024160, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.attack", 0x2024136, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.defense", 0x2024138, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.speed", 0x202413A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_attack", 0x202413C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_defense", 0x202413E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.hp", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.attack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.defense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.speed", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_attack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_defense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.attack", 0x202414D, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.defense", 0x202414E, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.speed", 0x202414F, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_attack", 0x2024150, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_defense", 0x2024151, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.accuracy", 0x2024152, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.evasion", 0x2024153, [0], -6);
            mapper.AssertAreEqual("battle.player.team.0.species", 0x20, [24, 1], "Torchic");
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0x20, [24, 1], 255);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0x8, [189, 194, 195, 189, 197, 191, 200, 163, 255, 255], "CHICKEN2");
            mapper.AssertAreEqual("battle.player.team.0.level", 0x54, [8], 8);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0x24, [80, 1, 0, 0], 336);
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("battle.player.team.0.ability", 0x48, [100, 198, 38, 50], false);
            mapper.AssertAreEqual("battle.player.team.0.nature", 3);
            mapper.AssertAreEqual("battle.player.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.0.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("battle.player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0x2C, [10, 0], "Scratch");
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0x34, [32], 32);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0x30, [116, 0], "Focus Energy");
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0x36, [30], 30);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0x5A, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0x5E, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_attack", 0x60, [14, 0], 14);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_defense", 0x62, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.team.0.ivs.hp", 0x48, [100, 198, 38, 50], 4);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0x48, [100, 198, 38, 50], 19);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0x48, [100, 198, 38, 50], 17);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0x48, [100, 198, 38, 50], 13);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_attack", 0x48, [100, 198, 38, 50], 2);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_defense", 0x48, [100, 198, 38, 50], 25);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0x38, [2], 2);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0x39, [4], 4);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0x3B, [1], 1);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.internals.personality_value", 1782944528);
            mapper.AssertAreEqual("battle.player.team.0.internals.checksum", 0x1C, [98, 180], 46178);
            mapper.AssertAreEqual("battle.player.team.0.misc.is_egg", 0x28, [0, 90, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.player.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.player.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.player.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.pokerus_status", 0x24, [80], 80);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("battle.player.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.robbins_obedience", 0x2C, [10, 0, 45, 0], 2949130);
            mapper.AssertAreEqual("battle.player.team.1.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0x20, [30, 1], 261);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0x8, [188, 189, 188, 190, 188, 255, 255, 255, 255, 255], "BCBDB");
            mapper.AssertAreEqual("battle.player.team.1.level", 0x54, [2], 2);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("battle.player.team.1.ability", 0x48, [162, 231, 26, 22], false);
            mapper.AssertAreEqual("battle.player.team.1.nature", 15);
            mapper.AssertAreEqual("battle.player.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("battle.player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0x58, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0x5A, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0x5E, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_defense", 0x62, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.1.ivs.hp", 0x48, [162, 231, 26, 22], 2);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0x48, [162, 231, 26, 22], 29);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0x48, [162, 231, 26, 22], 25);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0x48, [162, 231, 26, 22], 21);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_attack", 0x48, [162, 231, 26, 22], 1);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_defense", 0x48, [162, 231, 26, 22], 11);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.personality_value", 3493365440);
            mapper.AssertAreEqual("battle.player.team.1.internals.checksum", 0x1C, [168, 120], 30888);
            mapper.AssertAreEqual("battle.player.team.1.misc.is_egg", 0x28, [0, 72, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.player.team.1.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.player.team.1.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.player.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.pokerus_status", 0x24, [8], 8);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.robbins_obedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("battle.player.team.2.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0x20, [30, 1], 261);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0x8, [189, 189, 189, 189, 189, 189, 189, 189, 189, 189], "CCCCCCCCCC");
            mapper.AssertAreEqual("battle.player.team.2.level", 0x54, [3], 3);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0x24, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("battle.player.team.2.ability", 0x48, [52, 231, 102, 40], false);
            mapper.AssertAreEqual("battle.player.team.2.nature", 1);
            mapper.AssertAreEqual("battle.player.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0x34, [35], 35);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0x56, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0x58, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0x5A, [9, 0], 9);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0x5E, [7, 0], 7);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_defense", 0x62, [7, 0], 7);
            mapper.AssertAreEqual("battle.player.team.2.ivs.hp", 0x48, [52, 231, 102, 40], 20);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0x48, [52, 231, 102, 40], 25);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0x48, [52, 231, 102, 40], 25);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0x48, [52, 231, 102, 40], 13);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_attack", 0x48, [52, 231, 102, 40], 6);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_defense", 0x48, [52, 231, 102, 40], 20);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.personality_value", 3790259126);
            mapper.AssertAreEqual("battle.player.team.2.internals.checksum", 0x1C, [154, 136], 34970);
            mapper.AssertAreEqual("battle.player.team.2.misc.is_egg", 0x28, [0, 70, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.player.team.2.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.player.team.2.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.player.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.pokerus_status", 0x24, [27], 27);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.robbins_obedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("battle.player.team.3.species", 0x20, [34, 1], "Wurmple");
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0x20, [34, 1], 265);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0x8, [209, 207, 204, 199, 202, 198, 191, 255, 3, 0], "WURMPLE");
            mapper.AssertAreEqual("battle.player.team.3.level", 0x54, [2], 2);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("battle.player.team.3.ability", 0x48, [176, 175, 19, 151], true);
            mapper.AssertAreEqual("battle.player.team.3.nature", 4);
            mapper.AssertAreEqual("battle.player.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("battle.player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0x34, [31], 31);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0x2E, [81, 0], "String Shot");
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0x56, [14, 0], 14);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0x58, [14, 0], 14);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0x5E, [5, 0], 5);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_defense", 0x62, [5, 0], 5);
            mapper.AssertAreEqual("battle.player.team.3.ivs.hp", 0x48, [176, 175, 19, 151], 16);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0x48, [176, 175, 19, 151], 29);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0x48, [176, 175, 19, 151], 7);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_attack", 0x48, [176, 175, 19, 151], 17);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_defense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.personality_value", 405712429);
            mapper.AssertAreEqual("battle.player.team.3.internals.checksum", 0x1C, [0, 234], 59904);
            mapper.AssertAreEqual("battle.player.team.3.misc.is_egg", 0x28, [0, 72, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.player.team.3.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.player.team.3.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.player.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.pokerus_status", 0x24, [8], 8);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.robbins_obedience", 0x2C, [33, 0, 81, 0], 5308449);
            mapper.AssertAreEqual("battle.player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.4.nature", 0);
            mapper.AssertAreEqual("battle.player.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.player.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.5.nature", 0);
            mapper.AssertAreEqual("battle.player.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.player.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.trainer", 0x2038BCE, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.id", 0x2038BCE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.party_position", 0x202406F, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.species", 0x2024134, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.dex_number", 0x2024134, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nickname", 0x2024164, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.ally.active_pokemon.level", 0x202415E, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.exp", 0x2024178, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.friendship", 0x202415F, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.personality_value", 0x202417C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ability", 0x2024154, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.held_item", 0x2024162, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.focus_energy", 0x2024186, [0], false);
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_1", 0x2024155, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_2", 0x2024156, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_1", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_2", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ot_name", 0x2024170, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.move", 0x2024140, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp", 0x2024158, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.move", 0x2024142, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp", 0x2024159, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.move", 0x2024144, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp", 0x202415A, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.move", 0x2024146, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp", 0x202415B, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp", 0x202415C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp_max", 0x2024160, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.attack", 0x2024136, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.defense", 0x2024138, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.speed", 0x202413A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_attack", 0x202413C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_defense", 0x202413E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.hp", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.attack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.defense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.speed", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_attack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_defense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.attack", 0x202414D, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.defense", 0x202414E, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.speed", 0x202414F, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_attack", 0x2024150, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_defense", 0x2024151, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.accuracy", 0x2024152, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.evasion", 0x2024153, [0], -6);
            mapper.AssertAreEqual("battle.ally.team.0.species", 0x20, [34, 1], "Wurmple");
            mapper.AssertAreEqual("battle.ally.team.0.dex_number", 0x20, [34, 1], 265);
            mapper.AssertAreEqual("battle.ally.team.0.nickname", 0x8, [209, 207, 204, 199, 202, 198, 191, 255, 3, 0], "WURMPLE");
            mapper.AssertAreEqual("battle.ally.team.0.level", 0x54, [2], 2);
            mapper.AssertAreEqual("battle.ally.team.0.exp", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("battle.ally.team.0.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("battle.ally.team.0.ability", 0x48, [176, 175, 19, 151], true);
            mapper.AssertAreEqual("battle.ally.team.0.nature", 4);
            mapper.AssertAreEqual("battle.ally.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("battle.ally.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.ally.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp", 0x34, [31], 31);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.move", 0x2E, [81, 0], "String Shot");
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp", 0x56, [14, 0], 14);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp_max", 0x58, [14, 0], 14);
            mapper.AssertAreEqual("battle.ally.team.0.stats.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("battle.ally.team.0.stats.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("battle.ally.team.0.stats.speed", 0x5E, [5, 0], 5);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_attack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_defense", 0x62, [5, 0], 5);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.hp", 0x48, [176, 175, 19, 151], 16);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.attack", 0x48, [176, 175, 19, 151], 29);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.defense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.speed", 0x48, [176, 175, 19, 151], 7);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_attack", 0x48, [176, 175, 19, 151], 17);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_defense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("battle.ally.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.personality_value", 405712429);
            mapper.AssertAreEqual("battle.ally.team.0.internals.checksum", 0x1C, [0, 234], 59904);
            mapper.AssertAreEqual("battle.ally.team.0.misc.is_egg", 0x28, [0, 72, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.ally.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.ally.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.ally.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.pokerus_status", 0x24, [8], 8);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.robbins_obedience", 0x2C, [33, 0, 81, 0], 5308449);
            mapper.AssertAreEqual("battle.ally.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.ally.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.nature", 0);
            mapper.AssertAreEqual("battle.ally.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.ally.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.ally.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.ally.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.nature", 0);
            mapper.AssertAreEqual("battle.ally.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.ally.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.ally.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0x2038BCA, [23, 2], "RIVAL_MAY_ROUTE_103_TORCHIC");
            mapper.AssertAreEqual("battle.opponent.trainer", 0x2038BCA, [23, 2], "RIVAL_MAY_ROUTE_103_TORCHIC");
            mapper.AssertAreEqual("battle.opponent.id", 0x2038BCA, [23, 2], 535);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x20244EA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.party_position", 0x2024070, [0], 0);
            mapper.AssertAreEqual("battle.opponent.party_position_2", 0x2024071, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x20240DC, [30, 1], "Poochyena");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0x20240DC, [30, 1], 261);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x202410C, [202, 201, 201, 189, 194, 211, 191, 200, 187, 255, 0], "POOCHYENA");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x2024106, [3], 3);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x2024120, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x2024107, [70], 70);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.personality_value", 0x2024124, [111, 134, 9, 1], 17401455);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x20240FC, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x202410A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.focus_energy", 0x202412E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x20240FD, [17], "Dark");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x20240FE, [17], "Dark");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_1", 0x2024128, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_2", 0x2024128, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x2024118, [187, 255, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x20240E8, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x2024100, [33], 33);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x20240EA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x2024101, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x20240EC, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x2024102, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x20240EE, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x2024103, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x2024104, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x2024108, [15, 0], 15);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x20240DE, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x20240E0, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x20240E2, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x20240E4, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x20240E6, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x20240F0, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x20240F0, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x20240F0, [115, 90, 33, 143], 22);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x20240F0, [115, 90, 33, 143], 2);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x20240F0, [115, 90, 33, 143], 18);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x20240F0, [115, 90, 33, 143], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x20240F5, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x20240F6, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x20240F7, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x20240F8, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x20240F9, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x20240FA, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x20240FB, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.species", 0x202418C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.dex_number", 0x202418C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.nickname", 0x20241BC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.level", 0x20241B6, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.exp", 0x20241D0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.friendship", 0x20241B7, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.personality_value", 0x20241D4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ability", 0x20241AC, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.held_item", 0x20241BA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.focus_energy", 0x20241DE, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.type_1", 0x20241AD, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.type_2", 0x20241AE, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.status_1", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.status_2", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ot_name", 0x20241C8, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.move", 0x2024198, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.pp", 0x20241B0, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.move", 0x202419A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.pp", 0x20241B1, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.move", 0x202419C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.pp", 0x20241B2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.move", 0x202419E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.pp", 0x20241B3, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.hp", 0x20241B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.hp_max", 0x20241B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.attack", 0x202418E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.defense", 0x2024190, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.speed", 0x2024192, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.special_attack", 0x2024194, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.special_defense", 0x2024196, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.hp", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.attack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.defense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.speed", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.special_attack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.special_defense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.attack", 0x20241A5, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.defense", 0x20241A6, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.speed", 0x20241A7, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.special_attack", 0x20241A8, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.special_defense", 0x20241A9, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.accuracy", 0x20241AA, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.evasion", 0x20241AB, [0], -6);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x20, [30, 1], 261);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x8, [202, 201, 201, 189, 194, 211, 191, 200, 187, 255], "POOCHYENA");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x54, [3], 3);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x24, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0x4, [62, 47], 12094);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x48, [115, 90, 33, 143], true);
            mapper.AssertAreEqual("battle.opponent.team.0.nature", 5);
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x34, [33], 33);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x58, [15, 0], 15);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x5C, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x5E, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x60, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x62, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x48, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x48, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x48, [115, 90, 33, 143], 22);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x48, [115, 90, 33, 143], 2);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x48, [115, 90, 33, 143], 18);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x48, [115, 90, 33, 143], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 17401455);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x1C, [146, 99], 25490);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.is_egg", 0x28, [0, 70, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ot_name", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.pokerus_status", 0x24, [27], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.robbins_obedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.name", 0x2038BCC, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.trainer", 0x2038BCC, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.id", 0x2038BCC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.party_position_2", 0x2024071, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.species", 0x202418C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.dex_number", 0x202418C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nickname", 0x20241BC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.level", 0x20241B6, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.exp", 0x20241D0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.friendship", 0x20241B7, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.personality_value", 0x20241D4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ability", 0x20241AC, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.held_item", 0x20241BA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.focus_energy", 0x20241DE, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_1", 0x20241AD, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_2", 0x20241AE, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.status_1", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.status_2", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ot_name", 0x20241C8, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.move", 0x2024198, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp", 0x20241B0, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.move", 0x202419A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp", 0x20241B1, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.move", 0x202419C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp", 0x20241B2, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.move", 0x202419E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp", 0x20241B3, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp", 0x20241B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp_max", 0x20241B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.attack", 0x202418E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.defense", 0x2024190, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.speed", 0x2024192, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_attack", 0x2024194, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_defense", 0x2024196, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.hp", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.attack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.defense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.speed", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_attack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_defense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.attack", 0x20241A5, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.defense", 0x20241A6, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.speed", 0x20241A7, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_attack", 0x20241A8, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_defense", 0x20241A9, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.accuracy", 0x20241AA, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.evasion", 0x20241AB, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.team.0.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent_2.team.0.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nature", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent_2.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent_2.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nature", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent_2.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent_2.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nature", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent_2.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.field.player.safeguard", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.reflect", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.lightscreen", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguard_count", 0x202429A, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightscreen_count", 0x2024296, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflect_count", 0x2024294, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.safeguard", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.reflect", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.safeguard_count", 0x20242A5, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen_count", 0x20242A1, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.reflect_count", 0x202429F, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x20243CC, [0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x20243F8, [0], 0);
            mapper.AssertAreEqual("battle.flags.double", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.link", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.is_battle", 0x2022FEC, [4, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.flags.trainer", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.first_battle", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.link_in_battle", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.multi", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.safari", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.battle_tower", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.old_man_tutorial", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.roamer", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.eReader_trainer", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.kyogre_groudon", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.ghost_unveiled", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.regi", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.two_opponents", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.pokedude", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.wild_scripted", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.legenadry_frlg", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.flags.trainer_tower", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.other.battle_outcomes", 0x202433A, [1], "WON");
            mapper.AssertAreEqual("battle.other.battle_background_tiles", 0x202305C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.other.battle_background_tiles_buffer", 0x2023060, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.other.battle_dialogue", 0x2023064, [25], null);
            mapper.AssertAreEqual("events.hide_sky_pillar_top_rayquaza_still", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.set_wall_clock", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.rescued_birch", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.legendaries_in_sootopolis", 0x2026C8E, [199], false);
            mapper.AssertAreEqual("events.hide_contest_poke_ball", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.met_rival_mom", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.birch_aide_met", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.declined_bike", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.received_bike", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.wattson_rematch_available", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.collected_all_silver_symbols", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.good_luck_safari_zone", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.received_wailmer_pail", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.received_pokeblock_case", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.received_secret_power", 0x2026C90, [0], false);
            mapper.AssertAreEqual("events.met_team_aqua_harbor", 0x2026C90, [0], false);
            mapper.AssertAreEqual("events.tv_explained", 0x2026C90, [0], false);
            mapper.AssertAreEqual("events.mauville_gym_barriers_state", 0x2026C90, [0], false);
            mapper.AssertAreEqual("events.oceanic_museum_met_reporter", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.received_hm_strength", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.received_hm_rock_smash", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.whiteout_to_lavaridge", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.received_hm_flash", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.received_hm_fly", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.groudon_awakened_magma_hideout", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.team_aqua_escaped_in_submarine", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.scott_call_battle_frontier", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.received_meteorite", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.adventure_started", 0x2026C92, [16], true);
            mapper.AssertAreEqual("events.defeated_magma_space_center", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.met_hidden_power_giver", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.cancel_battle_room_challenge", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.landmark_mirage_tower", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.received_tm_brick_break", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.received_hm_surf", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.received_hm_dive", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.register_rival_pokenav", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.defeated_rival_route_104", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.defeated_wally_victory_road", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.met_pretty_petal_shop_owner", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.enable_roxanne_first_call", 0x2026C94, [20], false);
            mapper.AssertAreEqual("events.kyogre_escaped_seafloor_cavern", 0x2026C94, [20], false);
            mapper.AssertAreEqual("events.defeated_rival_route103", 0x2026C94, [20], true);
            mapper.AssertAreEqual("events.received_doll_lanette", 0x2026C94, [20], false);
            mapper.AssertAreEqual("events.received_potion_oldale", 0x2026C94, [20], true);
            mapper.AssertAreEqual("events.received_amulet_coin", 0x2026C94, [20], false);
            mapper.AssertAreEqual("events.pending_daycare_egg", 0x2026C94, [20], false);
            mapper.AssertAreEqual("events.thanked_for_playing_with_wally", 0x2026C94, [20], false);
            mapper.AssertAreEqual("events.enable_first_wally_pokenav_call", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.received_hm_cut", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.scott_call_fortree_gym", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.defeated_evil_team_mt_chimney", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.received_6_soda_pop", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.defeated_seashore_house", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.devon_goods_stolen", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.recovered_devon_goods", 0x2026C95, [0], false);
            mapper.AssertAreEqual("events.returned_devon_goods", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.caught_lugia", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.caught_ho_oh", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.mr_briney_sailing_intro", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.dock_rejected_devon_goods", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.delivered_devon_goods", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.received_contest_pass", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.received_castform", 0x2026C96, [0], false);
            mapper.AssertAreEqual("events.received_super_rod", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.rustboro_npc_trade_completed", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.pacifidlog_npc_trade_completed", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.fortree_npc_trade_completed", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.battle_frontier_trade_done", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.force_mirage_tower_visible", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.sootopolis_archie_maxie_leave", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.interacted_with_devon_employee_goods_stolen", 0x2026C97, [0], false);
            mapper.AssertAreEqual("events.cool_painting_made", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.beauty_painting_made", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.cute_painting_made", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.smart_painting_made", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.tough_painting_made", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.received_tm_rock_tomb", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.received_tm_bulk_up", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.received_tm_shock_wave", 0x2026C98, [0], false);
            mapper.AssertAreEqual("events.received_tm_overheat", 0x2026C99, [192], false);
            mapper.AssertAreEqual("events.received_tm_facade", 0x2026C99, [192], false);
            mapper.AssertAreEqual("events.received_tm_aerial_ace", 0x2026C99, [192], false);
            mapper.AssertAreEqual("events.received_tm_calm_mind", 0x2026C99, [192], false);
            mapper.AssertAreEqual("events.received_tm_water_pulse", 0x2026C99, [192], false);
            mapper.AssertAreEqual("events.hide_secret_base_trainer", 0x2026C99, [192], false);
            mapper.AssertAreEqual("events.decoration_1", 0x2026C99, [192], true);
            mapper.AssertAreEqual("events.decoration_2", 0x2026C99, [192], true);
            mapper.AssertAreEqual("events.decoration_3", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_4", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_5", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_6", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_7", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_8", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_9", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_10", 0x2026C9A, [255], true);
            mapper.AssertAreEqual("events.decoration_11", 0x2026C9B, [15], true);
            mapper.AssertAreEqual("events.decoration_12", 0x2026C9B, [15], true);
            mapper.AssertAreEqual("events.decoration_13", 0x2026C9B, [15], true);
            mapper.AssertAreEqual("events.decoration_14", 0x2026C9B, [15], true);
            mapper.AssertAreEqual("events.received_pokenav", 0x2026C9B, [15], false);
            mapper.AssertAreEqual("events.delivered_steven_letter", 0x2026C9B, [15], false);
            mapper.AssertAreEqual("events.defeated_wally_mauville", 0x2026C9B, [15], false);
            mapper.AssertAreEqual("events.defeated_grunt_space_center_1f", 0x2026C9B, [15], false);
            mapper.AssertAreEqual("events.received_sun_stone_mossdeep", 0x2026C9C, [0], false);
            mapper.AssertAreEqual("events.wally_speech", 0x2026C9C, [0], false);
            mapper.AssertAreEqual("events.rusturf_tunnel_opened", 0x2026C9C, [0], false);
            mapper.AssertAreEqual("events.received_red_scarf", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.received_blue_scarf", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.received_pink_scarf", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.received_green_scarf", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.received_yellow_scarf", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.interacted_with_steven_space_center", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.encountered_latias_or_latios", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.met_archie_meteor_falls", 0x2026C9D, [0], false);
            mapper.AssertAreEqual("events.got_basement_key_from_wattson", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.got_tm_thunderbolt_from_wattson", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.fan_club_strength_shared", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.defeated_rival_rustboro", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.received_red_or_blue_orb", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.received_premier_ball_rustboro", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.enable_wally_match_call", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.enable_scott_match_call", 0x2026C9E, [0], false);
            mapper.AssertAreEqual("events.enable_mom_match_call", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.met_diving_treasure_hunter", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.met_wailmer_trainer", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.evil_leader_please_stop", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.received_go_goggles", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.wingull_sent_on_errand", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.received_mental_herb", 0x2026C9F, [0], false);
            mapper.AssertAreEqual("events.wingull_delivered_mail", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_20_coins", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_starter_doll", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_good_rod", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.regi_doors_opened", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_tm_return", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_tm_sludge_bomb", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_tm_roar", 0x2026CA0, [0], false);
            mapper.AssertAreEqual("events.received_tm_giga_drain", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.received_tm_rest", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.received_tm_attract", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.received_glass_ornament", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.received_silver_shield", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.received_gold_shield", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.used_storage_key", 0x2026CA1, [0], false);
            mapper.AssertAreEqual("events.used_room_1_key", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.used_room_2_key", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.used_room_4_key", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.used_room_6_key", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.met_prof_cozmo", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.received_wailmer_doll", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.received_chesto_berry_route_104", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.defeated_ss_tidal_trainers", 0x2026CA2, [0], false);
            mapper.AssertAreEqual("events.received_spelon_berry", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.received_pamtre_berry", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.received_watmel_berry", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.received_durin_berry", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.received_belue_berry", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.enable_rival_match_call", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.received_charcoal", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.latios_or_latias_roaming", 0x2026CA3, [0], false);
            mapper.AssertAreEqual("events.received_repeat_ball", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.received_old_rod", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.received_coin_case", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.returned_red_or_blue_orb", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.received_tm_snatch", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.received_tm_dig", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.received_tm_bullet_seed", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.entered_elite_four", 0x2026CA4, [0], false);
            mapper.AssertAreEqual("events.received_tm_hidden_power", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.received_tm_torment", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.received_lavaridge_egg", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.received_revived_fossil_mon", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.secret_base_registry_enabled", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.received_tm_thief", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.contest_sketch_created", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.evil_team_escaped_stern_spoke", 0x2026CA5, [0], false);
            mapper.AssertAreEqual("events.received_exp_share", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.pokerus_explained", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.received_running_shoes", 0x2026CA6, [4], true);
            mapper.AssertAreEqual("events.received_quick_claw", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.received_kings_rock", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.received_macho_brace", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.received_soothe_bell", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.received_white_herb", 0x2026CA6, [4], false);
            mapper.AssertAreEqual("events.received_soft_sand", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.enable_prof_birch_match_call", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.received_cleanse_tag", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.received_focus_band", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.declined_wally_battle_mauville", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.received_devon_scope", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.declined_rival_battle_lilycove", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.met_devon_employee", 0x2026CA7, [0], false);
            mapper.AssertAreEqual("events.met_rival_rustboro", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.received_silk_scarf", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.not_ready_for_battle_route_120", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.received_ss_ticket", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.met_rival_lilycove", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.met_rival_in_house_after_lilycove", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.exchanged_scanner", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.kecleon_fled_fortree", 0x2026CA8, [0], false);
            mapper.AssertAreEqual("events.petalburg_mart_expanded_items", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.received_miracle_seed", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.received_beldum", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.received_fanclub_tm_this_week", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.met_fanclub_younger_brother", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.rival_left_for_route103", 0x2026CA9, [32], true);
            mapper.AssertAreEqual("events.omit_dive_from_steven_letter", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.has_match_call", 0x2026CA9, [32], false);
            mapper.AssertAreEqual("events.added_match_call_to_pokenav", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.registered_steven_pokenav", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.enable_norman_match_call", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.steven_guides_to_cave_of_origin", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.met_archie_sootopolis", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.met_maxie_sootopolis", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.met_scott_rustboro", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.wallace_goes_to_sky_pillar", 0x2026CAA, [0], false);
            mapper.AssertAreEqual("events.received_hm_waterfall", 0x2026CAB, [0], false);
            mapper.AssertAreEqual("events.beat_magma_grunt_jagged_pass", 0x2026CAB, [0], false);
            mapper.AssertAreEqual("events.received_aurora_ticket", 0x2026CAB, [0], false);
            mapper.AssertAreEqual("events.received_mystic_ticket", 0x2026CAB, [0], false);
            mapper.AssertAreEqual("events.received_old_sea_map", 0x2026CAB, [0], false);
            mapper.AssertAreEqual("events.mirage_tower_visible", 0x2026CAD, [0], false);
            mapper.AssertAreEqual("events.chose_root_fossil", 0x2026CAD, [0], false);
            mapper.AssertAreEqual("events.chose_claw_fossil", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.received_powder_jar", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.chosen_multi_battle_npc_partner", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.met_battle_frontier_breeder", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.met_battle_frontier_maniac", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.entered_contest", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.met_slateport_fanclub_chairman", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.met_battle_frontier_gambler", 0x2026CAE, [0], false);
            mapper.AssertAreEqual("events.enable_mr_stone_pokenav", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.nurse_mentions_gold_card", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.met_frontier_beauty_move_tutor", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.met_frontier_swimmer_move_tutor", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.match_call_registered", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.rematch_rose", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.rematch_andres", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.rematch_dusty", 0x2026CAF, [0], false);
            mapper.AssertAreEqual("events.rematch_lola", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_ricky", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_lila_and_roy", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_cristin", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_brooke", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_wilton", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_valerie", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_cindy", 0x2026CB0, [0], false);
            mapper.AssertAreEqual("events.rematch_thalia", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_jessica", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_winston", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_steve", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_tony", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_nob", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_koji", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_fernando", 0x2026CB1, [0], false);
            mapper.AssertAreEqual("events.rematch_dalton", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_bernie", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_ethan", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_john_and_jay", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_jeffrey", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_cameron", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_jacki", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_walter", 0x2026CB2, [0], false);
            mapper.AssertAreEqual("events.rematch_karen", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_jerry", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_anna_and_meg", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_isabel", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_miguel", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_timothy", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_shelby", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_calvin", 0x2026CB3, [0], false);
            mapper.AssertAreEqual("events.rematch_elliot", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_isaiah", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_maria", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_abigail", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_dylan", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_katelyn", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_benjamin", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_pablo", 0x2026CB4, [0], false);
            mapper.AssertAreEqual("events.rematch_nicolas", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_robert", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_lao", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_cyndy", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_madeline", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_jenny", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_diana", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_amy_and_liv", 0x2026CB5, [0], false);
            mapper.AssertAreEqual("events.rematch_ernest", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_cory", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_edwin", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_lydia", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_isaac", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_gabrielle", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_catherine", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_jackson", 0x2026CB6, [0], false);
            mapper.AssertAreEqual("events.rematch_haley", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_james", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_trent", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_sawyer", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_kira_and_dan", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_wally", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_roxanne", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_brawly", 0x2026CB7, [0], false);
            mapper.AssertAreEqual("events.rematch_wattson", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_flannery", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_norman", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_winona", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_tate_and_liza", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_sidney", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_phoebe", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_glacia", 0x2026CB8, [0], false);
            mapper.AssertAreEqual("events.rematch_drake", 0x2026CB9, [0], false);
            mapper.AssertAreEqual("events.rematch_wallace", 0x2026CB9, [0], false);
            mapper.AssertAreEqual("events.defeated_deoxys", 0x2026CB9, [0], false);
            mapper.AssertAreEqual("events.battled_deoxys", 0x2026CB9, [0], false);
            mapper.AssertAreEqual("events.shown_eon_ticket", 0x2026CB9, [0], false);
            mapper.AssertAreEqual("events.shown_aurora_ticket", 0x2026CB9, [0], false);
            mapper.AssertAreEqual("events.shown_old_sea_map", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_swagger", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_rollout", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_fury_cutter", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_mimic", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_metronome", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_sleep_talk", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_substitute", 0x2026CBA, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_dynamicpunch", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_double_edge", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.move_tutor_taught_explosion", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.defeated_regirock", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.defeated_regice", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.defeated_registeel", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.defeated_kyogre", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.defeated_groudon", 0x2026CBB, [0], false);
            mapper.AssertAreEqual("events.defeated_rayquaza", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_voltorb_1_new_mauville", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_voltorb_2_new_mauville", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_voltorb_3_new_mauville", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_electrode_1_aqua_hideout", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_electrode_2_aqua_hideout", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_sudowoodo", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_mew", 0x2026CBC, [0], false);
            mapper.AssertAreEqual("events.defeated_latias_or_latios", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.caught_latias_or_latios", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.caught_mew", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.met_scott_after_obtaining_stone_badge", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.met_scott_in_verdanturf", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.met_scott_in_fallarbor", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.met_scott_in_lilycove", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.met_scott_in_evergrande", 0x2026CBD, [0], false);
            mapper.AssertAreEqual("events.met_scott_on_ss_tidal", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.scott_gives_battle_points", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.collected_all_gold_symbols", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.enable_roxanne_match_call", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.enable_brawly_match_call", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.enable_wattson_match_call", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.enable_flannery_match_call", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.enable_winona_match_call", 0x2026CBE, [0], false);
            mapper.AssertAreEqual("events.enable_tate_and_liza_match_call", 0x2026CBF, [0], false);
            mapper.AssertAreEqual("events.enable_juan_match_call", 0x2026CBF, [0], false);
            mapper.AssertAreEqual("events.shown_mystic_ticket", 0x2026CBF, [0], false);
            mapper.AssertAreEqual("events.defeated_ho_oh", 0x2026CBF, [0], false);
            mapper.AssertAreEqual("events.defeated_lugia", 0x2026CBF, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_done", 0x2026CC0, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_1", 0x2026CC0, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_2", 0x2026CC0, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_3", 0x2026CC0, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_4", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_5", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_6", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_7", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_8", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_9", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_10", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_11", 0x2026CC1, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_12", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_13", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_14", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.mystery_gift_15", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_lavaridge_town_ice_heal", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_trick_house_nugget", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_111_stardust", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_113_ether", 0x2026CC2, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_114_carbos", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_119_calcium", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_119_ultra_ball", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_123_super_repel", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_carbos", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_green_shard", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_pearl", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_big_pearl", 0x2026CC3, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_blue_shard", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_heart_scale_1", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_heart_scale", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_ultra_ball", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_stardust", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_pearl", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_yellow_shard", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_iron", 0x2026CC4, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_126_big_pearl", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_127_star_piece", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_127_hp_up", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_127_heart_scale", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_127_red_shard", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_128_protein", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_128_pearl", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_lilycove_city_heart_scale", 0x2026CC5, [0], false);
            mapper.AssertAreEqual("events.hidden_item_fallarbor_town_nugget", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_mt_pyre_exterior_ultra_ball", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_113_tm_double_team", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_abandoned_ship_rm_1_key", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_abandoned_ship_rm_2_key", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_abandoned_ship_rm_4_key", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_abandoned_ship_rm_6_key", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_ss_tidal_lower_deck_leftovers", 0x2026CC6, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_calcium", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_104_potion", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_underwater_124_heart_scale_2", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_121_hp_up", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_121_nugget", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_123_revive", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_114_revive", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_lilycove_city_pp_up", 0x2026CC7, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_104_super_potion", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_116_super_potion", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_106_stardust", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_106_heart_scale", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_granite_cave_b2f_everstone_1", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_granite_cave_b2f_everstone_2", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_109_revive", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_109_great_ball", 0x2026CC8, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_109_heart_scale_1", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_110_great_ball", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_110_revive", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_110_full_heal", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_111_protein", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_111_rare_candy", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_petalburg_woods_potion", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_petalburg_woods_tiny_mushroom_1", 0x2026CC9, [0], false);
            mapper.AssertAreEqual("events.hidden_item_petalburg_woods_tiny_mushroom_2", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_petalburg_woods_poke_ball", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_104_poke_ball", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_106_poke_ball", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_109_ether", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_110_poke_ball", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_118_heart_scale", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_118_iron", 0x2026CCA, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_119_full_heal", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_120_rare_candy_2", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_120_zinc", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_120_rare_candy_1", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_117_repel", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_121_full_heal", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_123_hyper_potion", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_lilycove_city_poke_ball", 0x2026CCB, [0], false);
            mapper.AssertAreEqual("events.hidden_item_jagged_pass_great_ball", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_jagged_pass_full_heal", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_mt_pyre_exterior_max_ether", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_mt_pyre_summit_zinc", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_mt_pyre_summit_rare_candy", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_victory_road_1f_ultra_ball", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_victory_road_b2f_elixir", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_victory_road_b2f_max_repel", 0x2026CCC, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_120_revive", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_104_antidote", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_108_rare_candy", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_119_max_ether", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_104_heart_scale", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_105_heart_scale", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_109_heart_scale_2", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_109_heart_scale_3", 0x2026CCD, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_128_heart_scale_1", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_128_heart_scale_2", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_128_heart_scale_3", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_petalburg_city_rare_candy", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_116_black_glasses", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_115_heart_scale", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_113_nugget", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_123_pp_up", 0x2026CCE, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_121_max_revive", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_artisan_cave_b1f_calcium", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_artisan_cave_b1f_zinc", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_artisan_cave_b1f_protein", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_artisan_cave_b1f_iron", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_safari_zone_south_east_full_restore", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_safari_zone_north_east_rare_candy", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_safari_zone_north_east_zinc", 0x2026CCF, [0], false);
            mapper.AssertAreEqual("events.hidden_item_safari_zone_south_east_pp_up", 0x2026CD0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_navel_rock_top_sacred_ash", 0x2026CD0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_123_rare_candy", 0x2026CD0, [0], false);
            mapper.AssertAreEqual("events.hidden_item_route_105_big_pearl", 0x2026CD0, [0], false);
            mapper.AssertAreEqual("events.hide_route_101_birch_starters_bag", 0x2026CDB, [16], true);
            mapper.AssertAreEqual("events.hide_apprentice", 0x2026CDB, [16], false);
            mapper.AssertAreEqual("events.hide_pokemon_center_2f_mystery_gift_man", 0x2026CDB, [16], false);
            mapper.AssertAreEqual("events.hide_union_room_player_1", 0x2026CDB, [16], false);
            mapper.AssertAreEqual("events.hide_union_room_player_2", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_union_room_player_3", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_union_room_player_4", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_union_room_player_5", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_union_room_player_6", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_union_room_player_7", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_union_room_player_8", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_1", 0x2026CDC, [0], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_2", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_3", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_4", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_5", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_6", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_safari_zone_south_construction_workers", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_mew", 0x2026CDD, [128], false);
            mapper.AssertAreEqual("events.hide_route_104_rival", 0x2026CDD, [128], true);
            mapper.AssertAreEqual("events.hide_route_101_birch_zigzagoon_battle", 0x2026CDE, [205], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_birchs_lab_birch", 0x2026CDE, [205], false);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_rival_bedroom", 0x2026CDE, [205], true);
            mapper.AssertAreEqual("events.hide_route_103_rival", 0x2026CDE, [205], true);
            mapper.AssertAreEqual("events.hide_petalburg_woods_devon_employee", 0x2026CDE, [205], false);
            mapper.AssertAreEqual("events.hide_petalburg_woods_aqua_grunt", 0x2026CDE, [205], false);
            mapper.AssertAreEqual("events.hide_petalburg_city_wally", 0x2026CDE, [205], true);
            mapper.AssertAreEqual("events.hide_mossdeep_city_stevens_house_invisible_ninja_boy", 0x2026CDE, [205], true);
            mapper.AssertAreEqual("events.hide_petalburg_city_wallys_mom", 0x2026CDF, [220], false);
            mapper.AssertAreEqual("events.hide_lilycove_fan_club_interviewer", 0x2026CDF, [220], true);
            mapper.AssertAreEqual("events.hide_rustboro_city_aqua_grunt", 0x2026CDF, [220], true);
            mapper.AssertAreEqual("events.hide_rustboro_city_devon_employee_1", 0x2026CDF, [220], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_room_9_kyogre_asleep", 0x2026CDF, [220], false);
            mapper.AssertAreEqual("events.hide_players_house_dad", 0x2026CDF, [220], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_rival_sibling", 0x2026CDF, [220], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_rival_sibling", 0x2026CE0, [188], false);
            mapper.AssertAreEqual("events.hide_mossdeep_city_space_center_magma_note", 0x2026CE0, [188], false);
            mapper.AssertAreEqual("events.hide_route_104_mr_briney", 0x2026CE0, [188], true);
            mapper.AssertAreEqual("events.hide_brineys_house_mr_briney", 0x2026CE0, [188], true);
            mapper.AssertAreEqual("events.hide_mr_briney_dewford_town", 0x2026CE0, [188], true);
            mapper.AssertAreEqual("events.hide_route_109_mr_briney", 0x2026CE0, [188], true);
            mapper.AssertAreEqual("events.hide_route_104_mr_briney_boat", 0x2026CE0, [188], false);
            mapper.AssertAreEqual("events.hide_mr_briney_boat_dewford_town", 0x2026CE0, [188], true);
            mapper.AssertAreEqual("events.hide_route_109_mr_briney_boat", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_brendan", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_may", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_safari_zone_south_east_expansion", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_lilycove_harbor_event_ticket_taker", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_slateport_city_scott", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_route_101_zigzagoon", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_victory_road_exit_wally", 0x2026CE1, [255], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mom_outside", 0x2026CE2, [189], true);
            mapper.AssertAreEqual("events.hide_mossdeep_city_space_center_1f_steven", 0x2026CE2, [189], false);
            mapper.AssertAreEqual("events.hide_littleroot_town_players_house_vigoroth_1", 0x2026CE2, [189], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_players_house_vigoroth_2", 0x2026CE2, [189], true);
            mapper.AssertAreEqual("events.hide_mossdeep_city_space_center_1f_team_magma", 0x2026CE2, [189], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_players_bedroom_mom", 0x2026CE2, [189], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_mom", 0x2026CE2, [189], false);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_mom", 0x2026CE2, [189], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_rival_bedroom", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_truck", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_truck", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_deoxys", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_birth_island_deoxys_triangle", 0x2026CE3, [239], false);
            mapper.AssertAreEqual("events.hide_mauville_city_scott", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_verdanturf_town_scott", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_fallarbor_town_battle_tent_scott", 0x2026CE3, [239], true);
            mapper.AssertAreEqual("events.hide_route_111_victor_winstrate", 0x2026CE4, [78], false);
            mapper.AssertAreEqual("events.hide_route_111_victoria_winstrate", 0x2026CE4, [78], true);
            mapper.AssertAreEqual("events.hide_route_111_vivi_winstrate", 0x2026CE4, [78], true);
            mapper.AssertAreEqual("events.hide_route_111_vicky_winstrate", 0x2026CE4, [78], true);
            mapper.AssertAreEqual("events.hide_petalburg_gym_norman", 0x2026CE4, [78], false);
            mapper.AssertAreEqual("events.hide_sky_pillar_top_rayquaza", 0x2026CE4, [78], false);
            mapper.AssertAreEqual("events.hide_lilycove_contest_hall_contest_attendant_1", 0x2026CE4, [78], true);
            mapper.AssertAreEqual("events.hide_lilycove_museum_curator", 0x2026CE4, [78], false);
            mapper.AssertAreEqual("events.hide_lilycove_museum_patron_1", 0x2026CE5, [63], true);
            mapper.AssertAreEqual("events.hide_lilycove_museum_patron_2", 0x2026CE5, [63], true);
            mapper.AssertAreEqual("events.hide_lilycove_museum_patron_3", 0x2026CE5, [63], true);
            mapper.AssertAreEqual("events.hide_lilycove_museum_patron_4", 0x2026CE5, [63], true);
            mapper.AssertAreEqual("events.hide_lilycove_museum_tourists", 0x2026CE5, [63], true);
            mapper.AssertAreEqual("events.hide_petalburg_gym_greeter", 0x2026CE5, [63], true);
            mapper.AssertAreEqual("events.hide_marine_cave_kyogre", 0x2026CE5, [63], false);
            mapper.AssertAreEqual("events.hide_terra_cave_groudon", 0x2026CE5, [63], false);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_rival_mom", 0x2026CE6, [229], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_rival_mom", 0x2026CE6, [229], false);
            mapper.AssertAreEqual("events.hide_route_119_scott", 0x2026CE6, [229], true);
            mapper.AssertAreEqual("events.hide_lilycove_motel_scott", 0x2026CE6, [229], false);
            mapper.AssertAreEqual("events.hide_mossdeep_city_scott", 0x2026CE6, [229], false);
            mapper.AssertAreEqual("events.hide_fanclub_old_lady", 0x2026CE6, [229], true);
            mapper.AssertAreEqual("events.hide_fanclub_boy", 0x2026CE6, [229], true);
            mapper.AssertAreEqual("events.hide_fanclub_little_boy", 0x2026CE6, [229], true);
            mapper.AssertAreEqual("events.hide_fanclub_lady", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_ever_grande_pokemon_center_1f_scott", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_rival", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_birch", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_route_111_gabby_and_ty_1", 0x2026CE7, [239], false);
            mapper.AssertAreEqual("events.hide_route_118_gabby_and_ty_1", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_route_120_gabby_and_ty_1", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_route_111_gabby_and_ty_3", 0x2026CE7, [239], true);
            mapper.AssertAreEqual("events.hide_lugia", 0x2026CE8, [204], false);
            mapper.AssertAreEqual("events.hide_ho_oh", 0x2026CE8, [204], false);
            mapper.AssertAreEqual("events.hide_lilycove_contest_hall_reporter", 0x2026CE8, [204], true);
            mapper.AssertAreEqual("events.hide_slateport_city_contest_reporter", 0x2026CE8, [204], true);
            mapper.AssertAreEqual("events.hide_mauville_city_wally", 0x2026CE8, [204], false);
            mapper.AssertAreEqual("events.hide_mauville_city_wallys_uncle", 0x2026CE8, [204], false);
            mapper.AssertAreEqual("events.hide_verdanturf_town_wandas_house_wally", 0x2026CE8, [204], true);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_wandas_boyfriend", 0x2026CE8, [204], true);
            mapper.AssertAreEqual("events.hide_verdanturf_town_wandas_house_wandas_boyfriend", 0x2026CE9, [219], true);
            mapper.AssertAreEqual("events.hide_verdanturf_town_wandas_house_wallys_uncle", 0x2026CE9, [219], true);
            mapper.AssertAreEqual("events.hide_ss_tidal_corridor_scott", 0x2026CE9, [219], false);
            mapper.AssertAreEqual("events.hide_littleroot_town_birchs_lab_pokeball_cyndaquil", 0x2026CE9, [219], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_birchs_lab_pokeball_totodile", 0x2026CE9, [219], true);
            mapper.AssertAreEqual("events.hide_route_116_dropped_glasses_man", 0x2026CE9, [219], false);
            mapper.AssertAreEqual("events.hide_rustboro_city_rival", 0x2026CE9, [219], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_2f_swablu_doll", 0x2026CE9, [219], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_wallace", 0x2026CEA, [135], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_brendans_house_2f_poke_ball", 0x2026CEA, [135], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_2f_poke_ball", 0x2026CEA, [135], true);
            mapper.AssertAreEqual("events.hide_route_112_team_magma", 0x2026CEA, [135], false);
            mapper.AssertAreEqual("events.hide_cave_of_origin_b1f_wallace", 0x2026CEA, [135], false);
            mapper.AssertAreEqual("events.hide_aqua_hideout_1f_grunt_1_blocking_entrance", 0x2026CEA, [135], false);
            mapper.AssertAreEqual("events.hide_aqua_hideout_1f_grunt_2_blocking_entrance", 0x2026CEA, [135], false);
            mapper.AssertAreEqual("events.hide_mossdeep_city_team_magma", 0x2026CEA, [135], true);
            mapper.AssertAreEqual("events.hide_petalburg_gym_wallys_dad", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_legend_mon_cave_of_origin", 0x2026CEB, [253], false);
            mapper.AssertAreEqual("events.hide_sootopolis_city_archie", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_maxie", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_room_9_archie", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_room_9_maxie", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_petalburg_city_wallys_dad", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_room_9_magma_grunts", 0x2026CEB, [253], true);
            mapper.AssertAreEqual("events.hide_lilycove_contest_hall_blend_master", 0x2026CEC, [109], true);
            mapper.AssertAreEqual("events.hide_granite_cave_steven", 0x2026CEC, [109], false);
            mapper.AssertAreEqual("events.hide_route_128_steven", 0x2026CEC, [109], true);
            mapper.AssertAreEqual("events.hide_slateport_city_gabby_and_ty", 0x2026CEC, [109], true);
            mapper.AssertAreEqual("events.hide_battle_frontier_reception_gate_scott", 0x2026CEC, [109], false);
            mapper.AssertAreEqual("events.hide_route_110_birch", 0x2026CEC, [109], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_birchs_lab_pokeball_chikorita", 0x2026CEC, [109], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_man_1", 0x2026CEC, [109], false);
            mapper.AssertAreEqual("events.hide_slateport_city_captain_stern", 0x2026CED, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_harbor_captain_stern", 0x2026CED, [115], true);
            mapper.AssertAreEqual("events.hide_battle_frontier_sudowoodo", 0x2026CED, [115], false);
            mapper.AssertAreEqual("events.hide_route_111_rock_smash_tip_guy", 0x2026CED, [115], false);
            mapper.AssertAreEqual("events.hide_rustboro_city_scientist", 0x2026CED, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_harbor_aqua_grunt", 0x2026CED, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_harbor_archie", 0x2026CED, [115], true);
            mapper.AssertAreEqual("events.hide_jagged_pass_magma_guard", 0x2026CED, [115], false);
            mapper.AssertAreEqual("events.hide_slateport_city_harbor_submarine_shadow", 0x2026CEE, [235], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_mays_house_2f_pichu_doll", 0x2026CEE, [235], true);
            mapper.AssertAreEqual("events.hide_magma_hideout_4f_groudon_asleep", 0x2026CEE, [235], false);
            mapper.AssertAreEqual("events.hide_route_119_rival", 0x2026CEE, [235], true);
            mapper.AssertAreEqual("events.hide_lilycove_city_aqua_grunts", 0x2026CEE, [235], false);
            mapper.AssertAreEqual("events.hide_magma_hideout_4f_groudon", 0x2026CEE, [235], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_residents", 0x2026CEE, [235], true);
            mapper.AssertAreEqual("events.hide_sky_pillar_wallace", 0x2026CEE, [235], true);
            mapper.AssertAreEqual("events.hide_mt_pyre_summit_maxie", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_magma_hideout_grunts", 0x2026CEF, [253], false);
            mapper.AssertAreEqual("events.hide_victory_road_entrance_wally", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_room_9_kyogre", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_slateport_city_harbor_ss_tidal", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_lilycove_harbor_sstidal", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_mossdeep_city_space_center_2f_team_magma", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_mossdeep_city_space_center_2f_steven", 0x2026CEF, [253], true);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_alt_1", 0x2026CF0, [108], false);
            mapper.AssertAreEqual("events.hide_battle_tower_multi_battle_partner_alt_2", 0x2026CF0, [108], false);
            mapper.AssertAreEqual("events.hide_petalburg_gym_wally", 0x2026CF0, [108], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_fat_man", 0x2026CF0, [108], false);
            mapper.AssertAreEqual("events.hide_slateport_city_sterns_shipyard_mr_briney", 0x2026CF0, [108], true);
            mapper.AssertAreEqual("events.hide_lanettes_house_lanette", 0x2026CF0, [108], true);
            mapper.AssertAreEqual("events.hide_fallorbor_pokemon_center_lanette", 0x2026CF0, [108], false);
            mapper.AssertAreEqual("events.hide_trick_house_entrance_man", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_lilycove_contest_hall_blend_master_replacement", 0x2026CF1, [253], false);
            mapper.AssertAreEqual("events.hide_desert_underpass_fossil", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_route_111_player_descent", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_route_111_desert_fossil", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_mt_chimney_trainers", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_aqua_grunt", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_briney", 0x2026CF1, [253], true);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_peeko", 0x2026CF2, [115], true);
            mapper.AssertAreEqual("events.hide_brineys_house_peeko", 0x2026CF2, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_team_aqua", 0x2026CF2, [115], false);
            mapper.AssertAreEqual("events.hide_slateport_city_oceanic_museum_aqua_grunts", 0x2026CF2, [115], false);
            mapper.AssertAreEqual("events.hide_slateport_city_oceanic_museum_2f_aqua_grunt_1", 0x2026CF2, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_oceanic_museum_2f_aqua_grunt_2", 0x2026CF2, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_oceanic_museum_2f_archie", 0x2026CF2, [115], true);
            mapper.AssertAreEqual("events.hide_slateport_city_oceanic_museum_2f_captain_stern", 0x2026CF2, [115], false);
            mapper.AssertAreEqual("events.hide_battle_tower_opponent", 0x2026CF3, [153], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_birchs_lab_rival", 0x2026CF3, [153], false);
            mapper.AssertAreEqual("events.hide_route_119_team_aqua", 0x2026CF3, [153], false);
            mapper.AssertAreEqual("events.hide_route_116_mr_briney", 0x2026CF3, [153], true);
            mapper.AssertAreEqual("events.hide_weather_institute_1f_workers", 0x2026CF3, [153], true);
            mapper.AssertAreEqual("events.hide_weather_institute_2f_workers", 0x2026CF3, [153], false);
            mapper.AssertAreEqual("events.hide_route_116_wandas_boyfriend", 0x2026CF3, [153], false);
            mapper.AssertAreEqual("events.hide_lilycove_contest_hall_contest_attendant_2", 0x2026CF3, [153], true);
            mapper.AssertAreEqual("events.hide_littleroot_town_birchs_lab_unknown_0x380", 0x2026CF4, [231], true);
            mapper.AssertAreEqual("events.hide_route_101_birch", 0x2026CF4, [231], true);
            mapper.AssertAreEqual("events.hide_route_103_birch", 0x2026CF4, [231], true);
            mapper.AssertAreEqual("events.hide_trick_house_end_man", 0x2026CF4, [231], false);
            mapper.AssertAreEqual("events.hide_route_110_team_aqua", 0x2026CF4, [231], false);
            mapper.AssertAreEqual("events.hide_route_118_gabby_and_ty_2", 0x2026CF4, [231], true);
            mapper.AssertAreEqual("events.hide_route_120_gabby_and_ty_2", 0x2026CF4, [231], true);
            mapper.AssertAreEqual("events.hide_route_111_gabby_and_ty_2", 0x2026CF4, [231], true);
            mapper.AssertAreEqual("events.hide_route_118_gabby_and_ty_3", 0x2026CF5, [229], true);
            mapper.AssertAreEqual("events.hide_slateport_city_harbor_patrons", 0x2026CF5, [229], false);
            mapper.AssertAreEqual("events.hide_route_104_white_herb_florist", 0x2026CF5, [229], true);
            mapper.AssertAreEqual("events.hide_fallarbor_azurill", 0x2026CF5, [229], false);
            mapper.AssertAreEqual("events.hide_lilycove_harbor_ferry_attendant", 0x2026CF5, [229], false);
            mapper.AssertAreEqual("events.hide_lilycove_harbor_ferry_sailor", 0x2026CF5, [229], true);
            mapper.AssertAreEqual("events.hide_southern_island_eon_stone", 0x2026CF5, [229], true);
            mapper.AssertAreEqual("events.hide_southern_island_unchosen_eon_duo_mon", 0x2026CF5, [229], true);
            mapper.AssertAreEqual("events.hide_mauville_city_wattson", 0x2026CF6, [9], true);
            mapper.AssertAreEqual("events.hide_mauville_gym_wattson", 0x2026CF6, [9], false);
            mapper.AssertAreEqual("events.hide_route_121_team_aqua_grunts", 0x2026CF6, [9], false);
            mapper.AssertAreEqual("events.hide_mt_pyre_summit_archie", 0x2026CF6, [9], false);
            mapper.AssertAreEqual("events.hide_mt_pyre_summit_team_aqua", 0x2026CF6, [9], false);
            mapper.AssertAreEqual("events.hide_battle_tower_reporter", 0x2026CF6, [9], false);
            mapper.AssertAreEqual("events.hide_route_110_rival", 0x2026CF6, [9], false);
            mapper.AssertAreEqual("events.hide_champions_room_rival", 0x2026CF7, [47], true);
            mapper.AssertAreEqual("events.hide_champions_room_birch", 0x2026CF7, [47], true);
            mapper.AssertAreEqual("events.hide_route_110_rival_on_bike", 0x2026CF7, [47], true);
            mapper.AssertAreEqual("events.hide_route_119_rival_on_bike", 0x2026CF7, [47], true);
            mapper.AssertAreEqual("events.hide_aqua_hideout_grunts", 0x2026CF7, [47], false);
            mapper.AssertAreEqual("events.hide_lilycove_motel_game_designers", 0x2026CF7, [47], true);
            mapper.AssertAreEqual("events.hide_mt_chimney_team_aqua", 0x2026CF7, [47], false);
            mapper.AssertAreEqual("events.hide_mt_chimney_team_magma", 0x2026CF7, [47], false);
            mapper.AssertAreEqual("events.hide_fallarbor_house_prof_cozmo", 0x2026CF8, [71], true);
            mapper.AssertAreEqual("events.hide_lavaridge_town_rival", 0x2026CF8, [71], true);
            mapper.AssertAreEqual("events.hide_lavaridge_town_rival_on_bike", 0x2026CF8, [71], true);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_rock_1", 0x2026CF8, [71], false);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_rock_2", 0x2026CF8, [71], false);
            mapper.AssertAreEqual("events.hide_fortree_city_house_4_wingull", 0x2026CF8, [71], false);
            mapper.AssertAreEqual("events.hide_mossdeep_city_house_2_wingull", 0x2026CF8, [71], true);
            mapper.AssertAreEqual("events.hide_regirock", 0x2026CF8, [71], false);
            mapper.AssertAreEqual("events.hide_regice", 0x2026CF9, [20], false);
            mapper.AssertAreEqual("events.hide_registeel", 0x2026CF9, [20], false);
            mapper.AssertAreEqual("events.hide_meteor_falls_team_aqua", 0x2026CF9, [20], true);
            mapper.AssertAreEqual("events.hide_meteor_falls_team_magma", 0x2026CF9, [20], false);
            mapper.AssertAreEqual("events.hide_dewford_hall_sludge_bomb_man", 0x2026CF9, [20], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_entrance_aqua_grunt", 0x2026CF9, [20], false);
            mapper.AssertAreEqual("events.hide_meteor_falls_1f_1r_cozmo", 0x2026CF9, [20], false);
            mapper.AssertAreEqual("events.hide_aqua_hideout_b2f_submarine_shadow", 0x2026CF9, [20], false);
            mapper.AssertAreEqual("events.hide_route_128_archie", 0x2026CFA, [91], true);
            mapper.AssertAreEqual("events.hide_route_128_maxie", 0x2026CFA, [91], true);
            mapper.AssertAreEqual("events.hide_seafloor_cavern_aqua_grunts", 0x2026CFA, [91], false);
            mapper.AssertAreEqual("events.hide_route_116_devon_employee", 0x2026CFA, [91], true);
            mapper.AssertAreEqual("events.hide_slateport_city_tm_salesman", 0x2026CFA, [91], true);
            mapper.AssertAreEqual("events.hide_rustboro_city_devon_corp_3f_employee", 0x2026CFA, [91], false);
            mapper.AssertAreEqual("events.hide_ss_tidal_corridor_mr_briney", 0x2026CFA, [91], true);
            mapper.AssertAreEqual("events.hide_ss_tidal_rooms_snatch_giver", 0x2026CFA, [91], false);
            mapper.AssertAreEqual("events.received_shoal_salt_1", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_salt_2", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_salt_3", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_salt_4", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_shell_1", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_shell_2", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_shell_3", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.received_shoal_shell_4", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.hide_route_111_secret_power_man", 0x2026CFC, [130], false);
            mapper.AssertAreEqual("events.hide_slateport_museum_population", 0x2026CFC, [130], true);
            mapper.AssertAreEqual("events.hide_lilycove_department_store_rooftop_sale_woman", 0x2026CFC, [130], false);
            mapper.AssertAreEqual("events.hide_mirage_tower_root_fossil", 0x2026CFC, [130], false);
            mapper.AssertAreEqual("events.hide_mirage_tower_claw_fossil", 0x2026CFC, [130], false);
            mapper.AssertAreEqual("events.hide_slateport_city_oceanic_museum_familiar_aqua_grunt", 0x2026CFC, [130], false);
            mapper.AssertAreEqual("events.hide_route_118_steven", 0x2026CFC, [130], false);
            mapper.AssertAreEqual("events.hide_mossdeep_city_stevens_house_steven", 0x2026CFC, [130], true);
            mapper.AssertAreEqual("events.hide_mossdeep_city_stevens_house_beldum_pokeball", 0x2026CFD, [33], true);
            mapper.AssertAreEqual("events.hide_fortree_city_kecleon", 0x2026CFD, [33], false);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_bridge", 0x2026CFD, [33], false);
            mapper.AssertAreEqual("events.hide_lilycove_city_rival", 0x2026CFD, [33], false);
            mapper.AssertAreEqual("events.hide_route_120_steven", 0x2026CFD, [33], false);
            mapper.AssertAreEqual("events.hide_sootopolis_city_steven", 0x2026CFD, [33], true);
            mapper.AssertAreEqual("events.hide_new_mauville_voltorb_1", 0x2026CFD, [33], false);
            mapper.AssertAreEqual("events.hide_new_mauville_voltorb_2", 0x2026CFD, [33], false);
            mapper.AssertAreEqual("events.hide_new_mauville_voltorb_3", 0x2026CFE, [136], false);
            mapper.AssertAreEqual("events.hide_aqua_hideout_b1f_electrode_1", 0x2026CFE, [136], false);
            mapper.AssertAreEqual("events.hide_aqua_hideout_b1f_electrode_2", 0x2026CFE, [136], false);
            mapper.AssertAreEqual("events.hide_oldale_town_rival", 0x2026CFE, [136], true);
            mapper.AssertAreEqual("events.hide_underwater_sea_floor_cavern_stolen_submarine", 0x2026CFE, [136], false);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_bridge_shadow", 0x2026CFE, [136], false);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_1", 0x2026CFE, [136], false);
            mapper.AssertAreEqual("events.hide_rusturf_tunnel_wanda", 0x2026CFE, [136], true);
            mapper.AssertAreEqual("events.hide_verdanturf_town_wandas_house_wanda", 0x2026CFF, [1], true);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_2", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_3", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_4", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_route_120_kecleon_5", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_route_119_kecleon_1", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_route_119_kecleon_2", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_route_101_boy", 0x2026CFF, [1], false);
            mapper.AssertAreEqual("events.hide_weather_institute_2f_aqua_grunt_m", 0x2026D00, [125], true);
            mapper.AssertAreEqual("events.hide_lilycove_pokemon_center_contest_lady_mon", 0x2026D00, [125], false);
            mapper.AssertAreEqual("events.hide_mt_chimney_lava_cookie_lady", 0x2026D00, [125], true);
            mapper.AssertAreEqual("events.hide_petalburg_city_scott", 0x2026D00, [125], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_rayquaza", 0x2026D00, [125], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_kyogre", 0x2026D00, [125], true);
            mapper.AssertAreEqual("events.hide_sootopolis_city_groudon", 0x2026D00, [125], true);
            mapper.AssertAreEqual("events.hide_rustboro_city_pokemon_school_scott", 0x2026D00, [125], false);
            mapper.AssertAreEqual("events.item_route_102_potion", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_116_x_special", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_104_pp_up", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_105_iron", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_106_protein", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_109_pp_up", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_110_rare_candy", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_110_dire_hit", 0x2026D01, [0], false);
            mapper.AssertAreEqual("events.item_route_111_tm_sandstorm", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_111_stardust", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_111_hp_up", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_112_nugget", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_113_max_ether", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_113_super_repel", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_114_rare_candy", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_114_protein", 0x2026D02, [0], false);
            mapper.AssertAreEqual("events.item_route_115_super_potion", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_115_tm_focus_punch", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_115_iron", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_116_ether", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_116_repel", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_116_hp_up", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_117_great_ball", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_117_revive", 0x2026D03, [0], false);
            mapper.AssertAreEqual("events.item_route_119_super_repel", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_119_zinc", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_119_elixir_1", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_119_leaf_stone", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_119_rare_candy", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_119_hyper_potion_1", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_120_nugget", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_120_full_heal", 0x2026D04, [0], false);
            mapper.AssertAreEqual("events.item_route_123_calcium", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_route_127_zinc", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_route_127_carbos", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_route_132_rare_candy", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_route_133_big_pearl", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_route_133_star_piece", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_petalburg_city_max_revive", 0x2026D05, [0], false);
            mapper.AssertAreEqual("events.item_petalburg_city_ether", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_rustboro_city_x_defend", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_lilycove_city_max_repel", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_mossdeep_city_net_ball", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_meteor_falls_1f_1r_tm_iron_tail", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_meteor_falls_1f_1r_full_heal", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_meteor_falls_1f_1r_moon_stone", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_meteor_falls_1f_1r_pp_up", 0x2026D06, [0], false);
            mapper.AssertAreEqual("events.item_rusturf_tunnel_poke_ball", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_rusturf_tunnel_max_ether", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_granite_cave_1f_escape_rope", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_granite_cave_b1f_poke_ball", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_5f_lax_incense", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_granite_cave_b2f_repel", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_granite_cave_b2f_rare_candy", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_petalburg_woods_x_attack", 0x2026D07, [0], false);
            mapper.AssertAreEqual("events.item_petalburg_woods_great_ball", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_route_104_poke_ball", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_petalburg_woods_ether", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_3f_3r_ecape_rope", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_1_orange_mail", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_2_harbor_mail", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_2_wave_mail", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_3_shadow_mail", 0x2026D08, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_3_wood_mail", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_4_mech_mail", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_route_124_yellow_shard", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_6_glitter_mail", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_7_tropic_mail", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_trick_house_puzzle_8_bead_mail", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_jagged_pass_burn_heal", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_aqua_hideout_b1f_max_elixir", 0x2026D09, [0], false);
            mapper.AssertAreEqual("events.item_aqua_hideout_b2f_nest_ball", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_exterior_max_potion", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_exterior_tm_skill_swap", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_new_mauville_ultra_ball", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_new_mauville_escape_rope", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_hidden_floor_room_6_luxury_ball", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_hidden_floor_room_2_scanner", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_scorched_slab_tm_sunny_day", 0x2026D0A, [0], false);
            mapper.AssertAreEqual("events.item_meteor_falls_b1f_2r_tm_dragon_claw", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_shoal_cave_entrance_big_pearl", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_shoal_cave_inner_room_rare_candy", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_shoal_cave_stairs_room_ice_heal", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_victory_road_1f_max_elixir", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_victory_road_1f_pp_up", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_victory_road_b1f_tm_psychic", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_victory_road_b1f_full_restore", 0x2026D0B, [0], false);
            mapper.AssertAreEqual("events.item_victory_road_b2f_full_heal", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_6f_tm_shadow_ball", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_seafloor_cavern_room_9_tm_earthquake", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_fiery_path_tm_toxic", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_route_124_red_shard", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_route_124_blue_shard", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_safari_zone_north_west_tm_solar_beam", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_rooms_1f_harbor_mail", 0x2026D0C, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_rooms_b1f_escape_rope", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_rooms_2_b1f_dive_ball", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_rooms_b1f_tm_ice_beam", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_rooms_2_1f_revive", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_captains_office_storage_key", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_hidden_floor_room_3_water_stone", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_abandoned_ship_hidden_floor_room_1_tm_rain_dance", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_route_121_carbos", 0x2026D0D, [0], false);
            mapper.AssertAreEqual("events.item_route_123_ultra_ball", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_route_126_green_shard", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_route_119_hyper_potion_2", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_route_120_hyper_potion", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_route_120_nest_ball", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_route_123_elixir", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_new_mauville_thunder_stone", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_fiery_path_fire_stone", 0x2026D0E, [0], false);
            mapper.AssertAreEqual("events.item_shoal_cave_ice_room_tm_hail", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_shoal_cave_ice_room_never_melt_ice", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_route_103_guard_spec", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_route_104_x_accuracy", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_mauville_city_x_speed", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_petalburg_woods_paralyze_heal", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_route_115_great_ball", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_safari_zone_north_calcium", 0x2026D0F, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_3f_super_repel", 0x2026D10, [0], false);
            mapper.AssertAreEqual("events.item_route_118_hyper_potion", 0x2026D10, [0], false);
            mapper.AssertAreEqual("events.item_new_mauville_full_heal", 0x2026D10, [0], false);
            mapper.AssertAreEqual("events.item_new_mauville_paralyze_heal", 0x2026D10, [0], false);
            mapper.AssertAreEqual("events.item_aqua_hideout_b1f_master_ball", 0x2026D10, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_2f_ultra_ball", 0x2026D11, [0], false);
            mapper.AssertAreEqual("events.item_mt_pyre_4f_sea_incense", 0x2026D11, [0], false);
            mapper.AssertAreEqual("events.item_safari_zone_south_west_max_revive", 0x2026D11, [0], false);
            mapper.AssertAreEqual("events.item_aqua_hideout_b1f_nugget", 0x2026D11, [0], false);
            mapper.AssertAreEqual("events.item_route_119_nugget", 0x2026D11, [0], false);
            mapper.AssertAreEqual("events.item_route_104_potion", 0x2026D11, [0], false);
            mapper.AssertAreEqual("events.item_route_103_pp_up", 0x2026D12, [0], false);
            mapper.AssertAreEqual("events.item_route_108_star_piece", 0x2026D12, [0], false);
            mapper.AssertAreEqual("events.item_route_109_potion", 0x2026D12, [0], false);
            mapper.AssertAreEqual("events.item_route_110_elixir", 0x2026D12, [0], false);
            mapper.AssertAreEqual("events.item_route_111_elixir", 0x2026D12, [0], false);
            mapper.AssertAreEqual("events.item_route_113_hyper_potion", 0x2026D12, [0], false);
            mapper.AssertAreEqual("events.item_route_115_heal_powder", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_route_116_potion", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_route_119_elixir_2", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_route_120_revive", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_route_121_revive", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_route_121_zinc", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_1f_rare_candy", 0x2026D13, [0], false);
            mapper.AssertAreEqual("events.item_route_123_pp_up", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_123_revival_herb", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_125_big_pearl", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_127_rare_candy", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_132_protein", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_133_max_revive", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_134_carbos", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_134_star_piece", 0x2026D14, [0], false);
            mapper.AssertAreEqual("events.item_route_114_energy_powder", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_route_115_pp_up", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_artisan_cave_b1f_hp_up", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_artisan_cave_1f_carbos", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_2f_2r_max_elixir", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_2f_2r_full_restore", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_3f_1r_nugget", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_3f_2r_pp_max", 0x2026D15, [0], false);
            mapper.AssertAreEqual("events.item_magma_hideout_4f_max_revive", 0x2026D16, [0], false);
            mapper.AssertAreEqual("events.item_safari_zone_north_east_nugget", 0x2026D16, [0], false);
            mapper.AssertAreEqual("events.item_safari_zone_south_east_big_pearl", 0x2026D16, [0], false);
            mapper.AssertAreEqual("events.defeated_rustboro_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_dewford_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_mauville_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_lavaridge_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_petalburg_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_fortree_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_mossdeep_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_sootopolis_gym", 0x2026D22, [0], false);
            mapper.AssertAreEqual("events.defeated_meteor_falls_steven", 0x2026D23, [0], false);
            mapper.AssertAreEqual("events.defeated_elite_4_sidney", 0x2026D23, [0], false);
            mapper.AssertAreEqual("events.defeated_elite_4_phoebe", 0x2026D23, [0], false);
            mapper.AssertAreEqual("events.defeated_elite_4_glacia", 0x2026D23, [0], false);
            mapper.AssertAreEqual("events.defeated_elite_4_drake", 0x2026D23, [0], false);
            mapper.AssertAreEqual("events.defeated_trainer_0", 0x2026D24, [0], false);
            mapper.AssertAreEqual("events.defeated_trainer_1", 0x2026D24, [0], false);
            mapper.AssertAreEqual("events.defeated_trainer_863", 0x2026D8F, [0], false);
            mapper.AssertAreEqual("events.sys_pokemon_get", 0x2026D90, [3], true);
            mapper.AssertAreEqual("events.sys_pokedex_get", 0x2026D90, [3], true);
            mapper.AssertAreEqual("events.sys_pokenav_get", 0x2026D90, [3], false);
            mapper.AssertAreEqual("events.sys_game_clear", 0x2026D90, [3], false);
            mapper.AssertAreEqual("events.sys_chat_used", 0x2026D90, [3], false);
            mapper.AssertAreEqual("events.unlocked_trendy_sayings", 0x2026D90, [3], false);
            mapper.AssertAreEqual("events.badge01_get", 0x2026D90, [3], false);
            mapper.AssertAreEqual("events.badge02_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.badge03_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.badge04_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.badge05_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.badge06_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.badge07_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.badge08_get", 0x2026D91, [128], false);
            mapper.AssertAreEqual("events.visited_littleroot_town", 0x2026D91, [128], true);
            mapper.AssertAreEqual("events.visited_oldale_town", 0x2026D92, [1], true);
            mapper.AssertAreEqual("events.visited_dewford_town", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_lavaridge_town", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_fallarbor_town", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_verdanturf_town", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_pacifidlog_town", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_petalburg_city", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_slateport_city", 0x2026D92, [1], false);
            mapper.AssertAreEqual("events.visited_mauville_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.visited_rustboro_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.visited_fortree_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.visited_lilycove_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.visited_mossdeep_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.visited_sootopolis_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.visited_ever_grande_city", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.is_champion", 0x2026D93, [0], false);
            mapper.AssertAreEqual("events.nurse_union_room_reminder", 0x2026D94, [0], false);
            mapper.AssertAreEqual("events.sys_use_flash", 0x2026D95, [0], false);
            mapper.AssertAreEqual("events.sys_use_strength", 0x2026D95, [0], false);
            mapper.AssertAreEqual("events.sys_weather_ctrl", 0x2026D95, [0], false);
            mapper.AssertAreEqual("events.sys_cycling_road", 0x2026D95, [0], false);
            mapper.AssertAreEqual("events.sys_safari_mode", 0x2026D95, [0], false);
            mapper.AssertAreEqual("events.sys_cruise_mode", 0x2026D95, [0], false);
            mapper.AssertAreEqual("events.sys_tv_home", 0x2026D96, [35], true);
            mapper.AssertAreEqual("events.sys_tv_watch", 0x2026D96, [35], true);
            mapper.AssertAreEqual("events.sys_tv_start", 0x2026D96, [35], false);
            mapper.AssertAreEqual("events.sys_changed_dewford_trend", 0x2026D96, [35], false);
            mapper.AssertAreEqual("events.sys_mix_record", 0x2026D96, [35], false);
            mapper.AssertAreEqual("events.sys_clock_set", 0x2026D96, [35], true);
            mapper.AssertAreEqual("events.sys_national_dex", 0x2026D96, [35], false);
            mapper.AssertAreEqual("events.sys_shoal_tide", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.sys_ribbon_get", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.landmark_flower_shop", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.landmark_mr_briney_house", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.landmark_abandoned_ship", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.landmark_seashore_house", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.landmark_new_mauville", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_old_lady_rest_shop", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_trick_house", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_winstrate_family", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_glass_workshop", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_lanettes_house", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_pokemon_daycare", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_seafloor_cavern", 0x2026D98, [0], false);
            mapper.AssertAreEqual("events.landmark_battle_frontier", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.landmark_southern_island", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.landmark_fiery_path", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.sys_pc_lanette", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.sys_mystery_event_enable", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.sys_enc_up_item", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.sys_enc_down_item", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.sys_braille_dig", 0x2026D99, [0], false);
            mapper.AssertAreEqual("events.sys_regirock_puzzle_completed", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.sys_braille_regice_completed", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.sys_registeel_puzzle_completed", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.enable_ship_southern_island", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.landmark_pokemon_league", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.landmark_island_cave", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.landmark_desert_ruins", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.landmark_fossil_maniacs_house", 0x2026D9A, [0], false);
            mapper.AssertAreEqual("events.landmark_scorched_slab", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.landmark_ancient_tomb", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.landmark_tunnelers_rest_house", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.landmark_hunters_house", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.landmark_sealed_chamber", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.sys_tv_latias_latios", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.landmark_sky_pillar", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.sys_shoal_item", 0x2026D9B, [0], false);
            mapper.AssertAreEqual("events.sys_b_dash", 0x2026D9C, [1], true);
            mapper.AssertAreEqual("events.sys_ctrl_obj_delete", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.sys_reset_rtc_enable", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.landmark_berry_masters_house", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.sys_tower_silver", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.sys_tower_gold", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.sys_dome_silver", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.sys_dome_gold", 0x2026D9C, [1], false);
            mapper.AssertAreEqual("events.sys_palace_silver", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_palace_gold", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_arena_silver", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_arena_gold", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_factory_silver", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_factory_gold", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_pike_silver", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_pike_gold", 0x2026D9D, [0], false);
            mapper.AssertAreEqual("events.sys_pyramid_silver", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.sys_pyramid_gold", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.sys_frontier_pass", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.map_script_checked_deoxys", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.deoxys_rock_complete", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.enable_ship_birth_island", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.enable_ship_faraway_island", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.shown_box_was_full_message", 0x2026D9E, [0], false);
            mapper.AssertAreEqual("events.arrived_on_faraway_island", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.arrived_at_marine_cave_emerge_spot", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.arrived_at_terra_cave_entrance", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.sys_mystery_gift_enable", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.entered_mirage_tower", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.landmark_altering_cave", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.landmark_desert_underpass", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.landmark_artisan_cave", 0x2026D9F, [0], false);
            mapper.AssertAreEqual("events.enable_ship_navel_rock", 0x2026DA0, [16], false);
            mapper.AssertAreEqual("events.arrived_at_navel_rock", 0x2026DA0, [16], false);
            mapper.AssertAreEqual("events.landmark_trainer_hill", 0x2026DA0, [16], false);
            mapper.AssertAreEqual("events.received_pokedex_from_birch", 0x2026DA0, [16], true);
            mapper.AssertAreEqual("events.daily_contest_lobby_received_berry", 0x2026DA8, [0], false);
            mapper.AssertAreEqual("events.daily_secret_base", 0x2026DA8, [0], false);
            mapper.AssertAreEqual("events.daily_picked_loto_ticket", 0x2026DA9, [0], false);
            mapper.AssertAreEqual("events.daily_route_114_received_berry", 0x2026DA9, [0], false);
            mapper.AssertAreEqual("events.daily_route_111_received_berry", 0x2026DA9, [0], false);
            mapper.AssertAreEqual("events.daily_berry_master_received_berry", 0x2026DA9, [0], false);
            mapper.AssertAreEqual("events.daily_route_120_received_berry", 0x2026DA9, [0], false);
            mapper.AssertAreEqual("events.daily_lilycove_received_berry", 0x2026DA9, [0], false);
            mapper.AssertAreEqual("events.daily_flower_shop_received_berry", 0x2026DAA, [0], false);
            mapper.AssertAreEqual("events.daily_berry_masters_wife", 0x2026DAA, [0], false);
            mapper.AssertAreEqual("events.daily_sootopolis_received_berry", 0x2026DAA, [0], false);
            mapper.AssertAreEqual("events.daily_apprentice_leaves", 0x2026DAA, [0], false);
            mapper.AssertAreEqual("events.hide_map_name_popup", 0x20375FC, [0], false);
            mapper.AssertAreEqual("events.dont_transition_music", 0x20375FC, [0], false);
            mapper.AssertAreEqual("events.enable_multi_corridor_door", 0x20375FC, [0], false);
            mapper.AssertAreEqual("events.storing_items_in_pyramid_bag", 0x20375FC, [0], false);
            mapper.AssertAreEqual("flags.elite_four.sidney", 0x2026D24, [0], false);
            mapper.AssertAreEqual("flags.elite_four.phoebe", 0x2026D24, [0], false);
            mapper.AssertAreEqual("flags.elite_four.glacia", 0x2026D24, [0], false);
            mapper.AssertAreEqual("flags.elite_four.drake", 0x2026D24, [0], false);
            mapper.AssertAreEqual("flags.elite_four.wallace", 0x2026D94, [0], false);
            mapper.AssertAreEqual("screen.menu.items_menu", 0x203CE60, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.items_offset", 0x203CE6A, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.balls_menu", 0x203CE62, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.balls_offset", 0x203CE6C, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.tmhm_menu", 0x203CE64, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.tmhm_offset", 0x203CE6E, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.berries_menu", 0x203CE66, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.berries_offset", 0x203CE70, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.keyItems_menu", 0x203CE68, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.keyItems_offset", 0x203CE72, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.party_menu", 0x203CED1, [0], 0);
            mapper.AssertAreEqual("screen.menu.battle_action.player_l", 0x20244AC, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battle_action.enemy_l", 0x20244AD, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battle_action.player_r", 0x20244AE, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battle_action.enemy_r", 0x20244AF, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleMove.player_l", 0x20244B0, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.enemy_l", 0x20244B1, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.player_r", 0x20244B2, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.enemy_r", 0x20244B3, [0], 0);
            mapper.AssertAreEqual("screen.enemy_sprite.sprite_index.player_l", 0x20241E4, [6], 6);
            mapper.AssertAreEqual("screen.enemy_sprite.sprite_index.enemy_l", 0x20241E5, [4], 4);
            mapper.AssertAreEqual("screen.enemy_sprite.sprite_index.player_r", 0x20241E6, [0], 0);
            mapper.AssertAreEqual("screen.enemy_sprite.sprite_index.enemy_r", 0x20241E7, [0], 0);
            mapper.AssertAreEqual("options.text_speed", 0x2024A7C, [2], 2);
            mapper.AssertAreEqual("options.battle_animations", 0x2024A7D, [6], true);
            mapper.AssertAreEqual("options.battle_style", 0x2024A7D, [6], true);
            mapper.AssertAreEqual("options.sound", 0x2024A7D, [6], false);
            mapper.AssertAreEqual("options.button_mode", 0x2024A7B, [0], 0);
            mapper.AssertAreEqual("options.window_frame", 0x2024A7C, [2], 2);
            mapper.AssertAreEqual("audio.sound_effect_1", 0x30075F0, [196, 205, 143, 8], 143642052);
            mapper.AssertAreEqual("audio.sound_effect_1_played", 0x30075F4, [0, 0, 0, 128], true);
            mapper.AssertAreEqual("audio.sound_effect_2", 0x3007630, [28, 193, 143, 8], 143638812);
            mapper.AssertAreEqual("audio.sound_effect_2_played", 0x3007634, [0, 0, 0, 128], true);
            mapper.AssertAreEqual("game_time.hours", 0x2024A76, [0], 0);
            mapper.AssertAreEqual("game_time.minutes", 0x2024A78, [15], 15);
            mapper.AssertAreEqual("game_time.seconds", 0x2024A79, [39], 39);
            //mapper.AssertAreEqual("game_time.frames", 0x2024A7A, [52], 52);
            mapper.AssertAreEqual("pointers.dma_1", 0x3005D8C, [20, 90, 2, 2], 33708564);
            mapper.AssertAreEqual("pointers.dma_2", 0x3005D90, [104, 74, 2, 2], 33704552);
            mapper.AssertAreEqual("pointers.dma_3", 0x3005D94, [28, 152, 2, 2], 33724444);
            mapper.AssertAreEqual("pointers.callback_1", 0x30022C0, [5, 94, 8, 8], "Overworld");
            mapper.AssertAreEqual("pointers.callback_2", 0x30022C4, [93, 94, 8, 8], "Overworld");
            mapper.AssertAreEqual("meta.generation", "3");
            mapper.AssertAreEqual("meta.game_name", "Emerald");
            mapper.AssertAreEqual("meta.game_type", "Third Version");
            mapper.AssertAreEqual("meta.state", "Overworld");
        }

    }
}
