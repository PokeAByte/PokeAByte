using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonDiamondPearl : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_NDS_PokemonDiamond(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x226D578, [46, 1, 43, 1, 65, 1, 56, 1, 255, 255, 0, 0, 0, 0], "DAWN");
            mapper.AssertAreEqual("player.gender", 0x226D590, [1], 1);
            mapper.AssertAreEqual("player.player_id", 0x226D588, [67, 103], 26435);
            mapper.AssertAreEqual("player.secret_id", 0x226D58A, [192, 104], 26816);
            mapper.AssertAreEqual("player.team_count", 0x226D5A8, [1], 1);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.team.0.species", 0x8, [134, 1], "Chimchar");
            mapper.AssertAreEqual("player.team.0.dex_number", 0x8, [134, 1], 390);
            mapper.AssertAreEqual("player.team.0.nickname", 0x48, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 39, 1, 255, 255, 120, 187], "AAAAABBB6");
            mapper.AssertAreEqual("player.team.0.level", 0x8C, [8], 8);
            mapper.AssertAreEqual("player.team.0.exp", 0x10, [59, 1, 0, 0], 315);
            mapper.AssertAreEqual("player.team.0.ot_name", 0x68, [46, 1, 43, 1, 65, 1, 56, 1, 255, 255, 0, 0, 0, 0, 0, 0], "DAWN");
            mapper.AssertAreEqual("player.team.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("player.team.0.ability", 0x15, [66], "Blaze");
            mapper.AssertAreEqual("player.team.0.nature", "Modest");
            mapper.AssertAreEqual("player.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.friendship", 0x14, [88], 88);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0x28, [10, 0], "Scratch");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0x30, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0x2A, [43, 0], "Leer");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0x2C, [52, 0], "Ember");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0x32, [21], 21);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0x2E, [241, 0], "Sunny Day");
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0x33, [5], 5);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0x8E, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0x90, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0x92, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0x94, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0x96, [16, 0], 16);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0x98, [15, 0], 15);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0x9A, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 0x38, [68, 86, 90, 152], 4);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0x38, [68, 86, 90, 152], 18);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0x38, [68, 86, 90, 152], 21);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0x38, [68, 86, 90, 152], 20);
            mapper.AssertAreEqual("player.team.0.ivs.special_attack", 0x38, [68, 86, 90, 152], 5);
            mapper.AssertAreEqual("player.team.0.ivs.special_defense", 0x38, [68, 86, 90, 152], 12);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0x18, [2], 2);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0x1B, [4], 4);
            mapper.AssertAreEqual("player.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.0.flags.is_egg", 0x38, [68, 86, 90, 152], false);
            mapper.AssertAreEqual("player.team.0.flags.is_nicknamed", 0x38, [68, 86, 90, 152], true);
            mapper.AssertAreEqual("player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.internals.personality_value", 3303194765);
            mapper.AssertAreEqual("player.team.0.internals.checksum", 0x6, [229, 30], 7909);
            mapper.AssertAreEqual("player.team.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("player.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.met_location", 0x80, [76, 0], 76);
            mapper.AssertAreEqual("player.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.0.misc.met_info.met_level", 0x84, [133], 5);
            mapper.AssertAreEqual("player.team.0.misc.met_info.female_ot_gender", 0x84, [133], true);
            mapper.AssertAreEqual("player.team.0.misc.met_info.encounter_type", 0x85, [12], 12);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.1.nature", "Hardy");
            mapper.AssertAreEqual("player.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.2.nature", "Hardy");
            mapper.AssertAreEqual("player.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.3.nature", "Hardy");
            mapper.AssertAreEqual("player.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.4.nature", "Hardy");
            mapper.AssertAreEqual("player.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.5.nature", "Hardy");
            mapper.AssertAreEqual("player.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0x226D592, [0], false);
            mapper.AssertAreEqual("bag.money", 0x226D58C, [224, 1, 0, 0], 480);
            mapper.AssertAreEqual("bag.coins", 0x226D598, [0], 0);
            mapper.AssertAreEqual("bag.items.0.item", 0x226DB38, [117, 0], "unknown");
            mapper.AssertAreEqual("bag.items.0.quantity", 0x226DB3A, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.1.item", 0x226DB3C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.1.quantity", 0x226DB3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.2.item", 0x226DB40, [0, 0], null);
            mapper.AssertAreEqual("bag.items.2.quantity", 0x226DB42, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.3.item", 0x226DB44, [0, 0], null);
            mapper.AssertAreEqual("bag.items.3.quantity", 0x226DB46, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.4.item", 0x226DB48, [0, 0], null);
            mapper.AssertAreEqual("bag.items.4.quantity", 0x226DB4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.5.item", 0x226DB4C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.5.quantity", 0x226DB4E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.6.item", 0x226DB50, [0, 0], null);
            mapper.AssertAreEqual("bag.items.6.quantity", 0x226DB52, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.7.item", 0x226DB54, [0, 0], null);
            mapper.AssertAreEqual("bag.items.7.quantity", 0x226DB56, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.8.item", 0x226DB58, [0, 0], null);
            mapper.AssertAreEqual("bag.items.8.quantity", 0x226DB5A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.9.item", 0x226DB5C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.9.quantity", 0x226DB5E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.10.item", 0x226DB60, [0, 0], null);
            mapper.AssertAreEqual("bag.items.10.quantity", 0x226DB62, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.11.item", 0x226DB64, [0, 0], null);
            mapper.AssertAreEqual("bag.items.11.quantity", 0x226DB66, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.12.item", 0x226DB68, [0, 0], null);
            mapper.AssertAreEqual("bag.items.12.quantity", 0x226DB6A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.13.item", 0x226DB6C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.13.quantity", 0x226DB6E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0x226DB70, [0, 0], null);
            mapper.AssertAreEqual("bag.items.14.quantity", 0x226DB72, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.15.item", 0x226DB74, [0, 0], null);
            mapper.AssertAreEqual("bag.items.15.quantity", 0x226DB76, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0x226DB78, [0, 0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0x226DB7A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0x226DB7C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0x226DB7E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0x226DB80, [0, 0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0x226DB82, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0x226DB84, [0, 0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0x226DB86, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.20.item", 0x226DB88, [0, 0], null);
            mapper.AssertAreEqual("bag.items.20.quantity", 0x226DB8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.21.item", 0x226DB8C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.21.quantity", 0x226DB8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.22.item", 0x226DB90, [0, 0], null);
            mapper.AssertAreEqual("bag.items.22.quantity", 0x226DB92, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.23.item", 0x226DB94, [0, 0], null);
            mapper.AssertAreEqual("bag.items.23.quantity", 0x226DB96, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.24.item", 0x226DB98, [0, 0], null);
            mapper.AssertAreEqual("bag.items.24.quantity", 0x226DB9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.25.item", 0x226DB9C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.25.quantity", 0x226DB9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.26.item", 0x226DBA0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.26.quantity", 0x226DBA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.27.item", 0x226DBA4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.27.quantity", 0x226DBA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.28.item", 0x226DBA8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.28.quantity", 0x226DBAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.29.item", 0x226DBAC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.29.quantity", 0x226DBAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.30.item", 0x226DBB0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.30.quantity", 0x226DBB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.31.item", 0x226DBB4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.31.quantity", 0x226DBB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.32.item", 0x226DBB8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.32.quantity", 0x226DBBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.33.item", 0x226DBBC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.33.quantity", 0x226DBBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.34.item", 0x226DBC0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.34.quantity", 0x226DBC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.35.item", 0x226DBC4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.35.quantity", 0x226DBC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.36.item", 0x226DBC8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.36.quantity", 0x226DBCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.37.item", 0x226DBCC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.37.quantity", 0x226DBCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.38.item", 0x226DBD0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.38.quantity", 0x226DBD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.39.item", 0x226DBD4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.39.quantity", 0x226DBD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.40.item", 0x226DBD8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.40.quantity", 0x226DBDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.0.item", 0x226E054, [18, 0], "Antidote");
            mapper.AssertAreEqual("bag.medicine.0.quantity", 0x226E056, [2, 0], 2);
            mapper.AssertAreEqual("bag.medicine.1.item", 0x226E058, [22, 0], "Paralyze Heal");
            mapper.AssertAreEqual("bag.medicine.1.quantity", 0x226E05A, [3, 0], 3);
            mapper.AssertAreEqual("bag.medicine.2.item", 0x226E05C, [17, 0], "Potion");
            mapper.AssertAreEqual("bag.medicine.2.quantity", 0x226E05E, [3, 0], 3);
            mapper.AssertAreEqual("bag.medicine.3.item", 0x226E060, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.3.quantity", 0x226E062, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.4.item", 0x226E064, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.4.quantity", 0x226E066, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.5.item", 0x226E068, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.5.quantity", 0x226E06A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.6.item", 0x226E06C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.6.quantity", 0x226E06E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.7.item", 0x226E070, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.7.quantity", 0x226E072, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.8.item", 0x226E074, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.8.quantity", 0x226E076, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.9.item", 0x226E078, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.9.quantity", 0x226E07A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.10.item", 0x226E07C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.10.quantity", 0x226E07E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.11.item", 0x226E080, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.11.quantity", 0x226E082, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.12.item", 0x226E084, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.12.quantity", 0x226E086, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.13.item", 0x226E088, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.13.quantity", 0x226E08A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.14.item", 0x226E08C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.14.quantity", 0x226E08E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.15.item", 0x226E090, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.15.quantity", 0x226E092, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.16.item", 0x226E094, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.16.quantity", 0x226E096, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.17.item", 0x226E098, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.17.quantity", 0x226E09A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.18.item", 0x226E09C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.18.quantity", 0x226E09E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.19.item", 0x226E0A0, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.19.quantity", 0x226E0A2, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.20.item", 0x226E0A4, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.20.quantity", 0x226E0A6, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.0.item", 0x226E1F4, [4, 0], "Pok\u00e9 Ball");
            mapper.AssertAreEqual("bag.balls.0.quantity", 0x226E1F6, [8, 0], 8);
            mapper.AssertAreEqual("bag.balls.1.item", 0x226E1F8, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.1.quantity", 0x226E1FA, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.2.item", 0x226E1FC, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.2.quantity", 0x226E1FE, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.3.item", 0x226E200, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.3.quantity", 0x226E202, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.4.item", 0x226E204, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.4.quantity", 0x226E206, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.5.item", 0x226E208, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.5.quantity", 0x226E20A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.6.item", 0x226E20C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.6.quantity", 0x226E20E, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.7.item", 0x226E210, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.7.quantity", 0x226E212, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.8.item", 0x226E214, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.8.quantity", 0x226E216, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.9.item", 0x226E218, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.9.quantity", 0x226E21A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.10.item", 0x226E21C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.10.quantity", 0x226E21E, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.11.item", 0x226E220, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.11.quantity", 0x226E222, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.12.item", 0x226E224, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.12.quantity", 0x226E226, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.13.item", 0x226E228, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.13.quantity", 0x226E22A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.14.item", 0x226E22C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.14.quantity", 0x226E22E, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.15.item", 0x226E230, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.15.quantity", 0x226E232, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.16.item", 0x226E234, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.16.quantity", 0x226E236, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.0.item", 0x226DE94, [1, 0], "Master Ball");
            mapper.AssertAreEqual("bag.tmhm.0.quantity", 0x226DE96, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.1.item", 0x226DE98, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.1.quantity", 0x226DE9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.2.item", 0x226DE9C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.2.quantity", 0x226DE9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.3.item", 0x226DEA0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.3.quantity", 0x226DEA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.4.item", 0x226DEA4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.4.quantity", 0x226DEA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.5.item", 0x226DEA8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.5.quantity", 0x226DEAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.6.item", 0x226DEAC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.6.quantity", 0x226DEAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.7.item", 0x226DEB0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.7.quantity", 0x226DEB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.8.item", 0x226DEB4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.8.quantity", 0x226DEB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.9.item", 0x226DEB8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.9.quantity", 0x226DEBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.10.item", 0x226DEBC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.10.quantity", 0x226DEBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.11.item", 0x226DEC0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.11.quantity", 0x226DEC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.12.item", 0x226DEC4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.12.quantity", 0x226DEC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.13.item", 0x226DEC8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.13.quantity", 0x226DECA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.14.item", 0x226DECC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.14.quantity", 0x226DECE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.15.item", 0x226DED0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.15.quantity", 0x226DED2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.16.item", 0x226DED4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.16.quantity", 0x226DED6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.17.item", 0x226DED8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.17.quantity", 0x226DEDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.18.item", 0x226DEDC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.18.quantity", 0x226DEDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.19.item", 0x226DEE0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.19.quantity", 0x226DEE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.20.item", 0x226DEE4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.20.quantity", 0x226DEE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.21.item", 0x226DEE8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.21.quantity", 0x226DEEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.22.item", 0x226DEEC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.22.quantity", 0x226DEEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.23.item", 0x226DEF0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.23.quantity", 0x226DEF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.24.item", 0x226DEF4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.24.quantity", 0x226DEF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.25.item", 0x226DEF8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.25.quantity", 0x226DEFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.26.item", 0x226DEFC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.26.quantity", 0x226DEFE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.27.item", 0x226DF00, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.27.quantity", 0x226DF02, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.28.item", 0x226DF04, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.28.quantity", 0x226DF06, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.29.item", 0x226DF08, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.29.quantity", 0x226DF0A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.30.item", 0x226DF0C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.30.quantity", 0x226DF0E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.31.item", 0x226DF10, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.31.quantity", 0x226DF12, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.32.item", 0x226DF14, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.32.quantity", 0x226DF16, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.33.item", 0x226DF18, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.33.quantity", 0x226DF1A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.34.item", 0x226DF1C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.34.quantity", 0x226DF1E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.35.item", 0x226DF20, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.35.quantity", 0x226DF22, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.36.item", 0x226DF24, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.36.quantity", 0x226DF26, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.37.item", 0x226DF28, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.37.quantity", 0x226DF2A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.38.item", 0x226DF2C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.38.quantity", 0x226DF2E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.39.item", 0x226DF30, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.39.quantity", 0x226DF32, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.40.item", 0x226DF34, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.40.quantity", 0x226DF36, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.41.item", 0x226DF38, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.41.quantity", 0x226DF3A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.42.item", 0x226DF3C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.42.quantity", 0x226DF3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.43.item", 0x226DF40, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.43.quantity", 0x226DF42, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.44.item", 0x226DF44, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.44.quantity", 0x226DF46, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.45.item", 0x226DF48, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.45.quantity", 0x226DF4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.46.item", 0x226DF4C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.46.quantity", 0x226DF4E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.47.item", 0x226DF50, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.47.quantity", 0x226DF52, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.48.item", 0x226DF54, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.48.quantity", 0x226DF56, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.49.item", 0x226DF58, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.49.quantity", 0x226DF5A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.50.item", 0x226DF5C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.50.quantity", 0x226DF5E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.51.item", 0x226DF60, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.51.quantity", 0x226DF62, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.52.item", 0x226DF64, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.52.quantity", 0x226DF66, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.53.item", 0x226DF68, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.53.quantity", 0x226DF6A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.54.item", 0x226DF6C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.54.quantity", 0x226DF6E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.55.item", 0x226DF70, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.55.quantity", 0x226DF72, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.56.item", 0x226DF74, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.56.quantity", 0x226DF76, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.57.item", 0x226DF78, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.57.quantity", 0x226DF7A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.58.item", 0x226DF7C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.58.quantity", 0x226DF7E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.59.item", 0x226DF80, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.59.quantity", 0x226DF82, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.60.item", 0x226DF84, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.60.quantity", 0x226DF86, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.61.item", 0x226DF88, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.61.quantity", 0x226DF8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.62.item", 0x226DF8C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.62.quantity", 0x226DF8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.63.item", 0x226DF90, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.63.quantity", 0x226DF92, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.64.item", 0x226DF94, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.64.quantity", 0x226DF96, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.65.item", 0x226DF98, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.65.quantity", 0x226DF9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.66.item", 0x226DF9C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.66.quantity", 0x226DF9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.67.item", 0x226DFA0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.67.quantity", 0x226DFA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.68.item", 0x226DFA4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.68.quantity", 0x226DFA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.69.item", 0x226DFA8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.69.quantity", 0x226DFAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.70.item", 0x226DFAC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.70.quantity", 0x226DFAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.71.item", 0x226DFB0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.71.quantity", 0x226DFB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.72.item", 0x226DFB4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.72.quantity", 0x226DFB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.73.item", 0x226DFB8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.73.quantity", 0x226DFBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.74.item", 0x226DFBC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.74.quantity", 0x226DFBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.75.item", 0x226DFC0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.75.quantity", 0x226DFC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.76.item", 0x226DFC4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.76.quantity", 0x226DFC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.77.item", 0x226DFC8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.77.quantity", 0x226DFCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.78.item", 0x226DFCC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.78.quantity", 0x226DFCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.79.item", 0x226DFD0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.79.quantity", 0x226DFD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.80.item", 0x226DFD4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.80.quantity", 0x226DFD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.81.item", 0x226DFD8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.81.quantity", 0x226DFDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.82.item", 0x226DFDC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.82.quantity", 0x226DFDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.83.item", 0x226DFE0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.83.quantity", 0x226DFE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.84.item", 0x226DFE4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.84.quantity", 0x226DFE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.85.item", 0x226DFE8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.85.quantity", 0x226DFEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.86.item", 0x226DFEC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.86.quantity", 0x226DFEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.87.item", 0x226DFF0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.87.quantity", 0x226DFF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.88.item", 0x226DFF4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.88.quantity", 0x226DFF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.89.item", 0x226DFF8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.89.quantity", 0x226DFFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.90.item", 0x226DFFC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.90.quantity", 0x226DFFE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.91.item", 0x226E000, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.91.quantity", 0x226E002, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.92.item", 0x226E004, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.92.quantity", 0x226E006, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.93.item", 0x226E008, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.93.quantity", 0x226E00A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.94.item", 0x226E00C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.94.quantity", 0x226E00E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.95.item", 0x226E010, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.95.quantity", 0x226E012, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.96.item", 0x226E014, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.96.quantity", 0x226E016, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.97.item", 0x226E018, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.97.quantity", 0x226E01A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.98.item", 0x226E01C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.98.quantity", 0x226E01E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.99.item", 0x226E020, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.99.quantity", 0x226E022, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.0.item", 0x226E0E4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.0.quantity", 0x226E0E6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.1.item", 0x226E0E8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.1.quantity", 0x226E0EA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.2.item", 0x226E0EC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.2.quantity", 0x226E0EE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.3.item", 0x226E0F0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.3.quantity", 0x226E0F2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.4.item", 0x226E0F4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.4.quantity", 0x226E0F6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.5.item", 0x226E0F8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.5.quantity", 0x226E0FA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.6.item", 0x226E0FC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.6.quantity", 0x226E0FE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.7.item", 0x226E100, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.7.quantity", 0x226E102, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.8.item", 0x226E104, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.8.quantity", 0x226E106, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.9.item", 0x226E108, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.9.quantity", 0x226E10A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.10.item", 0x226E10C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.10.quantity", 0x226E10E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.11.item", 0x226E110, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.11.quantity", 0x226E112, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.12.item", 0x226E114, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.12.quantity", 0x226E116, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.13.item", 0x226E118, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.13.quantity", 0x226E11A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.14.item", 0x226E11C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.14.quantity", 0x226E11E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.15.item", 0x226E120, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.15.quantity", 0x226E122, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.16.item", 0x226E124, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.16.quantity", 0x226E126, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.17.item", 0x226E128, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.17.quantity", 0x226E12A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.18.item", 0x226E12C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.18.quantity", 0x226E12E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.19.item", 0x226E130, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.19.quantity", 0x226E132, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.20.item", 0x226E134, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.20.quantity", 0x226E136, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.21.item", 0x226E138, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.21.quantity", 0x226E13A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.22.item", 0x226E13C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.22.quantity", 0x226E13E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.23.item", 0x226E140, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.23.quantity", 0x226E142, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.24.item", 0x226E144, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.24.quantity", 0x226E146, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.25.item", 0x226E148, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.25.quantity", 0x226E14A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.26.item", 0x226E14C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.26.quantity", 0x226E14E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.27.item", 0x226E150, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.27.quantity", 0x226E152, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.28.item", 0x226E154, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.28.quantity", 0x226E156, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.29.item", 0x226E158, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.29.quantity", 0x226E15A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.30.item", 0x226E15C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.30.quantity", 0x226E15E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.31.item", 0x226E160, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.31.quantity", 0x226E162, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.32.item", 0x226E164, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.32.quantity", 0x226E166, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.33.item", 0x226E168, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.33.quantity", 0x226E16A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.34.item", 0x226E16C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.34.quantity", 0x226E16E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.35.item", 0x226E170, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.35.quantity", 0x226E172, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.36.item", 0x226E174, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.36.quantity", 0x226E176, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.37.item", 0x226E178, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.37.quantity", 0x226E17A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.38.item", 0x226E17C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.38.quantity", 0x226E17E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.39.item", 0x226E180, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.39.quantity", 0x226E182, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.40.item", 0x226E184, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.40.quantity", 0x226E186, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.41.item", 0x226E188, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.41.quantity", 0x226E18A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.42.item", 0x226E18C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.42.quantity", 0x226E18E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.43.item", 0x226E190, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.43.quantity", 0x226E192, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.44.item", 0x226E194, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.44.quantity", 0x226E196, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.45.item", 0x226E198, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.45.quantity", 0x226E19A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.46.item", 0x226E19C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.46.quantity", 0x226E19E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.47.item", 0x226E1A0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.47.quantity", 0x226E1A2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.48.item", 0x226E1A4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.48.quantity", 0x226E1A6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.49.item", 0x226E1A8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.49.quantity", 0x226E1AA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.50.item", 0x226E1AC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.50.quantity", 0x226E1AE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.51.item", 0x226E1B0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.51.quantity", 0x226E1B2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.52.item", 0x226E1B4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.52.quantity", 0x226E1B6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.53.item", 0x226E1B8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.53.quantity", 0x226E1BA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.54.item", 0x226E1BC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.54.quantity", 0x226E1BE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.55.item", 0x226E1C0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.55.quantity", 0x226E1C2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.56.item", 0x226E1C4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.56.quantity", 0x226E1C6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.57.item", 0x226E1C8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.57.quantity", 0x226E1CA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.58.item", 0x226E1CC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.58.quantity", 0x226E1CE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.59.item", 0x226E1D0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.59.quantity", 0x226E1D2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.60.item", 0x226E1D4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.60.quantity", 0x226E1D6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.61.item", 0x226E1D8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.61.quantity", 0x226E1DA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.62.item", 0x226E1DC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.62.quantity", 0x226E1DE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.63.item", 0x226E1E0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.63.quantity", 0x226E1E2, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.0.item", 0x226E230, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.0.quantity", 0x226E232, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.1.item", 0x226E234, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.1.quantity", 0x226E236, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.2.item", 0x226E238, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.2.quantity", 0x226E23A, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.3.item", 0x226E23C, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.3.quantity", 0x226E23E, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.4.item", 0x226E240, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.4.quantity", 0x226E242, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.5.item", 0x226E244, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.5.quantity", 0x226E246, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.6.item", 0x226E248, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.6.quantity", 0x226E24A, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.7.item", 0x226E24C, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.7.quantity", 0x226E24E, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.8.item", 0x226E250, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.8.quantity", 0x226E252, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.9.item", 0x226E254, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.9.quantity", 0x226E256, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.0.item", 0x226E024, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.0.quantity", 0x226E026, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.1.item", 0x226E028, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.1.quantity", 0x226E02A, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.2.item", 0x226E02C, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.2.quantity", 0x226E02E, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.3.item", 0x226E030, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.3.quantity", 0x226E032, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.4.item", 0x226E034, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.4.quantity", 0x226E036, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.5.item", 0x226E038, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.5.quantity", 0x226E03A, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.6.item", 0x226E03C, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.6.quantity", 0x226E03E, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.7.item", 0x226E040, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.7.quantity", 0x226E042, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.8.item", 0x226E044, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.8.quantity", 0x226E046, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.9.item", 0x226E048, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.9.quantity", 0x226E04A, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.10.item", 0x226E04C, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.10.quantity", 0x226E04E, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.11.item", 0x226E050, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.11.quantity", 0x226E052, [0, 0], 0);
            mapper.AssertAreEqual("overworld.map_name", 0x226E74C, [87, 1], "Route 202 - Map 1");
            mapper.AssertAreEqual("overworld.map_index", 0x226E74C, [87, 1], 343);
            mapper.AssertAreEqual("overworld.x", 0x226E754, [177, 0, 0, 0], 177);
            mapper.AssertAreEqual("overworld.y", 0x226E758, [58, 3, 0, 0], 826);
            mapper.AssertAreEqual("overworld.encounter_rate", 30);
            mapper.AssertAreEqual("overworld.encounter_rates.walking", 0x22918C0, [30, 0, 0, 0], 30);
            mapper.AssertAreEqual("overworld.encounter_rates.surfing", 0x229198C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.old_rod", 0x22919E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.good_rod", 0x2291A10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.super_rod", 0x2291A3C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.mode", "Trainer");
            mapper.AssertAreEqual("battle.player.party_position", 0x22B5C6C, [0], 0);
            mapper.AssertAreEqual("battle.player.party_position_2", 0x22B5C78, [0], 0);
            mapper.AssertAreEqual("battle.player.team_count", 0x22B9AD4, [1], 1);
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0x22B5880, [134, 1], "Chimchar");
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0x22B58B6, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 39, 1, 255, 255, 255, 255], "AAAAABBB6");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0x22B58B4, [8], 8);
            mapper.AssertAreEqual("battle.player.active_pokemon.exp", 0x22B58E4, [59, 1, 0, 0], 315);
            mapper.AssertAreEqual("battle.player.active_pokemon.nature", 0x22B58E8, [141, 192, 226, 196], "Modest");
            mapper.AssertAreEqual("battle.player.active_pokemon.friendship", 0x22B58B5, [88], 88);
            mapper.AssertAreEqual("battle.player.active_pokemon.ability", 0x22B58A7, [66], "Blaze");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0x22B58A4, [10], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0x22B58A5, [10], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.ot_name", 0x22B58D4, [46, 1, 43, 1, 65, 1, 56, 1], "DAWN");
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0x22B58F8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_condition", 0x22B58EC, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0x22B588C, [10, 0], "Scratch");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0x22B58AC, [30], 30);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0x22B588E, [43, 0], "Leer");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0x22B58AD, [30], 30);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0x22B5890, [52, 0], "Ember");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0x22B58AE, [21], 21);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0x22B5892, [241, 0], "Sunny Day");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0x22B58AF, [5], 5);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0x22B58CC, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0x22B58D0, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0x22B5882, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0x22B5884, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0x22B5886, [16, 0], 16);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0x22B5888, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0x22B588A, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0x22B5899, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0x22B589A, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0x22B589B, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0x22B589C, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0x22B589D, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0x22B589E, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0x22B589F, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.hp", 0x22B5894, [68, 86, 90, 152], 4);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.attack", 0x22B5894, [68, 86, 90, 152], 18);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.defense", 0x22B5894, [68, 86, 90, 152], 21);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.speed", 0x22B5894, [68, 86, 90, 152], 20);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_attack", 0x22B5894, [68, 86, 90, 152], 5);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_defense", 0x22B5894, [68, 86, 90, 152], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.internals.personality_value", 0x22B58E8, [141, 192, 226, 196], 3303194765);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.species", 0x22B5A00, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nickname", 0x22B5A36, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.level", 0x22B5A34, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.exp", 0x22B5A64, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nature", 0x22B5A68, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.friendship", 0x22B5A35, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ability", 0x22B5A27, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_1", 0x22B5A24, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_2", 0x22B5A25, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ot_name", 0x22B5A54, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.held_item", 0x22B5A78, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_condition", 0x22B5A6C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.move", 0x22B5A0C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp", 0x22B5A2C, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.move", 0x22B5A0E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp", 0x22B5A2D, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.move", 0x22B5A10, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp", 0x22B5A2E, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.move", 0x22B5A12, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp", 0x22B5A2F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp", 0x22B5A4C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp_max", 0x22B5A50, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.attack", 0x22B5A02, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.defense", 0x22B5A04, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.speed", 0x22B5A06, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_attack", 0x22B5A08, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_defense", 0x22B5A0A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.attack", 0x22B5A19, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.defense", 0x22B5A1A, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.speed", 0x22B5A1B, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_attack", 0x22B5A1C, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_defense", 0x22B5A1D, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.accuracy", 0x22B5A1E, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.evasion", 0x22B5A1F, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.hp", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.speed", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.internals.personality_value", 0x22B5A68, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.species", 0x8, [134, 1], "Chimchar");
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0x8, [134, 1], 390);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0x48, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 39, 1, 255, 255, 120, 187], "AAAAABBB6");
            mapper.AssertAreEqual("battle.player.team.0.level", 0x8C, [8], 8);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0x10, [59, 1, 0, 0], 315);
            mapper.AssertAreEqual("battle.player.team.0.ot_name", 0x68, [46, 1, 43, 1, 65, 1, 56, 1, 255, 255, 0, 0, 0, 0, 0, 0], "DAWN");
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("battle.player.team.0.ability", 0x15, [66], "Blaze");
            mapper.AssertAreEqual("battle.player.team.0.nature", "Modest");
            mapper.AssertAreEqual("battle.player.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.0.friendship", 0x14, [88], 88);
            mapper.AssertAreEqual("battle.player.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0x28, [10, 0], "Scratch");
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0x30, [30], 30);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0x2A, [43, 0], "Leer");
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0x2C, [52, 0], "Ember");
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0x32, [21], 21);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0x2E, [241, 0], "Sunny Day");
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0x33, [5], 5);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0x8E, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0x90, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0x92, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0x94, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0x96, [16, 0], 16);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_attack", 0x98, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_defense", 0x9A, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.ivs.hp", 0x38, [68, 86, 90, 152], 4);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0x38, [68, 86, 90, 152], 18);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0x38, [68, 86, 90, 152], 21);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0x38, [68, 86, 90, 152], 20);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_attack", 0x38, [68, 86, 90, 152], 5);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_defense", 0x38, [68, 86, 90, 152], 12);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0x18, [2], 2);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0x1B, [4], 4);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_egg", 0x38, [68, 86, 90, 152], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_nicknamed", 0x38, [68, 86, 90, 152], true);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.internals.personality_value", 3303194765);
            mapper.AssertAreEqual("battle.player.team.0.internals.checksum", 0x6, [229, 30], 7909);
            mapper.AssertAreEqual("battle.player.team.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("battle.player.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_location", 0x80, [76, 0], 76);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_level", 0x84, [133], 5);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.female_ot_gender", 0x84, [133], true);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.encounter_type", 0x85, [12], 12);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.player.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.player.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.player.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.player.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.player.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.species", 0x8, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.wild.0.dex_number", 0x8, [143, 1], 399);
            mapper.AssertAreEqual("battle.wild.0.nickname", 0x48, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0], "BIDOOF");
            mapper.AssertAreEqual("battle.wild.0.level", 0x8C, [3], 3);
            mapper.AssertAreEqual("battle.wild.0.exp", 0x10, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.wild.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.wild.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("battle.wild.0.ability", 0x15, [109], "Unaware");
            mapper.AssertAreEqual("battle.wild.0.nature", "Bashful");
            mapper.AssertAreEqual("battle.wild.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.friendship", 0x14, [70], 70);
            mapper.AssertAreEqual("battle.wild.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.stats.hp", 0x8E, [17, 0], 17);
            mapper.AssertAreEqual("battle.wild.0.stats.hp_max", 0x90, [17, 0], 17);
            mapper.AssertAreEqual("battle.wild.0.stats.attack", 0x92, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.defense", 0x94, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.speed", 0x96, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.special_attack", 0x98, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.special_defense", 0x9A, [8, 0], 8);
            mapper.AssertAreEqual("battle.wild.0.ivs.hp", 0x38, [17, 160, 34, 49], 17);
            mapper.AssertAreEqual("battle.wild.0.ivs.attack", 0x38, [17, 160, 34, 49], 0);
            mapper.AssertAreEqual("battle.wild.0.ivs.defense", 0x38, [17, 160, 34, 49], 8);
            mapper.AssertAreEqual("battle.wild.0.ivs.speed", 0x38, [17, 160, 34, 49], 5);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_attack", 0x38, [17, 160, 34, 49], 18);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_defense", 0x38, [17, 160, 34, 49], 24);
            mapper.AssertAreEqual("battle.wild.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.flags.is_egg", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.wild.0.flags.is_nicknamed", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.0.internals.personality_value", 556856793);
            mapper.AssertAreEqual("battle.wild.0.internals.checksum", 0x6, [155, 39], 10139);
            mapper.AssertAreEqual("battle.wild.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("battle.wild.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.wild.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_level", 0x84, [3], 3);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.female_ot_gender", 0x84, [3], false);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.wild.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.wild.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.wild.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.wild.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.wild.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.wild.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.name", 0x22AFD80, [52, 41], null);
            mapper.AssertAreEqual("battle.ally.trainer", 0x22AFD80, [52, 41], null);
            mapper.AssertAreEqual("battle.ally.id", 0x22AFD80, [52, 41], 10548);
            mapper.AssertAreEqual("battle.ally.enemy_bar_synced_hp", 0x22B5A4C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.party_position", 0x22B5C78, [0], 0);
            mapper.AssertAreEqual("battle.ally.team_count", 0x22BA634, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.species", 0x22B5A00, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nickname", 0x22B5A36, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.level", 0x22B5A34, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.exp", 0x22B5A64, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nature", 0x22B5A68, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.active_pokemon.friendship", 0x22B5A35, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ability", 0x22B5A27, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_1", 0x22B5A24, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_2", 0x22B5A25, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.ot_name", 0x22B5A54, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.held_item", 0x22B5A78, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_condition", 0x22B5A6C, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.move", 0x22B5A0C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp", 0x22B5A2C, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.move", 0x22B5A0E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp", 0x22B5A2D, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.move", 0x22B5A10, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp", 0x22B5A2E, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.move", 0x22B5A12, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp", 0x22B5A2F, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp", 0x22B5A4C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp_max", 0x22B5A50, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.attack", 0x22B5A02, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.defense", 0x22B5A04, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.speed", 0x22B5A06, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_attack", 0x22B5A08, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_defense", 0x22B5A0A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.attack", 0x22B5A19, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.defense", 0x22B5A1A, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.speed", 0x22B5A1B, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_attack", 0x22B5A1C, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_defense", 0x22B5A1D, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.accuracy", 0x22B5A1E, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.evasion", 0x22B5A1F, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.hp", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.speed", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.internals.personality_value", 0x22B5A68, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.0.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.0.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0x22AFD7E, [44, 2], "Bird Keeper Krystal");
            mapper.AssertAreEqual("battle.opponent.trainer", 0x22AFD7E, [44, 2], "Bird Keeper Krystal");
            mapper.AssertAreEqual("battle.opponent.id", 0x22AFD7E, [44, 2], 556);
            mapper.AssertAreEqual("battle.opponent.enemy_bar_synced_hp", 0x22B598C, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x22BA084, [1], 1);
            mapper.AssertAreEqual("battle.opponent.party_position", 0x22B5C72, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x22B5940, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x22B5976, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255], "BIDOOF");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x22B5974, [3], 3);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x22B59A4, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nature", 0x22B59A8, [217, 245, 48, 33], "Bashful");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x22B5975, [70], 70);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x22B5967, [109], "Unaware");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x22B5964, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x22B5965, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x22B5994, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x22B59B8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0x22B59AC, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x22B594C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x22B596C, [35], 35);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x22B594E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x22B596D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x22B5950, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x22B596E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x22B5952, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x22B596F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x22B598C, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x22B5990, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x22B5942, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x22B5944, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x22B5946, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x22B5948, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x22B594A, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x22B5959, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x22B595A, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x22B595B, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x22B595C, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x22B595D, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x22B595E, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x22B595F, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x22B5954, [17, 160, 34, 49], 17);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x22B5954, [17, 160, 34, 49], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x22B5954, [17, 160, 34, 49], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x22B5954, [17, 160, 34, 49], 5);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x22B5954, [17, 160, 34, 49], 18);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x22B5954, [17, 160, 34, 49], 24);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.internals.personality_value", 0x22B59A8, [217, 245, 48, 33], 556856793);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x8, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x8, [143, 1], 399);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x48, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0], "BIDOOF");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x8C, [3], 3);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x10, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x15, [109], "Unaware");
            mapper.AssertAreEqual("battle.opponent.team.0.nature", "Bashful");
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x14, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x8E, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x90, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x92, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x94, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x96, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x98, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x9A, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x38, [17, 160, 34, 49], 17);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x38, [17, 160, 34, 49], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x38, [17, 160, 34, 49], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x38, [17, 160, 34, 49], 5);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x38, [17, 160, 34, 49], 18);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x38, [17, 160, 34, 49], 24);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_egg", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_nicknamed", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 556856793);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x6, [155, 39], 10139);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_level", 0x84, [3], 3);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.female_ot_gender", 0x84, [3], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.name", 0x22AFD82, [45, 2], "Dragon Tamer Geoffrey");
            mapper.AssertAreEqual("battle.opponent_2.trainer", 0x22AFD82, [45, 2], "Dragon Tamer Geoffrey");
            mapper.AssertAreEqual("battle.opponent_2.id", 0x22AFD82, [45, 2], 557);
            mapper.AssertAreEqual("battle.opponent_2.party_position", 0x22B5C7E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.enemy_bar_synced_hp", 0x22B5B0C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team_count", 0x22BABE4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.species", 0x22B5AC0, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nickname", 0x22B5AF6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.level", 0x22B5AF4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.exp", 0x22B5B24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nature", 0x22B5B28, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.friendship", 0x22B5AF5, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ability", 0x22B5AE7, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_1", 0x22B5AE4, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_2", 0x22B5AE5, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ot_name", 0x22B5B14, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.held_item", 0x22B5B38, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.status_condition", 0x22B5B2C, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.move", 0x22B5ACC, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp", 0x22B5AEC, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.move", 0x22B5ACE, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp", 0x22B5AED, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.move", 0x22B5AD0, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp", 0x22B5AEE, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.move", 0x22B5AD2, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp", 0x22B5AEF, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp", 0x22B5B0C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp_max", 0x22B5B10, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.attack", 0x22B5AC2, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.defense", 0x22B5AC4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.speed", 0x22B5AC6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_attack", 0x22B5AC8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_defense", 0x22B5ACA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.attack", 0x22B5AD9, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.defense", 0x22B5ADA, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.speed", 0x22B5ADB, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_attack", 0x22B5ADC, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_defense", 0x22B5ADD, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.accuracy", 0x22B5ADE, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.evasion", 0x22B5ADF, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.hp", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.attack", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.defense", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.speed", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_attack", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_defense", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.internals.personality_value", 0x22B5B28, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x22B2CC0, [0, 0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x22B2CC4, [0], 0);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0x22B5C5F, [0], 0);
            mapper.AssertAreEqual("rival.name", 0x226FABC, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1], "AAAAAAA");
            mapper.AssertAreEqual("screen.menu.scene", 0x22C3D3F, [1], 1);
            mapper.AssertAreEqual("screen.menu.cursor.flag", 0x22C3D90, [0], 0);
            mapper.AssertAreEqual("screen.menu.cursor.x", 0x22C3D92, [0], 0);
            mapper.AssertAreEqual("screen.menu.cursor.y", 0x22C3D91, [0], 0);
            mapper.AssertAreEqual("game_time.hours", 0x226D59A, [8, 0], 8);
            mapper.AssertAreEqual("game_time.minutes", 0x226D59C, [4], 4);
            mapper.AssertAreEqual("game_time.seconds", 0x226D59D, [57], 57);
            mapper.AssertAreEqual("meta.generation", "4");
            mapper.AssertAreEqual("meta.game_name", "Diamond and Pearl");
            mapper.AssertAreEqual("meta.game_type", "Originals");
            mapper.AssertAreEqual("meta.state", "Battle");
            mapper.AssertAreEqual("meta.state_enemy", "Pokemon In Battle");
            mapper.AssertAreEqual("meta.global_pointer", 0x2106FAC, [0, 3, 38, 2], 36045568);
            mapper.AssertAreEqual("meta.enemy_pointer", 0x22967C8, [248, 103, 41, 2], 36268024);
        }

    }
}
