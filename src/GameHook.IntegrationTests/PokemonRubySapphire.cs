using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonRubySapphire : BaseTest
    {


        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBA_PokemonRuby(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x2024EA4, [199, 187, 211, 255, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("player.gender", 0x2024EAC, [1], "Female");
            mapper.AssertAreEqual("player.player_id", 0x20228D6, [3, 32], 8195);
            mapper.AssertAreEqual("player.team_count", 0x3004350, [1], 1);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", 0x20, [27, 1], "Mudkip");
            mapper.AssertAreEqual("player.active_pokemon.dex_number", 0x20, [27, 1], 258);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0x8, [201, 201, 201, 201, 201, 201, 201, 201, 201, 201], "OOOOOOOOOO");
            mapper.AssertAreEqual("player.active_pokemon.level", 0x54, [7], 7);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0x24, [54, 1, 0, 0], 310);
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0x4, [21, 1], 277);
            mapper.AssertAreEqual("player.active_pokemon.ability", 0x48, [103, 178, 247, 50], false);
            mapper.AssertAreEqual("player.active_pokemon.nature", 0);
            mapper.AssertAreEqual("player.active_pokemon.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.active_pokemon.friendship", 0x29, [81], 81);
            mapper.AssertAreEqual("player.active_pokemon.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0x34, [24], 24);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0x30, [189, 0], "Mud-Slap");
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0x36, [10], 10);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0x56, [6, 0], 6);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0x58, [24, 0], 24);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0x5A, [16, 0], 16);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0x5E, [11, 0], 11);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_attack", 0x60, [13, 0], 13);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_defense", 0x62, [13, 0], 13);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_attack", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_defense", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0);
            mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 0x48, [103, 178, 247, 50], 7);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0x48, [103, 178, 247, 50], 19);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0x48, [103, 178, 247, 50], 12);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0x48, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_attack", 0x48, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_defense", 0x48, [103, 178, 247, 50], 25);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0x39, [2], 2);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0x3B, [5], 5);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.internals.personality_value", 1773943925);
            mapper.AssertAreEqual("player.active_pokemon.internals.checksum", 0x1C, [225, 25], 6625);
            //mapper.AssertAreEqual("player.active_pokemon.misc.is_egg", 0x28, [0, 81, 0, 0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.active_pokemon.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.active_pokemon.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.ot_name", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.active_pokemon.misc.pokerus_status", 0x24, [54], 54);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("player.active_pokemon.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.active_pokemon.misc.robbins_obedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("player.team.0.species", 0x20, [27, 1], "Mudkip");
            mapper.AssertAreEqual("player.team.0.dex_number", 0x20, [27, 1], 258);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [201, 201, 201, 201, 201, 201, 201, 201, 201, 201], "OOOOOOOOOO");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [7], 7);
            mapper.AssertAreEqual("player.team.0.exp", 0x24, [54, 1, 0, 0], 310);
            mapper.AssertAreEqual("player.team.0.ot_id", 0x4, [21, 1], 277);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [103, 178, 247, 50], false);
            mapper.AssertAreEqual("player.team.0.nature", 0);
            mapper.AssertAreEqual("player.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [81], 81);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0x2C, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0x34, [24], 24);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0x2E, [45, 0], "Growl");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0x30, [189, 0], "Mud-Slap");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0x36, [10], 10);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0x56, [6, 0], 6);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0x58, [24, 0], 24);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0x5A, [16, 0], 16);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0x5E, [11, 0], 11);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0x60, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0x62, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 0x48, [103, 178, 247, 50], 7);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0x48, [103, 178, 247, 50], 19);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0x48, [103, 178, 247, 50], 12);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0x48, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("player.team.0.ivs.special_attack", 0x48, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("player.team.0.ivs.special_defense", 0x48, [103, 178, 247, 50], 25);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0x39, [2], 2);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0x3B, [5], 5);
            mapper.AssertAreEqual("player.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.internals.personality_value", 1773943925);
            mapper.AssertAreEqual("player.team.0.internals.checksum", 0x1C, [225, 25], 6625);
            mapper.AssertAreEqual("player.team.0.misc.is_egg", 0x28, [0, 81, 0, 0], false);
            mapper.AssertAreEqual("player.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.misc.ot_name", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("player.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.misc.pokerus_status", 0x24, [54], 54);
            mapper.AssertAreEqual("player.team.0.misc.met_location", 0x25, [1], 1);
            mapper.AssertAreEqual("player.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.robbins_obedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("player.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.1.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.nature", 0);
            mapper.AssertAreEqual("player.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.1.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.1.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.nature", 0);
            mapper.AssertAreEqual("player.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.nature", 0);
            mapper.AssertAreEqual("player.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.3.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.3.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.nature", 0);
            mapper.AssertAreEqual("player.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.nature", 0);
            mapper.AssertAreEqual("player.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("player.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0x2026A15, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0x2026A16, [0], false);
            mapper.AssertAreEqual("bag.quantity_decyption_key", 0x3005E3C, [0, 0], 0);
            mapper.AssertAreEqual("overworld.map_name", 0x2025738, [0, 10], "OLDALE_TOWN");
            mapper.AssertAreEqual("overworld.map_index", 0x2025738, [0, 10], 2560);
            mapper.AssertAreEqual("battle.player.party_position", 0x2024A6A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0x2024A80, [27, 1], "Mudkip");
            mapper.AssertAreEqual("battle.player.active_pokemon.dex_number", 0x2024A80, [27, 1], 258);
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0x2024AB0, [201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 255], "OOOOOOOOOO");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0x2024AAA, [7], 7);
            mapper.AssertAreEqual("battle.player.active_pokemon.exp", 0x2024AC4, [241, 0, 0, 0], 241);
            mapper.AssertAreEqual("battle.player.active_pokemon.friendship", 0x2024AAB, [81], 81);
            mapper.AssertAreEqual("battle.player.active_pokemon.personality_value", 0x2024AC8, [117, 60, 188, 105], 1773943925);
            mapper.AssertAreEqual("battle.player.active_pokemon.ability", 0x2024AA0, [67], "Torrent");
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0x2024AAE, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.focus_energy", 0x2024AD2, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0x2024AA1, [11], "Water");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0x2024AA2, [11], "Water");
            mapper.AssertAreEqual("battle.player.active_pokemon.status_1", 0x2024ACC, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_2", 0x2024ACC, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.ot_name", 0x2024ABC, [199, 187, 211, 255, 224, 69, 0, 3], "MAY");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0x2024A8C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0x2024AAC, [24], 24);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0x2024A8E, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0x2024AAD, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0x2024A90, [189, 0], "Mud-Slap");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0x2024AAE, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0x2024A92, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0x2024AAF, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0x2024AA8, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0x2024AAC, [24, 0], 24);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0x2024A82, [16, 0], 16);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0x2024A84, [12, 0], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0x2024A86, [11, 0], 11);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0x2024A88, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0x2024A8A, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.hp", 0x2024A94, [103, 178, 247, 50], 7);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.attack", 0x2024A94, [103, 178, 247, 50], 19);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.defense", 0x2024A94, [103, 178, 247, 50], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.speed", 0x2024A94, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_attack", 0x2024A94, [103, 178, 247, 50], 15);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_defense", 0x2024A94, [103, 178, 247, 50], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0x2024A99, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0x2024A9A, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0x2024A9B, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0x2024A9C, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0x2024A9D, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0x2024A9E, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0x2024A9F, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.species", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.dex_number", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nickname", 0x2024B60, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.level", 0x2024B5A, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.exp", 0x2024B74, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.friendship", 0x2024B5B, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.personality_value", 0x2024B78, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ability", 0x2024B50, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.held_item", 0x2024B5E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.focus_energy", 0x2024B82, [0], false);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_1", 0x2024B51, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_2", 0x2024B52, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_1", 0x2024B7C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_2", 0x2024B7C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ot_name", 0x2024B6C, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.move", 0x2024B3C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp", 0x2024B5C, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.move", 0x2024B3E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp", 0x2024B5D, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.move", 0x2024B40, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp", 0x2024B5E, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.move", 0x2024B42, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp", 0x2024B5F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp", 0x2024B58, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp_max", 0x2024B5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.attack", 0x2024B32, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.defense", 0x2024B34, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.speed", 0x2024B36, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_attack", 0x2024B38, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_defense", 0x2024B3A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.hp", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.attack", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.defense", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.speed", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_attack", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_defense", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.attack", 0x2024B49, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.defense", 0x2024B4A, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.speed", 0x2024B4B, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_attack", 0x2024B4C, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_defense", 0x2024B4D, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.accuracy", 0x2024B4E, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.evasion", 0x2024B4F, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.species", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.dex_number", 0x2024B30, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nickname", 0x2024B60, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.ally.active_pokemon.level", 0x2024B5A, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.exp", 0x2024B74, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.friendship", 0x2024B5B, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.personality_value", 0x2024B78, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ability", 0x2024B50, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.held_item", 0x2024B5E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.focus_energy", 0x2024B82, [0], false);
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_1", 0x2024B51, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_2", 0x2024B52, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_1", 0x2024B7C, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_2", 0x2024B7C, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ot_name", 0x2024B6C, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.move", 0x2024B3C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp", 0x2024B5C, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.move", 0x2024B3E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp", 0x2024B5D, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.move", 0x2024B40, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp", 0x2024B5E, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.move", 0x2024B42, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp", 0x2024B5F, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp", 0x2024B58, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp_max", 0x2024B5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.attack", 0x2024B32, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.defense", 0x2024B34, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.speed", 0x2024B36, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_attack", 0x2024B38, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_defense", 0x2024B3A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.hp", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.attack", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.defense", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.speed", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_attack", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_defense", 0x2024B44, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.attack", 0x2024B49, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.defense", 0x2024B4A, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.speed", 0x2024B4B, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_attack", 0x2024B4C, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_defense", 0x2024B4D, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.accuracy", 0x2024B4E, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.evasion", 0x2024B4F, [0], -6);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x30045B8, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x2024AD8, [21, 1], "Treecko");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0x2024AD8, [21, 1], 252);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x2024B08, [206, 204, 191, 191, 189, 197, 201, 255, 201, 201, 255], "TREECKO");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x2024B02, [5], 5);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x2024B1C, [135, 0, 0, 0], 135);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x2024B03, [70], 70);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.personality_value", 0x2024B20, [136, 179, 10, 0], 701320);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x2024AF8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x2024B06, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.focus_energy", 0x2024B2A, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x2024AF9, [12], "Grass");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x2024AFA, [12], "Grass");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_1", 0x2024B24, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_2", 0x2024B24, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x2024B14, [199, 187, 211, 255, 224, 69, 0, 3], "MAY");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x2024AE4, [1, 0], "Pound");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x2024B04, [19], 19);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x2024AE6, [43, 0], "Leer");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x2024B05, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x2024AE8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x2024B06, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x2024AEA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x2024B07, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x2024B00, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x2024B04, [19, 0], 19);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x2024ADA, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x2024ADC, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x2024ADE, [12, 0], 12);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x2024AE0, [11, 0], 11);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x2024AE2, [11, 0], 11);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x2024AEC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x2024AF1, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x2024AF2, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x2024AF3, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x2024AF4, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x2024AF5, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x2024AF6, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x2024AF7, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.species", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.dex_number", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.nickname", 0x2024BB8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.level", 0x2024BB2, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.exp", 0x2024BCC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.friendship", 0x2024BB3, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.personality_value", 0x2024BD0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ability", 0x2024BA8, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.held_item", 0x2024BB6, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.focus_energy", 0x2024BDA, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.type_1", 0x2024BA9, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.type_2", 0x2024BAA, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.status_1", 0x2024BD4, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.status_2", 0x2024BD4, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ot_name", 0x2024BC4, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.move", 0x2024B94, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.pp", 0x2024BB4, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.move", 0x2024B96, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.pp", 0x2024BB5, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.move", 0x2024B98, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.pp", 0x2024BB6, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.move", 0x2024B9A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.pp", 0x2024BB7, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.hp", 0x2024BB0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.hp_max", 0x2024BB4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.attack", 0x2024B8A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.defense", 0x2024B8C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.speed", 0x2024B8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.special_attack", 0x2024B90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.stats.special_defense", 0x2024B92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.hp", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.attack", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.defense", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.speed", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.special_attack", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.ivs.special_defense", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.attack", 0x2024BA1, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.defense", 0x2024BA2, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.speed", 0x2024BA3, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.special_attack", 0x2024BA4, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.special_defense", 0x2024BA5, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.accuracy", 0x2024BA6, [0], -6);
            mapper.AssertAreEqual("battle.opponent.active_pokemon_2.modifiers.evasion", 0x2024BA7, [0], -6);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x20, [21, 1], "Treecko");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x20, [21, 1], 252);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x8, [206, 204, 191, 191, 189, 197, 201, 255, 8, 0], "TREECKO");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x54, [5], 5);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x24, [135, 0, 0, 0], 135);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0x4, [60, 171], 43836);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.nature", 20);
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x2C, [1, 0], "Pound");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x34, [31], 31);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2E, [43, 0], "Leer");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x35, [30], 30);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x58, [19, 0], 19);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x5A, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x5C, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x5E, [12, 0], 12);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x60, [11, 0], 11);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x62, [11, 0], 11);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 701320);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x1C, [236, 24], 6380);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.is_egg", 0x28, [0, 70, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.is_bad_egg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.has_species", 0x13, [2], true);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.use_egg_name", 0x13, [2], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ot_name", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.pokerus_status", 0x24, [135], 135);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.robbins_obedience", 0x2C, [1, 0, 43, 0], 2818049);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0x4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.nature", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.is_egg", 0x28, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.is_bad_egg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.has_species", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.use_egg_name", 0x13, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ot_name", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_circle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_square", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_triangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.marking_heart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.pokerus_status", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_location", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.origins_info", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.robbins_obedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.species", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.dex_number", 0x2024B88, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.nickname", 0x2024BB8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.level", 0x2024BB2, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.exp", 0x2024BCC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.friendship", 0x2024BB3, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.personality_value", 0x2024BD0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ability", 0x2024BA8, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.held_item", 0x2024BB6, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.focus_energy", 0x2024BDA, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.type_1", 0x2024BA9, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.type_2", 0x2024BAA, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.status_1", 0x2024BD4, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.status_2", 0x2024BD4, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ot_name", 0x2024BC4, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.0.move", 0x2024B94, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.0.pp", 0x2024BB4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.1.move", 0x2024B96, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.1.pp", 0x2024BB5, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.2.move", 0x2024B98, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.2.pp", 0x2024BB6, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.3.move", 0x2024B9A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.3.pp", 0x2024BB7, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.hp", 0x2024BB0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.hp_max", 0x2024BB4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.attack", 0x2024B8A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.defense", 0x2024B8C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.speed", 0x2024B8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.special_attack", 0x2024B90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.stats.special_defense", 0x2024B92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ivs.hp", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ivs.attack", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ivs.defense", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ivs.speed", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ivs.special_attack", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.ivs.special_defense", 0x2024B9C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.attack", 0x2024BA1, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.defense", 0x2024BA2, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.speed", 0x2024BA3, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.special_attack", 0x2024BA4, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.special_defense", 0x2024BA5, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.accuracy", 0x2024BA6, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon_2.modifiers.evasion", 0x2024BA7, [0], -6);
            mapper.AssertAreEqual("battle.field.player.safeguard", 0x2024C7A, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.reflect", 0x2024C7A, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.lightscreen", 0x2024C7A, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguard_count", 0x2024C86, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightscreen_count", 0x2024C82, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflect_count", 0x2024C80, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.safeguard", 0x2024C7C, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.reflect", 0x2024C7C, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen", 0x2024C7C, [0, 0], false);
            mapper.AssertAreEqual("battle.field.opponent.safeguard_count", 0x2024C91, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen_count", 0x2024C8D, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.reflect_count", 0x2024C8B, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x2024DB8, [0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x2024DE4, [0], 0);
            mapper.AssertAreEqual("battle.battle_flags.double", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.link", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.is_battle", 0x20239F8, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.battle_flags.trainer", 0x20239F8, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.battle_flags.first_battle", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.link_in_battle", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.multi", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.safari", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.battle_tower", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.old_man_tutorial", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.roamer", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.eReader_trainer", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.kyogre_groudon", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.ghost_unveiled", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.regi", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.ghost", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.pokedude", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.wild_scripted", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.legenadry_frlg", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.battle_flags.trainer_tower", 0x20239F8, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.other.battle_outcomes", 0x2024D26, [1], "WON");
            mapper.AssertAreEqual("battle.other.battle_dialogue", 0x2023A60, [16], "Player Not In Control");
            mapper.AssertAreEqual("game_time.hours", 0x2024EB2, [0], 0);
            mapper.AssertAreEqual("game_time.minutes", 0x2024EB4, [8], 8);
            mapper.AssertAreEqual("game_time.seconds", 0x2024EB5, [49], 49);
            mapper.AssertAreEqual("game_time.frames", 0x2024EB6, [14], 14);
            mapper.AssertAreEqual("pointers.callback_1", 0x3001770, [113, 67, 5, 8], "Overworld");
            mapper.AssertAreEqual("pointers.callback_2", 0x3001774, [197, 67, 5, 8], "Overworld");
            mapper.AssertAreEqual("meta.generation", "3");
            mapper.AssertAreEqual("meta.game_name", "Ruby and Sapphire");
            mapper.AssertAreEqual("meta.game_type", "Originals");
            mapper.AssertAreEqual("meta.state", "Overworld");
        }


    }
}
