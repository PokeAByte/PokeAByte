using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenAPI.GameHook;
using System;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class Deprecated_Pokemon_Emerald : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBA_PokemonEmeraldDeprecated(3);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x2024A68, [187, 255, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.gender", 0x2024A70, [0], "Male");
            mapper.AssertAreEqual("player.teamCount", 0x20244E9, [4], 4);
            mapper.AssertAreEqual("player.team.0.personalityValue", 1782944528);
            mapper.AssertAreEqual("player.team.0.checksum", 0x1C, [98, 180], 46178);
            mapper.AssertAreEqual("player.team.0.otID", 0x4, [62, 47, 113, 130], 2188455742);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [189, 194, 195, 189, 197, 191, 200, 163, 255, 255], "CHICKEN2");
            mapper.AssertAreEqual("player.team.0.species", 0x20, [24, 1], "Torchic");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0x20, [24, 1], "255");
            mapper.AssertAreEqual("player.team.0.speciesArray", 0x20, [24, 1], " pokedexNumber: 255, name: 'Torchic' ");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [8], 8);
            mapper.AssertAreEqual("player.team.0.expPoints", 0x24, [80, 1, 0, 0], 336);
            mapper.AssertAreEqual("player.team.0.nature", 3);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [90], 90);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.maxHp", 0x58, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.attack", 0x5A, [17, 0], 17);
            mapper.AssertAreEqual("player.team.0.defense", 0x5C, [12, 0], 12);
            mapper.AssertAreEqual("player.team.0.speed", 0x5E, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0x60, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0x62, [15, 0], 15);
            mapper.AssertAreEqual("player.team.0.ivEggAbilityBlock", 0x48, [100, 198, 38, 50], 841401956);
            mapper.AssertAreEqual("player.team.0.ivHp", 0x48, [100, 198, 38, 50], 4);
            mapper.AssertAreEqual("player.team.0.ivAttack", 0x48, [100, 198, 38, 50], 19);
            mapper.AssertAreEqual("player.team.0.ivDefense", 0x48, [100, 198, 38, 50], 17);
            mapper.AssertAreEqual("player.team.0.ivSpeed", 0x48, [100, 198, 38, 50], 13);
            mapper.AssertAreEqual("player.team.0.ivSpecialAttack", 0x48, [100, 198, 38, 50], 2);
            mapper.AssertAreEqual("player.team.0.ivSpecialDefense", 0x48, [100, 198, 38, 50], 25);
            mapper.AssertAreEqual("player.team.0.isEgg", 0x48, [100, 198, 38, 50], false);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [100, 198, 38, 50], false);
            mapper.AssertAreEqual("player.team.0.evHp", 0x38, [2], 2);
            mapper.AssertAreEqual("player.team.0.evAttack", 0x39, [4], 4);
            mapper.AssertAreEqual("player.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpeed", 0x3B, [1], 1);
            mapper.AssertAreEqual("player.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1", 0x2C, [10, 0], "SCRATCH");
            mapper.AssertAreEqual("player.team.0.move2", 0x2E, [45, 0], "GROWL");
            mapper.AssertAreEqual("player.team.0.move3", 0x30, [116, 0], "FOCUS ENERGY");
            mapper.AssertAreEqual("player.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0x34, [32], 32);
            mapper.AssertAreEqual("player.team.0.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.move3pp", 0x36, [30], 30);
            mapper.AssertAreEqual("player.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.otName", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.pokerusStatus", 0x24, [80], 80);
            mapper.AssertAreEqual("player.team.0.metLocation", 0x25, [1], 1);
            mapper.AssertAreEqual("player.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.robbinsObedience", 0x2C, [10, 0, 45, 0], 2949130);
            mapper.AssertAreEqual("player.team.1.personalityValue", 3493365440);
            mapper.AssertAreEqual("player.team.1.checksum", 0x1C, [168, 120], 30888);
            mapper.AssertAreEqual("player.team.1.otID", 0x4, [62, 47, 113, 130], 2188455742);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [188, 189, 188, 190, 188, 255, 255, 255, 255, 255], "BCBDB");
            mapper.AssertAreEqual("player.team.1.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0x20, [30, 1], "261");
            mapper.AssertAreEqual("player.team.1.speciesArray", 0x20, [30, 1], " pokedexNumber: 261, name: 'Poochyena' ");
            mapper.AssertAreEqual("player.team.1.level", 0x54, [2], 2);
            mapper.AssertAreEqual("player.team.1.expPoints", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("player.team.1.nature", 15);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.hp", 0x56, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.maxHp", 0x58, [13, 0], 13);
            mapper.AssertAreEqual("player.team.1.attack", 0x5A, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.speed", 0x5E, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0x62, [6, 0], 6);
            mapper.AssertAreEqual("player.team.1.ivEggAbilityBlock", 0x48, [162, 231, 26, 22], 370861986);
            mapper.AssertAreEqual("player.team.1.ivHp", 0x48, [162, 231, 26, 22], 2);
            mapper.AssertAreEqual("player.team.1.ivAttack", 0x48, [162, 231, 26, 22], 29);
            mapper.AssertAreEqual("player.team.1.ivDefense", 0x48, [162, 231, 26, 22], 25);
            mapper.AssertAreEqual("player.team.1.ivSpeed", 0x48, [162, 231, 26, 22], 21);
            mapper.AssertAreEqual("player.team.1.ivSpecialAttack", 0x48, [162, 231, 26, 22], 1);
            mapper.AssertAreEqual("player.team.1.ivSpecialDefense", 0x48, [162, 231, 26, 22], 11);
            mapper.AssertAreEqual("player.team.1.isEgg", 0x48, [162, 231, 26, 22], false);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [162, 231, 26, 22], false);
            mapper.AssertAreEqual("player.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.1.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.1.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.1.otName", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.pokerusStatus", 0x24, [8], 8);
            mapper.AssertAreEqual("player.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.robbinsObedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("player.team.2.personalityValue", 3790259126);
            mapper.AssertAreEqual("player.team.2.checksum", 0x1C, [154, 136], 34970);
            mapper.AssertAreEqual("player.team.2.otID", 0x4, [62, 47, 113, 130], 2188455742);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [189, 189, 189, 189, 189, 189, 189, 189, 189, 189], "CCCCCCCCCC");
            mapper.AssertAreEqual("player.team.2.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0x20, [30, 1], "261");
            mapper.AssertAreEqual("player.team.2.speciesArray", 0x20, [30, 1], " pokedexNumber: 261, name: 'Poochyena' ");
            mapper.AssertAreEqual("player.team.2.level", 0x54, [3], 3);
            mapper.AssertAreEqual("player.team.2.expPoints", 0x24, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("player.team.2.nature", 1);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.hp", 0x56, [15, 0], 15);
            mapper.AssertAreEqual("player.team.2.maxHp", 0x58, [15, 0], 15);
            mapper.AssertAreEqual("player.team.2.attack", 0x5A, [9, 0], 9);
            mapper.AssertAreEqual("player.team.2.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.2.speed", 0x5E, [7, 0], 7);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0x62, [7, 0], 7);
            mapper.AssertAreEqual("player.team.2.ivEggAbilityBlock", 0x48, [52, 231, 102, 40], 677832500);
            mapper.AssertAreEqual("player.team.2.ivHp", 0x48, [52, 231, 102, 40], 20);
            mapper.AssertAreEqual("player.team.2.ivAttack", 0x48, [52, 231, 102, 40], 25);
            mapper.AssertAreEqual("player.team.2.ivDefense", 0x48, [52, 231, 102, 40], 25);
            mapper.AssertAreEqual("player.team.2.ivSpeed", 0x48, [52, 231, 102, 40], 13);
            mapper.AssertAreEqual("player.team.2.ivSpecialAttack", 0x48, [52, 231, 102, 40], 6);
            mapper.AssertAreEqual("player.team.2.ivSpecialDefense", 0x48, [52, 231, 102, 40], 20);
            mapper.AssertAreEqual("player.team.2.isEgg", 0x48, [52, 231, 102, 40], false);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [52, 231, 102, 40], false);
            mapper.AssertAreEqual("player.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0x34, [35], 35);
            mapper.AssertAreEqual("player.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.2.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.2.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.2.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.2.otName", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.pokerusStatus", 0x24, [27], 27);
            mapper.AssertAreEqual("player.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.robbinsObedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("player.team.3.personalityValue", 405712429);
            mapper.AssertAreEqual("player.team.3.checksum", 0x1C, [0, 234], 59904);
            mapper.AssertAreEqual("player.team.3.otID", 0x4, [62, 47, 113, 130], 2188455742);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [209, 207, 204, 199, 202, 198, 191, 255, 3, 0], "WURMPLE");
            mapper.AssertAreEqual("player.team.3.species", 0x20, [34, 1], "Wurmple");
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0x20, [34, 1], "265");
            mapper.AssertAreEqual("player.team.3.speciesArray", 0x20, [34, 1], " pokedexNumber: 265, name: 'Wurmple' ");
            mapper.AssertAreEqual("player.team.3.level", 0x54, [2], 2);
            mapper.AssertAreEqual("player.team.3.expPoints", 0x24, [8, 0, 0, 0], 8);
            mapper.AssertAreEqual("player.team.3.nature", 4);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [72], 72);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0x56, [14, 0], 14);
            mapper.AssertAreEqual("player.team.3.maxHp", 0x58, [14, 0], 14);
            mapper.AssertAreEqual("player.team.3.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("player.team.3.defense", 0x5C, [6, 0], 6);
            mapper.AssertAreEqual("player.team.3.speed", 0x5E, [5, 0], 5);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0x60, [6, 0], 6);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0x62, [5, 0], 5);
            mapper.AssertAreEqual("player.team.3.ivEggAbilityBlock", 0x48, [176, 175, 19, 151], 2534649776);
            mapper.AssertAreEqual("player.team.3.ivHp", 0x48, [176, 175, 19, 151], 16);
            mapper.AssertAreEqual("player.team.3.ivAttack", 0x48, [176, 175, 19, 151], 29);
            mapper.AssertAreEqual("player.team.3.ivDefense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("player.team.3.ivSpeed", 0x48, [176, 175, 19, 151], 7);
            mapper.AssertAreEqual("player.team.3.ivSpecialAttack", 0x48, [176, 175, 19, 151], 17);
            mapper.AssertAreEqual("player.team.3.ivSpecialDefense", 0x48, [176, 175, 19, 151], 11);
            mapper.AssertAreEqual("player.team.3.isEgg", 0x48, [176, 175, 19, 151], false);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [176, 175, 19, 151], true);
            mapper.AssertAreEqual("player.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.3.move2", 0x2E, [81, 0], "STRING SHOT");
            mapper.AssertAreEqual("player.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0x34, [31], 31);
            mapper.AssertAreEqual("player.team.3.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.3.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.3.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.3.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.3.otName", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("player.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.pokerusStatus", 0x24, [8], 8);
            mapper.AssertAreEqual("player.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.robbinsObedience", 0x2C, [33, 0, 81, 0], 5308449);
            mapper.AssertAreEqual("player.team.4.personalityValue", 0);
            mapper.AssertAreEqual("player.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nature", 0);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.personalityValue", 0);
            mapper.AssertAreEqual("player.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nature", 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0x2026D22, [0], false);
            mapper.AssertAreEqual("player.bag.quantityDecyptionKey", 0x2024B14, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.0.item", 0x2025F74, [14, 0], "ANTIDOTE");
            mapper.AssertAreEqual("player.bag.items.0.quantity", 0x2025F76, [91, 52], 13403);
            mapper.AssertAreEqual("player.bag.items.1.item", 0x2025F78, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.1.quantity", 0x2025F7A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.2.item", 0x2025F7C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.2.quantity", 0x2025F7E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.3.item", 0x2025F80, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.3.quantity", 0x2025F82, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.4.item", 0x2025F84, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.4.quantity", 0x2025F86, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.5.item", 0x2025F88, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.5.quantity", 0x2025F8A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.6.item", 0x2025F8C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.6.quantity", 0x2025F8E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.7.item", 0x2025F90, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.7.quantity", 0x2025F92, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.8.item", 0x2025F94, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.8.quantity", 0x2025F96, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.9.item", 0x2025F98, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.9.quantity", 0x2025F9A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.10.item", 0x2025F9C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.10.quantity", 0x2025F9E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.11.item", 0x2025FA0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.11.quantity", 0x2025FA2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.12.item", 0x2025FA4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.12.quantity", 0x2025FA6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.13.item", 0x2025FA8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.13.quantity", 0x2025FAA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.14.item", 0x2025FAC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.14.quantity", 0x2025FAE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.15.item", 0x2025FB0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.15.quantity", 0x2025FB2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.16.item", 0x2025FB4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.16.quantity", 0x2025FB6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.17.item", 0x2025FB8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.17.quantity", 0x2025FBA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.18.item", 0x2025FBC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.18.quantity", 0x2025FBE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.19.item", 0x2025FC0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.19.quantity", 0x2025FC2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.20.item", 0x2025FC4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.20.quantity", 0x2025FC6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.21.item", 0x2025FC8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.21.quantity", 0x2025FCA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.22.item", 0x2025FCC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.22.quantity", 0x2025FCE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.23.item", 0x2025FD0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.23.quantity", 0x2025FD2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.24.item", 0x2025FD4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.24.quantity", 0x2025FD6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.25.item", 0x2025FD8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.25.quantity", 0x2025FDA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.26.item", 0x2025FDC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.26.quantity", 0x2025FDE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.27.item", 0x2025FE0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.27.quantity", 0x2025FE2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.28.item", 0x2025FE4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.28.quantity", 0x2025FE6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.items.29.item", 0x2025FE8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.29.quantity", 0x2025FEA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.0.item", 0x2025FEC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.0.quantity", 0x2025FEE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.1.item", 0x2025FF0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.1.quantity", 0x2025FF2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.2.item", 0x2025FF4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.2.quantity", 0x2025FF6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.3.item", 0x2025FF8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.3.quantity", 0x2025FFA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.4.item", 0x2025FFC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.4.quantity", 0x2025FFE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.5.item", 0x2026000, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.5.quantity", 0x2026002, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.6.item", 0x2026004, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.6.quantity", 0x2026006, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.7.item", 0x2026008, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.7.quantity", 0x202600A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.8.item", 0x202600C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.8.quantity", 0x202600E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.9.item", 0x2026010, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.9.quantity", 0x2026012, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.10.item", 0x2026014, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.10.quantity", 0x2026016, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.11.item", 0x2026018, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.11.quantity", 0x202601A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.12.item", 0x202601C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.12.quantity", 0x202601E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.13.item", 0x2026020, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.13.quantity", 0x2026022, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.14.item", 0x2026024, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.14.quantity", 0x2026026, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.15.item", 0x2026028, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.15.quantity", 0x202602A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.16.item", 0x202602C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.16.quantity", 0x202602E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.17.item", 0x2026030, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.17.quantity", 0x2026032, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.18.item", 0x2026034, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.18.quantity", 0x2026036, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.19.item", 0x2026038, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.19.quantity", 0x202603A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.20.item", 0x202603C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.20.quantity", 0x202603E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.21.item", 0x2026040, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.21.quantity", 0x2026042, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.22.item", 0x2026044, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.22.quantity", 0x2026046, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.23.item", 0x2026048, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.23.quantity", 0x202604A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.24.item", 0x202604C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.24.quantity", 0x202604E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.25.item", 0x2026050, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.25.quantity", 0x2026052, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.26.item", 0x2026054, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.26.quantity", 0x2026056, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.27.item", 0x2026058, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.27.quantity", 0x202605A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.28.item", 0x202605C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.28.quantity", 0x202605E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.keyItems.29.item", 0x2026060, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.29.quantity", 0x2026062, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.0.item", 0x2026064, [4, 0], "POKE BALL");
            mapper.AssertAreEqual("player.bag.pokeBalls.0.quantity", 0x2026066, [84, 52], 13396);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.item", 0x2026068, [12, 0], "PREMIER BALL");
            mapper.AssertAreEqual("player.bag.pokeBalls.1.quantity", 0x202606A, [91, 52], 13403);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.item", 0x202606C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.quantity", 0x202606E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.item", 0x2026070, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.quantity", 0x2026072, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.item", 0x2026074, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.quantity", 0x2026076, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.item", 0x2026078, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.quantity", 0x202607A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.item", 0x202607C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.quantity", 0x202607E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.item", 0x2026080, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.quantity", 0x2026082, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.item", 0x2026084, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.quantity", 0x2026086, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.item", 0x2026088, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.quantity", 0x202608A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.item", 0x202608C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.quantity", 0x202608E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.item", 0x2026090, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.quantity", 0x2026092, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.item", 0x2026094, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.quantity", 0x2026096, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.13.item", 0x2026098, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.13.quantity", 0x202609A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.14.item", 0x202609C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.14.quantity", 0x202609E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.pokeBalls.15.item", 0x20260A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.15.quantity", 0x20260A2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.0.item", 0x20260A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.0.quantity", 0x20260A6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.1.item", 0x20260A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.1.quantity", 0x20260AA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.2.item", 0x20260AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.2.quantity", 0x20260AE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.3.item", 0x20260B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.3.quantity", 0x20260B2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.4.item", 0x20260B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.4.quantity", 0x20260B6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.5.item", 0x20260B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.5.quantity", 0x20260BA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.6.item", 0x20260BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.6.quantity", 0x20260BE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.7.item", 0x20260C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.7.quantity", 0x20260C2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.8.item", 0x20260C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.8.quantity", 0x20260C6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.9.item", 0x20260C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.9.quantity", 0x20260CA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.10.item", 0x20260CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.10.quantity", 0x20260CE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.11.item", 0x20260D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.11.quantity", 0x20260D2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.12.item", 0x20260D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.12.quantity", 0x20260D6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.13.item", 0x20260D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.13.quantity", 0x20260DA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.14.item", 0x20260DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.14.quantity", 0x20260DE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.15.item", 0x20260E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.15.quantity", 0x20260E2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.16.item", 0x20260E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.16.quantity", 0x20260E6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.17.item", 0x20260E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.17.quantity", 0x20260EA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.18.item", 0x20260EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.18.quantity", 0x20260EE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.19.item", 0x20260F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.19.quantity", 0x20260F2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.20.item", 0x20260F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.20.quantity", 0x20260F6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.21.item", 0x20260F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.21.quantity", 0x20260FA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.22.item", 0x20260FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.22.quantity", 0x20260FE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.23.item", 0x2026100, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.23.quantity", 0x2026102, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.24.item", 0x2026104, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.24.quantity", 0x2026106, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.25.item", 0x2026108, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.25.quantity", 0x202610A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.26.item", 0x202610C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.26.quantity", 0x202610E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.27.item", 0x2026110, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.27.quantity", 0x2026112, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.28.item", 0x2026114, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.28.quantity", 0x2026116, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.29.item", 0x2026118, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.29.quantity", 0x202611A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.30.item", 0x202611C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.30.quantity", 0x202611E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.31.item", 0x2026120, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.31.quantity", 0x2026122, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.32.item", 0x2026124, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.32.quantity", 0x2026126, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.33.item", 0x2026128, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.33.quantity", 0x202612A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.34.item", 0x202612C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.34.quantity", 0x202612E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.35.item", 0x2026130, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.35.quantity", 0x2026132, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.36.item", 0x2026134, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.36.quantity", 0x2026136, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.37.item", 0x2026138, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.37.quantity", 0x202613A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.38.item", 0x202613C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.38.quantity", 0x202613E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.39.item", 0x2026140, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.39.quantity", 0x2026142, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.40.item", 0x2026144, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.40.quantity", 0x2026146, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.41.item", 0x2026148, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.41.quantity", 0x202614A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.42.item", 0x202614C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.42.quantity", 0x202614E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.43.item", 0x2026150, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.43.quantity", 0x2026152, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.44.item", 0x2026154, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.44.quantity", 0x2026156, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.45.item", 0x2026158, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.45.quantity", 0x202615A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.46.item", 0x202615C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.46.quantity", 0x202615E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.47.item", 0x2026160, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.47.quantity", 0x2026162, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.48.item", 0x2026164, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.48.quantity", 0x2026166, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.49.item", 0x2026168, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.49.quantity", 0x202616A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.50.item", 0x202616C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.50.quantity", 0x202616E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.51.item", 0x2026170, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.51.quantity", 0x2026172, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.52.item", 0x2026174, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.52.quantity", 0x2026176, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.53.item", 0x2026178, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.53.quantity", 0x202617A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.54.item", 0x202617C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.54.quantity", 0x202617E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.55.item", 0x2026180, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.55.quantity", 0x2026182, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.56.item", 0x2026184, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.56.quantity", 0x2026186, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.57.item", 0x2026188, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.57.quantity", 0x202618A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.58.item", 0x202618C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.58.quantity", 0x202618E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.59.item", 0x2026190, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.59.quantity", 0x2026192, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.60.item", 0x2026194, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.60.quantity", 0x2026196, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.61.item", 0x2026198, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.61.quantity", 0x202619A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.62.item", 0x202619C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.62.quantity", 0x202619E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.tmhm.63.item", 0x20261A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.63.quantity", 0x20261A2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.0.item", 0x20261A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.0.quantity", 0x20261A6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.1.item", 0x20261A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.1.quantity", 0x20261AA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.2.item", 0x20261AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.2.quantity", 0x20261AE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.3.item", 0x20261B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.3.quantity", 0x20261B2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.4.item", 0x20261B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.4.quantity", 0x20261B6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.5.item", 0x20261B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.5.quantity", 0x20261BA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.6.item", 0x20261BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.6.quantity", 0x20261BE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.7.item", 0x20261C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.7.quantity", 0x20261C2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.8.item", 0x20261C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.8.quantity", 0x20261C6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.9.item", 0x20261C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.9.quantity", 0x20261CA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.10.item", 0x20261CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.10.quantity", 0x20261CE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.11.item", 0x20261D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.11.quantity", 0x20261D2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.12.item", 0x20261D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.12.quantity", 0x20261D6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.13.item", 0x20261D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.13.quantity", 0x20261DA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.14.item", 0x20261DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.14.quantity", 0x20261DE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.15.item", 0x20261E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.15.quantity", 0x20261E2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.16.item", 0x20261E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.16.quantity", 0x20261E6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.17.item", 0x20261E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.17.quantity", 0x20261EA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.18.item", 0x20261EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.18.quantity", 0x20261EE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.19.item", 0x20261F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.19.quantity", 0x20261F2, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.20.item", 0x20261F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.20.quantity", 0x20261F6, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.21.item", 0x20261F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.21.quantity", 0x20261FA, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.22.item", 0x20261FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.22.quantity", 0x20261FE, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.23.item", 0x2026200, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.23.quantity", 0x2026202, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.24.item", 0x2026204, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.24.quantity", 0x2026206, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.25.item", 0x2026208, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.25.quantity", 0x202620A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.26.item", 0x202620C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.26.quantity", 0x202620E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.27.item", 0x2026210, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.27.quantity", 0x2026212, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.28.item", 0x2026214, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.28.quantity", 0x2026216, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.29.item", 0x2026218, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.29.quantity", 0x202621A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.30.item", 0x202621C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.30.quantity", 0x202621E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.31.item", 0x2026220, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.31.quantity", 0x2026222, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.32.item", 0x2026224, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.32.quantity", 0x2026226, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.33.item", 0x2026228, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.33.quantity", 0x202622A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.34.item", 0x202622C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.34.quantity", 0x202622E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.35.item", 0x2026230, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.35.quantity", 0x2026232, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.36.item", 0x2026234, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.36.quantity", 0x2026236, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.37.item", 0x2026238, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.37.quantity", 0x202623A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.38.item", 0x202623C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.38.quantity", 0x202623E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.39.item", 0x2026240, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.39.quantity", 0x2026242, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.40.item", 0x2026244, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.40.quantity", 0x2026246, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.41.item", 0x2026248, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.41.quantity", 0x202624A, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.42.item", 0x202624C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.42.quantity", 0x202624E, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.43.item", 0x2026250, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.43.quantity", 0x2026252, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.44.item", 0x2026254, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.44.quantity", 0x2026256, [90, 52], 13402);
            mapper.AssertAreEqual("player.bag.berries.45.item", 0x2026258, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.45.quantity", 0x202625A, [90, 52], 13402);
            mapper.AssertAreEqual("player.pcItems.0.item", 0x2025EAC, [13, 0], "POTION");
            mapper.AssertAreEqual("player.pcItems.0.quantity", 0x2025EAE, [1, 0], 1);
            mapper.AssertAreEqual("player.pcItems.1.item", 0x2025EB0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.1.quantity", 0x2025EB2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.2.item", 0x2025EB4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.2.quantity", 0x2025EB6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.3.item", 0x2025EB8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.3.quantity", 0x2025EBA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.4.item", 0x2025EBC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.4.quantity", 0x2025EBE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.5.item", 0x2025EC0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.5.quantity", 0x2025EC2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.6.item", 0x2025EC4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.6.quantity", 0x2025EC6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.7.item", 0x2025EC8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.7.quantity", 0x2025ECA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.8.item", 0x2025ECC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.8.quantity", 0x2025ECE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.9.item", 0x2025ED0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.9.quantity", 0x2025ED2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.10.item", 0x2025ED4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.10.quantity", 0x2025ED6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.11.item", 0x2025ED8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.11.quantity", 0x2025EDA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.12.item", 0x2025EDC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.12.quantity", 0x2025EDE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.13.item", 0x2025EE0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.13.quantity", 0x2025EE2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.14.item", 0x2025EE4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.14.quantity", 0x2025EE6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.15.item", 0x2025EE8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.15.quantity", 0x2025EEA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.16.item", 0x2025EEC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.16.quantity", 0x2025EEE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.17.item", 0x2025EF0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.17.quantity", 0x2025EF2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.18.item", 0x2025EF4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.18.quantity", 0x2025EF6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.19.item", 0x2025EF8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.19.quantity", 0x2025EFA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.20.item", 0x2025EFC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.20.quantity", 0x2025EFE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.21.item", 0x2025F00, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.21.quantity", 0x2025F02, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.22.item", 0x2025F04, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.22.quantity", 0x2025F06, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.23.item", 0x2025F08, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.23.quantity", 0x2025F0A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.24.item", 0x2025F0C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.24.quantity", 0x2025F0E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.25.item", 0x2025F10, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.25.quantity", 0x2025F12, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.26.item", 0x2025F14, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.26.quantity", 0x2025F16, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.27.item", 0x2025F18, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.27.quantity", 0x2025F1A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.28.item", 0x2025F1C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.28.quantity", 0x2025F1E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.29.item", 0x2025F20, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.29.quantity", 0x2025F22, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.30.item", 0x2025F24, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.30.quantity", 0x2025F26, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.31.item", 0x2025F28, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.31.quantity", 0x2025F2A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.32.item", 0x2025F2C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.32.quantity", 0x2025F2E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.33.item", 0x2025F30, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.33.quantity", 0x2025F32, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.34.item", 0x2025F34, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.34.quantity", 0x2025F36, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.35.item", 0x2025F38, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.35.quantity", 0x2025F3A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.36.item", 0x2025F3C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.36.quantity", 0x2025F3E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.37.item", 0x2025F40, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.37.quantity", 0x2025F42, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.38.item", 0x2025F44, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.38.quantity", 0x2025F46, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.39.item", 0x2025F48, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.39.quantity", 0x2025F4A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.40.item", 0x2025F4C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.40.quantity", 0x2025F4E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.41.item", 0x2025F50, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.41.quantity", 0x2025F52, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.42.item", 0x2025F54, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.42.quantity", 0x2025F56, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.43.item", 0x2025F58, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.43.quantity", 0x2025F5A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.44.item", 0x2025F5C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.44.quantity", 0x2025F5E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.45.item", 0x2025F60, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.45.quantity", 0x2025F62, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.46.item", 0x2025F64, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.46.quantity", 0x2025F66, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.47.item", 0x2025F68, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.47.quantity", 0x2025F6A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.48.item", 0x2025F6C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.48.quantity", 0x2025F6E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.49.item", 0x2025F70, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.49.quantity", 0x2025F72, [0, 0], 0);
            mapper.AssertAreEqual("overworld.mapName", 0x20322E4, [0, 10], "OLDALE_TOWN");
            mapper.AssertAreEqual("overworld.walkRunState", 0x2037078, [255], null);
            mapper.AssertAreEqual("overworld.safariSteps", 0x2039996, [0], 0);
            mapper.AssertAreEqual("overworld.disabledEncounters", 0x2038C00, [0], 0);
            mapper.AssertAreEqual("battle.outcome", 0x202433A, [1], "WON");
            mapper.AssertAreEqual("battle.type.double", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.is_battle", 0x2022FEC, [4, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.trainer", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.first_battle", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link_in_battle", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.multi", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.safari", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.battle_tower", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.old_man_tutorial", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.roamer", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.eReader_trainer", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.kyogre_groudon", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost_unveiled", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.regi", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.pokedude", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.wild_scripted", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.legenadry_frlg", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.trainer_tower", 0x2022FEC, [4, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.opponentA", 0x2038BCA, [23, 2], "RIVAL_MAY_ROUTE_103_TORCHIC");
            mapper.AssertAreEqual("battle.trainer.opponentAId", 0x2038BCA, [23, 2], 535);
            mapper.AssertAreEqual("battle.trainer.opponentB", 0x2038BCC, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.opponentBId", 0x2038BCC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.partnerId", 0x2038BCE, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0x20244EA, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.personalityValue", 17401455);
            mapper.AssertAreEqual("battle.trainer.team.0.checksum", 0x1C, [146, 99], 25490);
            mapper.AssertAreEqual("battle.trainer.team.0.otID", 0x4, [62, 47, 113, 130], 2188455742);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0x8, [202, 201, 201, 189, 194, 211, 191, 200, 187, 255], "POOCHYENA");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0x20, [30, 1], "Poochyena");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0x20, [30, 1], "261");
            mapper.AssertAreEqual("battle.trainer.team.0.speciesArray", 0x20, [30, 1], " pokedexNumber: 261, name: 'Poochyena' ");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0x54, [3], 3);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0x24, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.trainer.team.0.nature", 5);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0x58, [15, 0], 15);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0x5A, [7, 0], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0x5C, [7, 0], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0x5E, [7, 0], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0x60, [7, 0], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0x62, [7, 0], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.ivEggAbilityBlock", 0x48, [115, 90, 33, 143], 2401327731);
            mapper.AssertAreEqual("battle.trainer.team.0.ivHp", 0x48, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.trainer.team.0.ivAttack", 0x48, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.trainer.team.0.ivDefense", 0x48, [115, 90, 33, 143], 22);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpeed", 0x48, [115, 90, 33, 143], 2);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialAttack", 0x48, [115, 90, 33, 143], 18);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialDefense", 0x48, [115, 90, 33, 143], 7);
            mapper.AssertAreEqual("battle.trainer.team.0.isEgg", 0x48, [115, 90, 33, 143], false);
            mapper.AssertAreEqual("battle.trainer.team.0.ability", 0x48, [115, 90, 33, 143], true);
            mapper.AssertAreEqual("battle.trainer.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0x34, [33], 33);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.trainer.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("battle.trainer.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.otName", 0x14, [187, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.trainer.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerusStatus", 0x24, [27], 27);
            mapper.AssertAreEqual("battle.trainer.team.0.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.robbinsObedience", 0x2C, [33, 0, 0, 0], 33);
            mapper.AssertAreEqual("battle.trainer.team.1.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.personalityValue", 0);
            mapper.AssertAreEqual("battle.trainer.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nature", 0);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0x202406E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0x20240B4, [189, 194, 195, 189, 197, 191, 200, 163, 255, 0, 0], "CHICKEN2");
            mapper.AssertAreEqual("battle.yourPokemon.speciesArray", 0x2024084, [24, 1], " pokedexNumber: 255, name: 'Torchic' ");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0x20240AE, [8], 8);
            mapper.AssertAreEqual("battle.yourPokemon.expPoints", 0x20240C8, [57, 1, 0, 0], 313);
            mapper.AssertAreEqual("battle.yourPokemon.friendship", 0x20240AF, [85], 85);
            mapper.AssertAreEqual("battle.yourPokemon.personalityValue", 0x20240CC, [16, 147, 69, 106], 1782944528);
            mapper.AssertAreEqual("battle.yourPokemon.ability", 0x20240A4, [66], "BLAZE");
            mapper.AssertAreEqual("battle.yourPokemon.heldItem", 0x20240B2, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0x20240B0, [25, 0], 25);
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0x20240AC, [13, 0], 13);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0x2024086, [17, 0], 17);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0x2024088, [12, 0], 12);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0x202408A, [13, 0], 13);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0x202408C, [14, 0], 14);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0x202408E, [15, 0], 15);
            mapper.AssertAreEqual("battle.yourPokemon.ivEggAbilityBlock", 0x2024098, [100, 198, 38, 50], 841401956);
            mapper.AssertAreEqual("battle.yourPokemon.ivHp", 0x2024098, [100, 198, 38, 50], 4);
            mapper.AssertAreEqual("battle.yourPokemon.ivAttack", 0x2024098, [100, 198, 38, 50], 19);
            mapper.AssertAreEqual("battle.yourPokemon.ivDefense", 0x2024098, [100, 198, 38, 50], 17);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpeed", 0x2024098, [100, 198, 38, 50], 13);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialAttack", 0x2024098, [100, 198, 38, 50], 2);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialDefense", 0x2024098, [100, 198, 38, 50], 25);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0x2024090, [10, 0], "SCRATCH");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0x2024092, [45, 0], "GROWL");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0x2024094, [116, 0], "FOCUS ENERGY");
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0x2024096, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0x20240A8, [32], 32);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0x20240A9, [40], 40);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0x20240AA, [30], 30);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0x20240AB, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0x202409D, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0x202409E, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0x202409F, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0x20240A0, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0x20240A1, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0x20240A2, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0x20240A3, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.focusEnergy", 0x20240D6, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0x20240A5, [10], "Fire");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0x20240A6, [10], "Fire");
            mapper.AssertAreEqual("battle.yourPokemon.status1", 0x20240D0, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.status2", 0x20240D0, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.otName", 0x20240C0, [187, 255, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.yourSecondPokemon.partyPos", 0x2024072, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.nickname", 0x2024164, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.yourSecondPokemon.speciesArray", 0x2024134, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.level", 0x202415E, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.expPoints", 0x2024178, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.friendship", 0x202415F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.personalityValue", 0x202417C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ability", 0x2024154, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.heldItem", 0x2024162, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.maxHp", 0x2024160, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.hp", 0x202415C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.attack", 0x2024136, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.defense", 0x2024138, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speed", 0x202413A, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialAttack", 0x202413C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialDefense", 0x202413E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivEggAbilityBlock", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivHp", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivAttack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivDefense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpeed", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialAttack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialDefense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1", 0x2024140, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2", 0x2024142, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3", 0x2024144, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4", 0x2024146, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1pp", 0x2024158, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2pp", 0x2024159, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3pp", 0x202415A, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4pp", 0x202415B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAttack", 0x202414D, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageDefense", 0x202414E, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpeed", 0x202414F, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialAttack", 0x2024150, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialDefense", 0x2024151, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAccuracy", 0x2024152, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageEvasion", 0x2024153, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.focusEnergy", 0x2024186, [0], false);
            mapper.AssertAreEqual("battle.yourSecondPokemon.type1", 0x2024155, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.type2", 0x2024156, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.status1", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.status2", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.otName", 0x2024170, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0x2024070, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.nickname", 0x202410C, [202, 201, 201, 189, 194, 211, 191, 200, 187, 255, 0], "POOCHYENA");
            mapper.AssertAreEqual("battle.enemyPokemon.speciesArray", 0x20240DC, [30, 1], " pokedexNumber: 261, name: 'Poochyena' ");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0x2024106, [3], 3);
            mapper.AssertAreEqual("battle.enemyPokemon.expPoints", 0x2024120, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.enemyPokemon.friendship", 0x2024107, [70], 70);
            mapper.AssertAreEqual("battle.enemyPokemon.personalityValue", 0x2024124, [111, 134, 9, 1], 17401455);
            mapper.AssertAreEqual("battle.enemyPokemon.ability", 0x20240FC, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0x202410A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0x2024108, [15, 0], 15);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0x2024104, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0x20240DE, [7, 0], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0x20240E0, [7, 0], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0x20240E2, [7, 0], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0x20240E4, [7, 0], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0x20240E6, [7, 0], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.ivEggAbilityBlock", 0x20240F0, [115, 90, 33, 143], 2401327731);
            mapper.AssertAreEqual("battle.enemyPokemon.ivHp", 0x20240F0, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.enemyPokemon.ivAttack", 0x20240F0, [115, 90, 33, 143], 19);
            mapper.AssertAreEqual("battle.enemyPokemon.ivDefense", 0x20240F0, [115, 90, 33, 143], 22);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpeed", 0x20240F0, [115, 90, 33, 143], 2);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialAttack", 0x20240F0, [115, 90, 33, 143], 18);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialDefense", 0x20240F0, [115, 90, 33, 143], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0x20240E8, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0x20240EA, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0x20240EC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0x20240EE, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0x2024100, [33], 33);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0x2024101, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0x2024102, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0x2024103, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0x20240F5, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0x20240F6, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0x20240F7, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0x20240F8, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0x20240F9, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0x20240FA, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0x20240FB, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.focusEnergy", 0x202412E, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0x20240FD, [17], "Dark");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0x20240FE, [17], "Dark");
            mapper.AssertAreEqual("battle.enemyPokemon.status1", 0x2024128, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.status2", 0x2024128, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.otName", 0x2024118, [187, 255, 255, 255, 255, 255, 255, 255], "A");
            mapper.AssertAreEqual("battle.enemySecondPokemon.partyPos", 0x2024074, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.nickname", 0x20241BC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.enemySecondPokemon.speciesArray", 0x202418C, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.level", 0x20241B6, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.expPoints", 0x20241D0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.friendship", 0x20241B7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.personalityValue", 0x20241D4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ability", 0x20241AC, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.heldItem", 0x20241BA, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.maxHp", 0x20241B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.hp", 0x20241B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.attack", 0x202418E, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.defense", 0x2024190, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speed", 0x2024192, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialAttack", 0x2024194, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialDefense", 0x2024196, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivEggAbilityBlock", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivHp", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivAttack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivDefense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpeed", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialAttack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialDefense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1", 0x2024198, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2", 0x202419A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3", 0x202419C, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4", 0x202419E, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1pp", 0x20241B0, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2pp", 0x20241B1, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3pp", 0x20241B2, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4pp", 0x20241B3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAttack", 0x20241A5, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageDefense", 0x20241A6, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpeed", 0x20241A7, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialAttack", 0x20241A8, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialDefense", 0x20241A9, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAccuracy", 0x20241AA, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageEvasion", 0x20241AB, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.focusEnergy", 0x20241DE, [0], false);
            mapper.AssertAreEqual("battle.enemySecondPokemon.type1", 0x20241AD, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.type2", 0x20241AE, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.status1", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.status2", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.otName", 0x20241C8, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusReflect", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguardCount", 0x202429A, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0x2024296, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflectCount", 0x2024294, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0x20242A5, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0x20242A1, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0x202429F, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x20243CC, [0], null);
            mapper.AssertAreEqual("battle.field.weatherCount", 0x20243F8, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleWeather", 0x20243CC, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleWeatherTurnCounter", 0x20243F8, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleOutcome", 0x202433A, [1], "WON");
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTiles", 0x202305C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTilesBuffer", 0x2023060, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleDialogue", 0x2023064, [25], null);
            mapper.AssertAreEqual("events.shoalCaveTidePatch", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.rayquazaAwakeOW", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.gameclockSet", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.savedBirch", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.afterKyogre", 0x2026C8E, [199], false);
            mapper.AssertAreEqual("events.pokeballContestRoomOW", 0x2026C8E, [199], true);
            mapper.AssertAreEqual("events.labAssistant", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.mauvilleRewardReceived", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.scottBattleFrontier", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.safariZoneEntrance", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.wailmerPail", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.pokeblockCase", 0x2026C8F, [0], false);
            mapper.AssertAreEqual("events.secretPowerTM", 0x2026C90, [0], false);
            mapper.AssertAreEqual("events.tvPersonMauville", 0x2026C90, [0], false);
            mapper.AssertAreEqual("events.obtainedFlash", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.obtainedFly", 0x2026C91, [0], false);
            mapper.AssertAreEqual("events.aquaHideoutCleared", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.obtainedMeteorite", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.obtainedHiddenPower", 0x2026C92, [16], false);
            mapper.AssertAreEqual("events.obtainedBrickBreak", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.obtainedSurf", 0x2026C93, [0], false);
            mapper.AssertAreEqual("events.tide", 0x2026D97, [0], false);
            mapper.AssertAreEqual("events.menu.pokemon", 0x2026D90, [3], true);
            mapper.AssertAreEqual("events.menu.pokedex", 0x2026D90, [3], true);
            mapper.AssertAreEqual("events.menu.pokenav", 0x2026D90, [3], false);
            mapper.AssertAreEqual("screen.menu.itemsMenu", 0x203CE60, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.itemsOffset", 0x203CE6A, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.ballsMenu", 0x203CE62, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.ballsOffset", 0x203CE6C, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.tmhmMenu", 0x203CE64, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.tmhmOffset", 0x203CE6E, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.berriesMenu", 0x203CE66, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.berriesOffset", 0x203CE70, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.keyItemsMenu", 0x203CE68, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.keyItemsOffset", 0x203CE72, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.partyMenu", 0x203CED1, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleAction.playerL", 0x20244AC, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleAction.enemyL", 0x20244AD, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleAction.playerR", 0x20244AE, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleAction.enemyR", 0x20244AF, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleMove.playerL", 0x20244B0, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.enemyL", 0x20244B1, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.playerR", 0x20244B2, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.enemyR", 0x20244B3, [0], 0);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.playerL", 0x20241E4, [6], 6);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.enemyL", 0x20241E5, [4], 4);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.playerR", 0x20241E6, [0], 0);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.enemyR", 0x20241E7, [0], 0);
            mapper.AssertAreEqual("trainers.eliteFour.sidney", 0x2026D24, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.phoebe", 0x2026D24, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.glacia", 0x2026D24, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.drake", 0x2026D24, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.wallace", 0x2026D94, [0], false);
            mapper.AssertAreEqual("options.textSpeed", 0x2024A7C, [2], 2);
            mapper.AssertAreEqual("options.battleAnim", 0x2024A7D, [6], true);
            mapper.AssertAreEqual("options.battleStyle", 0x2024A7D, [6], true);
            mapper.AssertAreEqual("options.sound", 0x2024A7D, [6], false);
            mapper.AssertAreEqual("options.buttonMode", 0x2024A7B, [0], 0);
            mapper.AssertAreEqual("audio.overworldmusicID", 0x2037328, [107, 1], 363);
            mapper.AssertAreEqual("audio.musicID", 0x3007420, [68, 185, 144, 8], 143702340);
            mapper.AssertAreEqual("audio.sound_effect_1", 0x30075F0, [196, 205, 143, 8], 143642052);
            mapper.AssertAreEqual("audio.sound_effect_1_played", 0x30075F4, [0, 0, 0, 128], true);
            mapper.AssertAreEqual("audio.sound_effect_2", 0x3007630, [28, 193, 143, 8], 143638812);
            mapper.AssertAreEqual("audio.sound_effect_2_played", 0x3007634, [0, 0, 0, 128], true);
            mapper.AssertAreEqual("gameTime.hours", 0x2024A76, [0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0x2024A78, [15], 15);
            mapper.AssertAreEqual("gameTime.seconds", 0x2024A79, [39], 39);
            mapper.AssertAreEqual("gameTime.frames", 0x2024A7A, [48], 48);
            mapper.AssertAreEqual("pointers.dma1", 0x3005D8C, [20, 90, 2, 2], 33708564);
            mapper.AssertAreEqual("pointers.dma2", 0x3005D90, [104, 74, 2, 2], 33704552);
            mapper.AssertAreEqual("pointers.dma3", 0x3005D94, [28, 152, 2, 2], 33724444);
            mapper.AssertAreEqual("pointers.callback1", 0x30022C0, [5, 94, 8, 8], "Overworld");
            mapper.AssertAreEqual("pointers.callback2", 0x30022C4, [93, 94, 8, 8], "Overworld");
            mapper.AssertAreEqual("misc.rngValue1", 0x3005D80, [55, 155, 139, 117], 1972083511);
            mapper.AssertAreEqual("misc.palette5", 0x2037724, [247, 66, 238, 122], null);
            mapper.AssertAreEqual("meta.generation", "3");
            mapper.AssertAreEqual("meta.gameName", "Emerald");
            mapper.AssertAreEqual("meta.gameType", "Third Version");
            mapper.AssertAreEqual("meta.mapperType", "Deprecated");
            mapper.AssertAreEqual("meta.state", "Overworld");
        }

    }
}

