using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonGoldSilver : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_GBC_PokemonGold(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0xD1A3, [128, 128, 128, 128, 128, 128, 128, 80, 0, 0, 0], "AAAAAAA");
            mapper.AssertAreEqual("player.gender", 0xD198, [0], "Male");
            mapper.AssertAreEqual("player.player_id", 0xD1A1, [185, 218], 47578);
            mapper.AssertAreEqual("player.hall_of_fame_count", 0xD683, [1], 1);
            mapper.AssertAreEqual("player.team_count", 0xDA22, [5], 5);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", 0xCB0C, [217], "Ursaring");
            mapper.AssertAreEqual("player.active_pokemon.dex_number", 0xCB0C, [217], 217);
            mapper.AssertAreEqual("player.active_pokemon.nickname", 0xDB8C, [148, 145, 146, 128, 145, 136, 141, 134, 80, 80, 80], "URSARING");
            mapper.AssertAreEqual("player.active_pokemon.level", 0xCB19, [76], 76);
            mapper.AssertAreEqual("player.active_pokemon.exp", 0xDA32, [6, 179, 158], 439198);
            mapper.AssertAreEqual("player.active_pokemon.type_1", 0xCB2A, [0], "Normal");
            mapper.AssertAreEqual("player.active_pokemon.type_2", 0xCB2B, [0], "Normal");
            mapper.AssertAreEqual("player.active_pokemon.ot_id", 0xDA30, [185, 218], 47578);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", 0xDA4A, [0], null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", 0xCB0E, [216], "Return");
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", 0xCB14, [20], 20);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", 0xCB14, [20], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", 0xCB0F, [214], "Sleep Talk");
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", 0xCB15, [10], 10);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", 0xCB15, [10], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", 0xCB10, [182], "Protect");
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", 0xCB16, [9], 9);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", 0xCB16, [9], 0);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", 0xCB11, [156], "Rest");
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", 0xCB17, [9], 9);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", 0xCB17, [9], 0);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", 0xCB1C, [1, 1], 257);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", 0xCB1E, [1, 1], 257);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", 0xCB20, [1, 16], 272);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", 0xCB22, [0, 168], 168);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", 0xCB24, [0, 160], 160);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_attack", 0xCB26, [0, 191], 191);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_defense", 0xCB28, [0, 170], 170);
            //mapper.AssertAreEqual("player.active_pokemon.ivs.hp", 3);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", 0xDA3F, [32], 2);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", 0xDA3F, [32], 0);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", 0xDA40, [219], 13);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special", 0xDA40, [219], 11);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", 0xDA35, [95, 87], 24407);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", 0xDA37, [150, 200], 38600);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", 0xDA39, [105, 66], 26946);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", 0xDA3B, [131, 93], 33629);
            mapper.AssertAreEqual("player.active_pokemon.evs.special", 0xDA3D, [134, 78], 34382);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", 0xCBAA, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", 0xCBAB, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", 0xCBAC, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_attack", 0xCBAD, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_defense", 0xCBAE, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", 0xCBAF, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", 0xCBB0, [7], 0);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.confused", 0xC66A, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.toxic", 0xC66C, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.leech_seed", 0xC66B, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.curse", 0xC668, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.in_love", 0xC668, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.volatile_status_conditions.nightmare", 0xC668, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.protect", 0xC668, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.identified", 0xC668, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.perish", 0xC668, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.endure", 0xC668, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.rollout", 0xC668, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.curled", 0xC669, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.bide", 0xC66A, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.rampage", 0xC66A, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.in_loop", 0xC66A, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.flinched", 0xC66A, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.charged", 0xC66A, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.underground", 0xC66A, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.flying", 0xC66A, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.bypass_accuracy", 0xC66B, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.mist", 0xC66B, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.focus_energy", 0xC66B, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.effects.substitute", 0xC66B, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.recharge", 0xC66B, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.rage", 0xC66B, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.transformed", 0xC66C, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.encored", 0xC66C, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.lock_on", 0xC66C, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.destiny_bond", 0xC66C, [122], true);
            mapper.AssertAreEqual("player.active_pokemon.effects.cant_run", 0xC66C, [122], false);
            mapper.AssertAreEqual("player.active_pokemon.counters.rollout", 0xCB50, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.confuse", 0xCB51, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.toxic", 0xCB52, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.disable", 0xCB53, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.encore", 0xCB54, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.perish", 0xCB55, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.fury_cutter", 0xCB56, [0], 0);
            mapper.AssertAreEqual("player.active_pokemon.counters.protect", 0xCB57, [0], 0);
            mapper.AssertAreEqual("player.team.0.species", 0xDA2A, [217], "Ursaring");
            mapper.AssertAreEqual("player.team.0.dex_number", 0xDA2A, [217], 217);
            mapper.AssertAreEqual("player.team.0.nickname", 0xDB8C, [148, 145, 146, 128, 145, 136, 141, 134, 80, 80, 80], "URSARING");
            mapper.AssertAreEqual("player.team.0.level", 0xDA49, [76], 76);
            mapper.AssertAreEqual("player.team.0.exp", 0xDA32, [6, 179, 158], 439198);
            mapper.AssertAreEqual("player.team.0.ot_id", 0xDA30, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.0.held_item", 0xDA2B, [146], "Leftovers");
            mapper.AssertAreEqual("player.team.0.friendship", 0xDA45, [255], 255);
            mapper.AssertAreEqual("player.team.0.shiny", false);
            mapper.AssertAreEqual("player.team.0.pokerus", 0xDA46, [0], 0);
            mapper.AssertAreEqual("player.team.0.status_condition", 0xDA4A, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0xDA2C, [216], "Return");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0xDA41, [20], 20);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0xDA41, [20], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0xDA2D, [214], "Sleep Talk");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0xDA42, [10], 10);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0xDA42, [10], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0xDA2E, [182], "Protect");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0xDA43, [9], 9);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0xDA43, [9], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0xDA2F, [156], "Rest");
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0xDA44, [9], 9);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0xDA44, [9], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0xDA4C, [1, 1], 257);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0xDA4E, [1, 1], 257);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0xDA50, [0, 242], 242);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0xDA52, [0, 150], 150);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0xDA54, [0, 143], 143);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0xDA56, [0, 170], 170);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0xDA58, [0, 170], 170);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 3);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0xDA3F, [32], 2);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0xDA3F, [32], 0);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0xDA40, [219], 13);
            mapper.AssertAreEqual("player.team.0.ivs.special", 0xDA40, [219], 11);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0xDA35, [95, 87], 24407);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0xDA37, [150, 200], 38600);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0xDA39, [105, 66], 26946);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0xDA3B, [131, 93], 33629);
            mapper.AssertAreEqual("player.team.0.evs.special", 0xDA3D, [134, 78], 34382);
            mapper.AssertAreEqual("player.team.0.hidden_power.type", "Fire");
            mapper.AssertAreEqual("player.team.0.hidden_power.power", 40);
            mapper.AssertAreEqual("player.team.1.species", 0xDA5A, [46], "Paras");
            mapper.AssertAreEqual("player.team.1.dex_number", 0xDA5A, [46], 46);
            mapper.AssertAreEqual("player.team.1.nickname", 0xDB97, [143, 128, 145, 128, 146, 80, 80, 80, 80, 80, 80], "PARAS");
            mapper.AssertAreEqual("player.team.1.level", 0xDA79, [6], 6);
            mapper.AssertAreEqual("player.team.1.exp", 0xDA62, [0, 0, 216], 216);
            mapper.AssertAreEqual("player.team.1.ot_id", 0xDA60, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.1.held_item", 0xDA5B, [86], "Tinymushroom");
            mapper.AssertAreEqual("player.team.1.friendship", 0xDA75, [141], 141);
            mapper.AssertAreEqual("player.team.1.shiny", false);
            mapper.AssertAreEqual("player.team.1.pokerus", 0xDA76, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0xDA7A, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0xDA5C, [10], "Scratch");
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0xDA71, [35], 35);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0xDA71, [35], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0xDA5D, [15], "Cut");
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0xDA72, [30], 30);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0xDA72, [30], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0xDA5E, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0xDA73, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0xDA73, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0xDA5F, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0xDA74, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0xDA74, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0xDA7C, [0, 20], 20);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0xDA7E, [0, 20], 20);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0xDA80, [0, 14], 14);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0xDA82, [0, 13], 13);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0xDA84, [0, 9], 9);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0xDA86, [0, 11], 11);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0xDA88, [0, 13], 13);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 6);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0xDA6F, [173], 10);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0xDA6F, [173], 13);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0xDA70, [156], 9);
            mapper.AssertAreEqual("player.team.1.ivs.special", 0xDA70, [156], 12);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0xDA65, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0xDA67, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0xDA69, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0xDA6B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special", 0xDA6D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.hidden_power.type", "Water");
            mapper.AssertAreEqual("player.team.1.hidden_power.power", 68);
            mapper.AssertAreEqual("player.team.2.species", 0xDA8A, [21], "Spearow");
            mapper.AssertAreEqual("player.team.2.dex_number", 0xDA8A, [21], 21);
            mapper.AssertAreEqual("player.team.2.nickname", 0xDBA2, [138, 132, 141, 152, 128, 80, 145, 128, 141, 131, 152], "KENYA");
            mapper.AssertAreEqual("player.team.2.level", 0xDAA9, [10], 10);
            mapper.AssertAreEqual("player.team.2.exp", 0xDA92, [0, 3, 232], 1000);
            mapper.AssertAreEqual("player.team.2.ot_id", 0xDA90, [3, 233], 1001);
            mapper.AssertAreEqual("player.team.2.held_item", 0xDA8B, [158], "Flower Mail");
            mapper.AssertAreEqual("player.team.2.friendship", 0xDAA5, [140], 140);
            mapper.AssertAreEqual("player.team.2.shiny", false);
            mapper.AssertAreEqual("player.team.2.pokerus", 0xDAA6, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0xDAAA, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0xDA8C, [64], "Peck");
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0xDAA1, [35], 35);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0xDAA1, [35], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0xDA8D, [45], "Growl");
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0xDAA2, [40], 40);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0xDAA2, [40], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0xDA8E, [43], "Leer");
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0xDAA3, [30], 30);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0xDAA3, [30], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0xDA8F, [19], "Fly");
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0xDAA4, [15], 15);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0xDAA4, [15], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0xDAAC, [0, 30], 30);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0xDAAE, [0, 30], 30);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0xDAB0, [0, 20], 20);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0xDAB2, [0, 11], 11);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0xDAB4, [0, 22], 22);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0xDAB6, [0, 11], 11);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0xDAB8, [0, 11], 11);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 10);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0xDA9F, [242], 15);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0xDA9F, [242], 2);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0xDAA0, [242], 15);
            mapper.AssertAreEqual("player.team.2.ivs.special", 0xDAA0, [242], 2);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0xDA95, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0xDA97, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0xDA99, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0xDA9B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special", 0xDA9D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.hidden_power.type", "Dragon");
            mapper.AssertAreEqual("player.team.2.hidden_power.power", 57);
            mapper.AssertAreEqual("player.team.3.species", 0xDABA, [98], "Krabby");
            mapper.AssertAreEqual("player.team.3.dex_number", 0xDABA, [98], 98);
            mapper.AssertAreEqual("player.team.3.nickname", 0xDBAD, [138, 145, 128, 129, 129, 152, 80, 80, 80, 80, 80], "KRABBY");
            mapper.AssertAreEqual("player.team.3.level", 0xDAD9, [20], 20);
            mapper.AssertAreEqual("player.team.3.exp", 0xDAC2, [0, 31, 64], 8000);
            mapper.AssertAreEqual("player.team.3.ot_id", 0xDAC0, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.3.held_item", 0xDABB, [0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0xDAD5, [136], 136);
            mapper.AssertAreEqual("player.team.3.shiny", false);
            mapper.AssertAreEqual("player.team.3.pokerus", 0xDAD6, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0xDADA, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0xDABC, [57], "Surf");
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0xDAD1, [15], 15);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0xDAD1, [15], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0xDABD, [70], "Strength");
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0xDAD2, [15], 15);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0xDAD2, [15], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0xDABE, [250], "Whirlpool");
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0xDAD3, [15], 15);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0xDAD3, [15], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0xDABF, [106], "Harden");
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0xDAD4, [30], 30);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0xDAD4, [30], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0xDADC, [0, 47], 47);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0xDADE, [0, 47], 47);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0xDAE0, [0, 48], 48);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0xDAE2, [0, 44], 44);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0xDAE4, [0, 26], 26);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0xDAE6, [0, 20], 20);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0xDAE8, [0, 20], 20);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 14);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0xDACF, [57], 3);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0xDACF, [57], 9);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0xDAD0, [62], 3);
            mapper.AssertAreEqual("player.team.3.ivs.special", 0xDAD0, [62], 14);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0xDAC5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0xDAC7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0xDAC9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0xDACB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special", 0xDACD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.hidden_power.type", "Ice");
            mapper.AssertAreEqual("player.team.3.hidden_power.power", 44);
            mapper.AssertAreEqual("player.team.4.species", 0xDAEA, [130], "Gyarados");
            mapper.AssertAreEqual("player.team.4.dex_number", 0xDAEA, [130], 130);
            mapper.AssertAreEqual("player.team.4.nickname", 0xDBB8, [134, 152, 128, 145, 128, 131, 142, 146, 80, 80, 80], "GYARADOS");
            mapper.AssertAreEqual("player.team.4.level", 0xDB09, [20], 20);
            mapper.AssertAreEqual("player.team.4.exp", 0xDAF2, [0, 39, 16], 10000);
            mapper.AssertAreEqual("player.team.4.ot_id", 0xDAF0, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.4.held_item", 0xDAEB, [0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0xDB05, [117], 117);
            mapper.AssertAreEqual("player.team.4.shiny", false);
            mapper.AssertAreEqual("player.team.4.pokerus", 0xDB06, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0xDB0A, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0xDAEC, [37], "Thrash");
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0xDB01, [20], 20);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0xDB01, [20], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0xDAED, [44], "Bite");
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0xDB02, [25], 25);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0xDB02, [25], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0xDAEE, [127], "Waterfall");
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0xDB03, [15], 15);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0xDB03, [15], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0xDAEF, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0xDB04, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0xDB04, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0xDB0C, [0, 70], 70);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0xDB0E, [0, 70], 70);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0xDB10, [0, 55], 55);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0xDB12, [0, 42], 42);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0xDB14, [0, 41], 41);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0xDB16, [0, 35], 35);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0xDB18, [0, 51], 51);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 7);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0xDAFF, [47], 2);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0xDAFF, [47], 15);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0xDB00, [159], 9);
            mapper.AssertAreEqual("player.team.4.ivs.special", 0xDB00, [159], 15);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0xDAF5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0xDAF7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0xDAF9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0xDAFB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special", 0xDAFD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.hidden_power.type", "Electric");
            mapper.AssertAreEqual("player.team.4.hidden_power.power", 50);
            mapper.AssertAreEqual("player.team.5.species", 0xDB1A, [0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0xDB1A, [0], null);
            mapper.AssertAreEqual("player.team.5.nickname", 0xDBC3, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.5.level", 0xDB39, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0xDB22, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_id", 0xDB20, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.held_item", 0xDB1B, [0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0xDB35, [0], 0);
            mapper.AssertAreEqual("player.team.5.shiny", false);
            mapper.AssertAreEqual("player.team.5.pokerus", 0xDB36, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0xDB3A, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0xDB1C, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0xDB31, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0xDB31, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0xDB1D, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0xDB32, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0xDB32, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0xDB1E, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0xDB33, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0xDB33, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0xDB1F, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0xDB34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0xDB34, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0xDB3C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0xDB3E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0xDB40, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0xDB42, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0xDB44, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0xDB46, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0xDB48, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0xDB2F, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0xDB2F, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0xDB30, [0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special", 0xDB30, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0xDB25, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0xDB27, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0xDB29, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0xDB2B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special", 0xDB2D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.hidden_power.type", "Fighting");
            mapper.AssertAreEqual("player.team.5.hidden_power.power", 31);
            mapper.AssertAreEqual("player.badges.0", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.1", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.2", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.3", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.4", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.5", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.6", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.7", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.8", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.9", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.10", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.11", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.12", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.13", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.14", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.badges.15", 0xD57D, [255], true);
            mapper.AssertAreEqual("player.pokegear.map_card", 0xD67C, [142], false);
            mapper.AssertAreEqual("player.pokegear.radio_card", 0xD67C, [142], true);
            mapper.AssertAreEqual("player.pokegear.phone_card", 0xD67C, [142], true);
            mapper.AssertAreEqual("player.pokegear.expansion_card", 0xD67C, [142], true);
            mapper.AssertAreEqual("player.pokegear.obtained", 0xD67C, [142], true);
            mapper.AssertAreEqual("bag.money", 0xD573, [1, 79, 215], 85975);
            mapper.AssertAreEqual("bag.mom_money", 0xD576, [0, 0, 0], 0);
            mapper.AssertAreEqual("bag.mom_saving", 0xD579, [128], false);
            mapper.AssertAreEqual("bag.coins", 0xD57A, [0, 100], 100);
            mapper.AssertAreEqual("bag.item_count", 0xD5B7, [9], 9);
            mapper.AssertAreEqual("bag.items.0.item", 0xD5B8, [42], "Super Repel");
            mapper.AssertAreEqual("bag.items.0.quantity", 0xD5B9, [6], 6);
            mapper.AssertAreEqual("bag.items.1.item", 0xD5BA, [20], "Repel");
            mapper.AssertAreEqual("bag.items.1.quantity", 0xD5BB, [3], 3);
            mapper.AssertAreEqual("bag.items.2.item", 0xD5BC, [83], "Bitter Berry");
            mapper.AssertAreEqual("bag.items.2.quantity", 0xD5BD, [1], 1);
            mapper.AssertAreEqual("bag.items.3.item", 0xD5BE, [78], "Przcureberry");
            mapper.AssertAreEqual("bag.items.3.quantity", 0xD5BF, [1], 1);
            mapper.AssertAreEqual("bag.items.4.item", 0xD5C0, [49], "X Attack");
            mapper.AssertAreEqual("bag.items.4.quantity", 0xD5C1, [1], 1);
            mapper.AssertAreEqual("bag.items.5.item", 0xD5C2, [14], "Full Restore");
            mapper.AssertAreEqual("bag.items.5.quantity", 0xD5C3, [2], 2);
            mapper.AssertAreEqual("bag.items.6.item", 0xD5C4, [38], "Full Heal");
            mapper.AssertAreEqual("bag.items.6.quantity", 0xD5C5, [1], 1);
            mapper.AssertAreEqual("bag.items.7.item", 0xD5C6, [144], "Dragon Fang");
            mapper.AssertAreEqual("bag.items.7.quantity", 0xD5C7, [1], 1);
            mapper.AssertAreEqual("bag.items.8.item", 0xD5C8, [143], "Metal Coat");
            mapper.AssertAreEqual("bag.items.8.quantity", 0xD5C9, [1], 1);
            mapper.AssertAreEqual("bag.items.9.item", 0xD5CA, [255], "Berry");
            mapper.AssertAreEqual("bag.items.9.quantity", 0xD5CB, [1], 1);
            mapper.AssertAreEqual("bag.items.10.item", 0xD5CC, [255], "Berry");
            mapper.AssertAreEqual("bag.items.10.quantity", 0xD5CD, [1], 1);
            mapper.AssertAreEqual("bag.items.11.item", 0xD5CE, [255], "Berry");
            mapper.AssertAreEqual("bag.items.11.quantity", 0xD5CF, [1], 1);
            mapper.AssertAreEqual("bag.items.12.item", 0xD5D0, [255], "Berry");
            mapper.AssertAreEqual("bag.items.12.quantity", 0xD5D1, [1], 1);
            mapper.AssertAreEqual("bag.items.13.item", 0xD5D2, [255], "Berry");
            mapper.AssertAreEqual("bag.items.13.quantity", 0xD5D3, [0], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0xD5D4, [255], "Berry");
            mapper.AssertAreEqual("bag.items.14.quantity", 0xD5D5, [1], 1);
            mapper.AssertAreEqual("bag.items.15.item", 0xD5D6, [255], "Berry");
            mapper.AssertAreEqual("bag.items.15.quantity", 0xD5D7, [0], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0xD5D8, [0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0xD5D9, [0], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0xD5DA, [0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0xD5DB, [0], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0xD5DC, [0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0xD5DD, [0], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0xD5DE, [0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0xD5DF, [0], 0);
            mapper.AssertAreEqual("bag.items.20.item", 0xD5E0, [0], null);
            mapper.AssertAreEqual("bag.items.20.quantity", 0xD5E1, [9], 9);
            mapper.AssertAreEqual("bag.ball_count", 0xD5FC, [1], 1);
            mapper.AssertAreEqual("bag.balls.0.item", 0xD5FD, [5], "Poke Ball");
            mapper.AssertAreEqual("bag.balls.0.quantity", 0xD5FE, [18], 18);
            mapper.AssertAreEqual("bag.balls.1.item", 0xD5FF, [255], "Berry");
            mapper.AssertAreEqual("bag.balls.1.quantity", 0xD600, [0], 0);
            mapper.AssertAreEqual("bag.balls.2.item", 0xD601, [255], "Berry");
            mapper.AssertAreEqual("bag.balls.2.quantity", 0xD602, [0], 0);
            mapper.AssertAreEqual("bag.balls.3.item", 0xD603, [0], null);
            mapper.AssertAreEqual("bag.balls.3.quantity", 0xD604, [0], 0);
            mapper.AssertAreEqual("bag.balls.4.item", 0xD605, [0], null);
            mapper.AssertAreEqual("bag.balls.4.quantity", 0xD606, [0], 0);
            mapper.AssertAreEqual("bag.balls.5.item", 0xD607, [0], null);
            mapper.AssertAreEqual("bag.balls.5.quantity", 0xD608, [0], 0);
            mapper.AssertAreEqual("bag.balls.6.item", 0xD609, [0], null);
            mapper.AssertAreEqual("bag.balls.6.quantity", 0xD60A, [0], 0);
            mapper.AssertAreEqual("bag.balls.7.item", 0xD60B, [0], null);
            mapper.AssertAreEqual("bag.balls.7.quantity", 0xD60C, [0], 0);
            mapper.AssertAreEqual("bag.balls.8.item", 0xD60D, [0], null);
            mapper.AssertAreEqual("bag.balls.8.quantity", 0xD60E, [0], 0);
            mapper.AssertAreEqual("bag.balls.9.item", 0xD60F, [0], null);
            mapper.AssertAreEqual("bag.balls.9.quantity", 0xD610, [0], 0);
            mapper.AssertAreEqual("bag.balls.10.item", 0xD611, [0], null);
            mapper.AssertAreEqual("bag.balls.10.quantity", 0xD612, [0], 0);
            mapper.AssertAreEqual("bag.balls.11.item", 0xD613, [0], null);
            mapper.AssertAreEqual("bag.balls.11.quantity", 0xD614, [0], 0);
            mapper.AssertAreEqual("bag.key_count", 0xD5E1, [9], 9);
            mapper.AssertAreEqual("bag.key_items.0", 0xD5E2, [54], "Coin Case");
            mapper.AssertAreEqual("bag.key_items.1", 0xD5E3, [175], "Squirtbottle");
            mapper.AssertAreEqual("bag.key_items.2", 0xD5E4, [59], "Good Rod");
            mapper.AssertAreEqual("bag.key_items.3", 0xD5E5, [66], "Red Scale");
            mapper.AssertAreEqual("bag.key_items.4", 0xD5E6, [133], "Basement Key");
            mapper.AssertAreEqual("bag.key_items.5", 0xD5E7, [127], "Card Key");
            mapper.AssertAreEqual("bag.key_items.6", 0xD5E8, [178], "Rainbow Wing");
            mapper.AssertAreEqual("bag.key_items.7", 0xD5E9, [7], "Bicycle");
            mapper.AssertAreEqual("bag.key_items.8", 0xD5EA, [68], "S.S. Ticket");
            mapper.AssertAreEqual("bag.key_items.9", 0xD5EB, [255], "Berry");
            mapper.AssertAreEqual("bag.key_items.10", 0xD5EC, [255], "Berry");
            mapper.AssertAreEqual("bag.key_items.11", 0xD5ED, [0], null);
            mapper.AssertAreEqual("bag.key_items.12", 0xD5EE, [0], null);
            mapper.AssertAreEqual("bag.key_items.13", 0xD5EF, [0], null);
            mapper.AssertAreEqual("bag.key_items.14", 0xD5F0, [0], null);
            mapper.AssertAreEqual("bag.key_items.15", 0xD5F1, [0], null);
            mapper.AssertAreEqual("bag.key_items.16", 0xD5F2, [0], null);
            mapper.AssertAreEqual("bag.key_items.17", 0xD5F3, [0], null);
            mapper.AssertAreEqual("bag.key_items.18", 0xD5F4, [0], null);
            mapper.AssertAreEqual("bag.key_items.19", 0xD5F5, [0], null);
            mapper.AssertAreEqual("bag.key_items.20", 0xD5F6, [0], null);
            mapper.AssertAreEqual("bag.key_items.21", 0xD5F7, [0], null);
            mapper.AssertAreEqual("bag.key_items.22", 0xD5F8, [0], null);
            mapper.AssertAreEqual("bag.key_items.23", 0xD5F9, [0], null);
            mapper.AssertAreEqual("bag.key_items.24", 0xD5FA, [0], null);
            mapper.AssertAreEqual("bag.key_items.25", 0xD5FB, [0], null);
            mapper.AssertAreEqual("bag.tms.TM01-DynamicPunch", 0xD57E, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM02-Headbutt", 0xD57F, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM03-Curse", 0xD580, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM04-Rollout", 0xD581, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM05-Roar", 0xD582, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM06-Toxic", 0xD583, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM07-Zap Cannon", 0xD584, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM08-Rock Smash", 0xD585, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM09-Psych Up", 0xD586, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM10-Hidden Power", 0xD587, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM11-Sunny Day", 0xD588, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM12-Sweet Scent", 0xD589, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM13-Snore", 0xD58A, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM14-Blizzard", 0xD58B, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM15-Hyperbeam", 0xD58C, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM16-Icy Wind", 0xD58D, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM17-Protect", 0xD58E, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM18-Rain Dance", 0xD58F, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM19-Giga Drain", 0xD590, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM20-Endure", 0xD591, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM21-Frustration", 0xD592, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM22-SolarBeam", 0xD593, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM23-Iron Tail", 0xD594, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM24-DragonBreath", 0xD595, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM25-Thunder", 0xD596, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM26-Earthquake", 0xD597, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM27-Return", 0xD598, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM28-Dig", 0xD599, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM29-Psychic", 0xD59A, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM30-Shadow Ball", 0xD59B, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM31-Mud-Slap", 0xD59C, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM32-Double Team", 0xD59D, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM33-Ice Punch", 0xD59E, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM34-Swagger", 0xD59F, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM35-Sleep Talk", 0xD5A0, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM36-Sludge Bomb", 0xD5A1, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM37-Sandstorm", 0xD5A2, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM38-Fireblast", 0xD5A3, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM39-Swift", 0xD5A4, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM40-Defense Curl", 0xD5A5, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM41-ThunderPunch", 0xD5A6, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM42-Dream Eater", 0xD5A7, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM43-Detect", 0xD5A8, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM44-Rest", 0xD5A9, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM45-Attract", 0xD5AA, [1], 1);
            mapper.AssertAreEqual("bag.tms.TM46-Thief", 0xD5AB, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM47-Steel Wing", 0xD5AC, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM48-Fire Punch", 0xD5AD, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM49-Fury Cutter", 0xD5AE, [0], 0);
            mapper.AssertAreEqual("bag.tms.TM50-Nightmare", 0xD5AF, [0], 0);
            mapper.AssertAreEqual("bag.hms.HM01", 0xD5B0, [1], false);
            mapper.AssertAreEqual("bag.hms.HM02", 0xD5B1, [1], false);
            mapper.AssertAreEqual("bag.hms.HM03", 0xD5B2, [1], false);
            mapper.AssertAreEqual("bag.hms.HM04", 0xD5B3, [1], false);
            mapper.AssertAreEqual("bag.hms.HM05", 0xD5B4, [0], false);
            mapper.AssertAreEqual("bag.hms.HM06", 0xD5B5, [1], false);
            mapper.AssertAreEqual("bag.hms.HM07", 0xD5B6, [1], false);
            mapper.AssertAreEqual("overworld.map_name", 0xDA00, [19, 2], "Mt. Silver");
            mapper.AssertAreEqual("overworld.map_group", 0xDA00, [19], "Silver");
            mapper.AssertAreEqual("overworld.map_index", 0xDA01, [2], 2);
            mapper.AssertAreEqual("overworld.y", 0xDA02, [18], 18);
            mapper.AssertAreEqual("overworld.x", 0xDA03, [18], 18);
            mapper.AssertAreEqual("overworld.movement_state", 0xD682, [1], "Bike");
            mapper.AssertAreEqual("overworld.encounter_rate", 7);
            mapper.AssertAreEqual("overworld.encounter_rates.morning", 0xCDB5, [7], 7);
            mapper.AssertAreEqual("overworld.encounter_rates.day", 0xCDB6, [7], 7);
            mapper.AssertAreEqual("overworld.encounter_rates.night", 0xCDB7, [7], 7);
            mapper.AssertAreEqual("overworld.encounter_rates.water", 0xCDB8, [7], 7);
            mapper.AssertAreEqual("flags.beat_champion", 0xD1DB, [0], false);
            mapper.AssertAreEqual("flags.status_flags.pokedex", 0xD571, [65], true);
            mapper.AssertAreEqual("flags.status_flags.unown_dex", 0xD571, [65], false);
            mapper.AssertAreEqual("flags.status_flags.flash", 0xD571, [65], false);
            mapper.AssertAreEqual("flags.status_flags.caught_pokerus", 0xD571, [65], false);
            mapper.AssertAreEqual("flags.status_flags.rocket_signal", 0xD571, [65], false);
            mapper.AssertAreEqual("flags.status_flags.no_wild_encounters", 0xD571, [65], false);
            mapper.AssertAreEqual("flags.status_flags.hall_of_fame", 0xD571, [65], true);
            mapper.AssertAreEqual("flags.status_flags.main_menu_mobile_choices", 0xD571, [65], false);
            mapper.AssertAreEqual("flags.status_flags.rockets_in_radio_tower", 0xD572, [80], false);
            mapper.AssertAreEqual("flags.status_flags.safari_game", 0xD572, [80], false);
            mapper.AssertAreEqual("flags.status_flags.bug_contest_timer", 0xD572, [80], false);
            mapper.AssertAreEqual("flags.status_flags.unused_3", 0xD572, [80], false);
            mapper.AssertAreEqual("flags.status_flags.bike_shop_call", 0xD572, [80], true);
            mapper.AssertAreEqual("flags.status_flags.unused_5", 0xD572, [80], false);
            mapper.AssertAreEqual("flags.status_flags.reached_goldenrod", 0xD572, [80], true);
            mapper.AssertAreEqual("flags.status_flags.rockets_in_mahogany", 0xD572, [80], false);
            mapper.AssertAreEqual("flags.daily_flags.kurt_making_balls", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.bug_contest", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.fish_swarm", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.time_capsule", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.all_fruit_trees", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.got_shuckie_today", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.goldenrod_underground_bargain", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.trainer_house", 0xD968, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.mt_moon_square_clefairy", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.union_cave_lapras", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.goldenrod_underground_got_haircut", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.goldenrod_dept_store_tm27_return", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.daisys_grooming", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.indigo_plateau_rival_fight", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.move_tutor", 0xD969, [0], false);
            mapper.AssertAreEqual("flags.daily_flags.buenas_password", 0xD969, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_1", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_2", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_3", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_4", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_5", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_6", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_7", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.temporary_until_map_reload_8", 0xD7B7, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm31_mud_slap", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm49_fury_cutter", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm01_dynamicpunch", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm45_attract", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm30_shadow_ball", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm23_iron_tail", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm16_icy_wind", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_tm24_dragonbreath", 0xD7B8, [255], true);
            mapper.AssertAreEqual("event_flags.got_hm01_cut", 0xD7B9, [47], true);
            mapper.AssertAreEqual("event_flags.got_hm02_fly", 0xD7B9, [47], true);
            mapper.AssertAreEqual("event_flags.got_hm03_surf", 0xD7B9, [47], true);
            mapper.AssertAreEqual("event_flags.got_hm04_strength", 0xD7B9, [47], true);
            mapper.AssertAreEqual("event_flags.got_hm05_flash", 0xD7B9, [47], false);
            mapper.AssertAreEqual("event_flags.got_hm06_whirlpool", 0xD7B9, [47], true);
            mapper.AssertAreEqual("event_flags.got_old_rod", 0xD7B9, [47], false);
            mapper.AssertAreEqual("event_flags.got_good_rod", 0xD7BA, [213], true);
            mapper.AssertAreEqual("event_flags.got_super_rod", 0xD7BA, [213], false);
            mapper.AssertAreEqual("event_flags.got_a_pokemon_from_elm", 0xD7BA, [213], true);
            mapper.AssertAreEqual("event_flags.got_cyndaquil_from_elm", 0xD7BA, [213], false);
            mapper.AssertAreEqual("event_flags.got_totodile_from_elm", 0xD7BA, [213], true);
            mapper.AssertAreEqual("event_flags.got_chikorita_from_elm", 0xD7BA, [213], false);
            mapper.AssertAreEqual("event_flags.got_mystery_egg_from_mr_pokemon", 0xD7BA, [213], true);
            mapper.AssertAreEqual("event_flags.gave_mystery_egg_to_elm", 0xD7BA, [213], true);
            mapper.AssertAreEqual("event_flags.jasmine_returned_to_gym", 0xD7BB, [63], true);
            mapper.AssertAreEqual("event_flags.cleared_radio_tower", 0xD7BB, [63], true);
            mapper.AssertAreEqual("event_flags.cleared_rocket_hideout", 0xD7BB, [63], true);
            mapper.AssertAreEqual("event_flags.got_secretpotion_from_pharmacy", 0xD7BB, [63], true);
            mapper.AssertAreEqual("event_flags.got_ss_ticket_from_elm", 0xD7BB, [63], true);
            mapper.AssertAreEqual("event_flags.used_the_card_key_in_the_radio_tower", 0xD7BB, [63], true);
            mapper.AssertAreEqual("event_flags.refused_to_help_lance_at_lake_of_rage", 0xD7BB, [63], false);
            mapper.AssertAreEqual("event_flags.got_berry_from_route_30_house", 0xD7BB, [63], false);
            mapper.AssertAreEqual("event_flags.made_whitney_cry", 0xD7BC, [62], false);
            mapper.AssertAreEqual("event_flags.herded_farfetchd", 0xD7BC, [62], true);
            mapper.AssertAreEqual("event_flags.fought_sudowoodo", 0xD7BC, [62], true);
            mapper.AssertAreEqual("event_flags.cleared_slowpoke_well", 0xD7BC, [62], true);
            mapper.AssertAreEqual("event_flags.refused_to_take_egg_from_elms_aide", 0xD7BC, [62], true);
            mapper.AssertAreEqual("event_flags.got_togepi_egg_from_elms_aide", 0xD7BC, [62], true);
            mapper.AssertAreEqual("event_flags.made_unown_appear_in_ruins", 0xD7BC, [62], false);
            mapper.AssertAreEqual("event_flags.fast_ship_destination_olivine", 0xD7BC, [62], false);
            mapper.AssertAreEqual("event_flags.fast_ship_first_time", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.fast_ship_has_arrived", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.fast_ship_found_girl", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.fast_ship_lazy_sailor", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.fast_ship_informed_about_lazy_sailor", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.kurt_gave_you_lure_ball", 0xD7BD, [223], false);
            mapper.AssertAreEqual("event_flags.initialized_events", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.jasmine_explained_amphys_sickness", 0xD7BD, [223], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_explained_weird_magikarp", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_asked_for_magikarp", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_elixir_on_standby", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.healed_moomoo", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.got_tm13_snore_from_moomoo_farm", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_farmer_about_moomoo", 0xD7BE, [0], false);
            mapper.AssertAreEqual("event_flags.talked_to_mom_after_mystery_egg_quest", 0xD7BF, [27], true);
            mapper.AssertAreEqual("event_flags.dude_talked_to_you", 0xD7BF, [27], true);
            mapper.AssertAreEqual("event_flags.learned_to_catch_pokemon", 0xD7BF, [27], false);
            mapper.AssertAreEqual("event_flags.elm_called_about_stolen_pokemon", 0xD7BF, [27], true);
            mapper.AssertAreEqual("event_flags.beat_elite_four", 0xD7BF, [27], true);
            mapper.AssertAreEqual("event_flags.got_shuckie", 0xD7BF, [27], false);
            mapper.AssertAreEqual("event_flags.mania_took_shuckie_or_let_you_keep_him", 0xD7BF, [27], false);
            mapper.AssertAreEqual("event_flags.got_sunny_day_from_radio_tower", 0xD7BF, [27], false);
            mapper.AssertAreEqual("event_flags.got_pink_bow_from_mary", 0xD7C0, [22], false);
            mapper.AssertAreEqual("event_flags.used_basement_key", 0xD7C0, [22], true);
            mapper.AssertAreEqual("event_flags.received_card_key", 0xD7C0, [22], true);
            mapper.AssertAreEqual("event_flags.got_tm08_rock_smash", 0xD7C0, [22], false);
            mapper.AssertAreEqual("event_flags.lance_healed_you_in_team_rocket_base", 0xD7C0, [22], true);
            mapper.AssertAreEqual("event_flags.got_mystic_water_in_cherrygrove", 0xD7C0, [22], false);
            mapper.AssertAreEqual("event_flags.got_tm05_roar", 0xD7C0, [22], false);
            mapper.AssertAreEqual("event_flags.got_eevee", 0xD7C0, [22], false);
            mapper.AssertAreEqual("event_flags.got_kenya", 0xD7C1, [1], true);
            mapper.AssertAreEqual("event_flags.gave_kenya", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.got_hp_up_from_randy", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.got_tm50_nightmare", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.togepi_hatched", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.showed_togepi_to_elm", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.got_everstone_from_elm", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.got_quick_claw", 0xD7C1, [1], false);
            mapper.AssertAreEqual("event_flags.got_tm10_hidden_power", 0xD7C2, [216], false);
            mapper.AssertAreEqual("event_flags.got_tm36_sludge_bomb", 0xD7C2, [216], false);
            mapper.AssertAreEqual("event_flags.got_itemfinder", 0xD7C2, [216], false);
            mapper.AssertAreEqual("event_flags.got_bicycle", 0xD7C2, [216], true);
            mapper.AssertAreEqual("event_flags.got_squirtbottle", 0xD7C2, [216], true);
            mapper.AssertAreEqual("event_flags.got_miracle_seed_in_route_32", 0xD7C2, [216], false);
            mapper.AssertAreEqual("event_flags.got_charcoal_in_charcoal_kiln", 0xD7C2, [216], true);
            mapper.AssertAreEqual("event_flags.got_tm02_headbutt", 0xD7C2, [216], true);
            mapper.AssertAreEqual("event_flags.decided_to_help_lance", 0xD7C3, [1], true);
            mapper.AssertAreEqual("event_flags.got_tyrogue_from_kiyo", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.met_frieda_of_friday", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.got_poison_barb_from_frieda", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.met_tuscany_of_tuesday", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.got_pink_bow_from_tuscany", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.met_arthur_of_thursday", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.got_hard_stone_from_arthur", 0xD7C3, [1], false);
            mapper.AssertAreEqual("event_flags.met_sunny_of_sunday", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.got_magnet_from_sunny", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.met_wesley_of_wednesday", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.got_blackbelt_from_wesley", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.met_santos_of_saturday", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.got_spell_tag_from_santos", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.met_monica_of_monday", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.got_sharp_beak_from_monica", 0xD7C4, [0], false);
            mapper.AssertAreEqual("event_flags.got_soft_sand_from_kate", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.got_metal_coat_from_grandpa_on_ss_aqua", 0xD7C5, [2], true);
            mapper.AssertAreEqual("event_flags.got_blackglasses_in_dark_cave", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.got_kings_rock_in_slowpoke_well", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.got_tm47_steel_wing", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.got_tm37_sandstorm", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.first_time_banking_with_mom", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.told_elm_about_togepi_over_the_phone", 0xD7C5, [2], false);
            mapper.AssertAreEqual("event_flags.got_rainbow_wing", 0xD7C6, [17], true);
            mapper.AssertAreEqual("event_flags.got_silver_wing", 0xD7C6, [17], false);
            mapper.AssertAreEqual("event_flags.got_tm12_sweet_scent", 0xD7C6, [17], false);
            mapper.AssertAreEqual("event_flags.released_the_beasts", 0xD7C6, [17], false);
            mapper.AssertAreEqual("event_flags.got_master_ball_from_elm", 0xD7C6, [17], true);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_hidden_max_potion", 0xD7C6, [17], false);
            mapper.AssertAreEqual("event_flags.tin_tower_5f_hidden_full_restore", 0xD7C6, [17], false);
            mapper.AssertAreEqual("event_flags.tin_tower_5f_hidden_carbos", 0xD7C6, [17], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_hidden_ether", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_hidden_ultra_ball", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_hidden_burn_heal", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_hidden_nugget", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.national_park_hidden_full_heal", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_hidden_hyper_potion", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_hidden_revive", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_hidden_full_heal", 0xD7C7, [0], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_hidden_ether", 0xD7C8, [1], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_hidden_super_potion", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_hidden_full_heal", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_hidden_parlyz_heal", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_hidden_super_potion", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_hidden_antidote", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_hidden_max_potion", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_hidden_revive", 0xD7C8, [1], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_outside_hidden_hyper_potion", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_hidden_max_repel", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_hidden_full_restore", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_hidden_max_revive", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.ice_path_b1f_hidden_max_potion", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_mahogany_side_hidden_carbos", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_blackthorn_side_hidden_ice_heal", 0xD7C9, [128], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_hidden_rare_candy", 0xD7C9, [128], true);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_hidden_ultra_ball", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_hidden_full_restore", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_hidden_dire_hit", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_hidden_ultra_ball", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_2_hidden_max_potion", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_hidden_elixer", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_hidden_max_potion", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.victory_road_hidden_full_heal", 0xD7CA, [0], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_hidden_revive", 0xD7CB, [140], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_hidden_max_potion", 0xD7CB, [140], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_hidden_max_elixer", 0xD7CB, [140], true);
            mapper.AssertAreEqual("event_flags.route_28_hidden_rare_candy", 0xD7CB, [140], true);
            mapper.AssertAreEqual("event_flags.route_30_hidden_potion", 0xD7CB, [140], false);
            mapper.AssertAreEqual("event_flags.route_32_hidden_great_ball", 0xD7CB, [140], false);
            mapper.AssertAreEqual("event_flags.route_32_hidden_super_potion", 0xD7CB, [140], false);
            mapper.AssertAreEqual("event_flags.route_34_hidden_rare_candy", 0xD7CB, [140], true);
            mapper.AssertAreEqual("event_flags.route_34_hidden_super_potion", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_37_hidden_ether", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_39_hidden_nugget", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_40_hidden_hyper_potion", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_41_hidden_max_ether", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_42_hidden_max_potion", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_44_hidden_elixer", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.route_45_hidden_pp_up", 0xD7CC, [0], false);
            mapper.AssertAreEqual("event_flags.violet_city_hidden_hyper_potion", 0xD7CD, [114], false);
            mapper.AssertAreEqual("event_flags.azalea_town_hidden_full_heal", 0xD7CD, [114], true);
            mapper.AssertAreEqual("event_flags.cianwood_city_hidden_revive", 0xD7CD, [114], false);
            mapper.AssertAreEqual("event_flags.cianwood_city_hidden_max_ether", 0xD7CD, [114], false);
            mapper.AssertAreEqual("event_flags.ecruteak_city_hidden_hyper_potion", 0xD7CD, [114], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_hidden_full_restore", 0xD7CD, [114], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_hidden_rare_candy", 0xD7CD, [114], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_hidden_max_potion", 0xD7CD, [114], false);
            mapper.AssertAreEqual("event_flags.silver_cave_outside_hidden_full_restore", 0xD7CE, [0], false);
            mapper.AssertAreEqual("event_flags.got_nugget_from_guy", 0xD7D0, [46], false);
            mapper.AssertAreEqual("event_flags.returned_machine_part", 0xD7D0, [46], true);
            mapper.AssertAreEqual("event_flags.met_manager_at_power_plant", 0xD7D0, [46], true);
            mapper.AssertAreEqual("event_flags.met_rocket_grunt_at_cerulean_gym", 0xD7D0, [46], true);
            mapper.AssertAreEqual("event_flags.met_reds_mom", 0xD7D0, [46], false);
            mapper.AssertAreEqual("event_flags.restored_power_to_kanto", 0xD7D0, [46], true);
            mapper.AssertAreEqual("event_flags.got_coins_from_gambler_at_celadon", 0xD7D0, [46], false);
            mapper.AssertAreEqual("event_flags.met_copycat_found_out_about_lost_item", 0xD7D0, [46], false);
            mapper.AssertAreEqual("event_flags.returned_lost_item_to_copycat", 0xD7D1, [144], false);
            mapper.AssertAreEqual("event_flags.got_pass_from_copycat", 0xD7D1, [144], false);
            mapper.AssertAreEqual("event_flags.got_lost_item_from_fan_club", 0xD7D1, [144], false);
            mapper.AssertAreEqual("event_flags.listened_to_fan_club_president_but_bag_was_full", 0xD7D1, [144], false);
            mapper.AssertAreEqual("event_flags.listened_to_fan_club_president", 0xD7D1, [144], true);
            mapper.AssertAreEqual("event_flags.talked_to_seafoam_gym_guide_once", 0xD7D1, [144], false);
            mapper.AssertAreEqual("event_flags.enable_diploma_printing", 0xD7D1, [144], false);
            mapper.AssertAreEqual("event_flags.cinnabar_rocks_cleared", 0xD7D1, [144], true);
            mapper.AssertAreEqual("event_flags.cleared_nugget_bridge", 0xD7D2, [176], false);
            mapper.AssertAreEqual("event_flags.talked_to_wardens_granddaughter", 0xD7D2, [176], false);
            mapper.AssertAreEqual("event_flags.got_tm03_curse", 0xD7D2, [176], false);
            mapper.AssertAreEqual("event_flags.got_cleanse_tag", 0xD7D2, [176], false);
            mapper.AssertAreEqual("event_flags.got_tm19_giga_drain", 0xD7D2, [176], true);
            mapper.AssertAreEqual("event_flags.got_tm06_toxic", 0xD7D2, [176], true);
            mapper.AssertAreEqual("event_flags.got_up_grade", 0xD7D2, [176], false);
            mapper.AssertAreEqual("event_flags.got_tm07_zap_cannon", 0xD7D2, [176], true);
            mapper.AssertAreEqual("event_flags.got_tm42_dream_eater", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.talked_to_oak_in_kanto", 0xD7D3, [2], true);
            mapper.AssertAreEqual("event_flags.got_hp_up_from_vermilion_guy", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.got_tm29_psychic", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.digletts_cave_hidden_max_revive", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.underground_path_hidden_full_restore", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.underground_path_hidden_x_special", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_hidden_x_accuracy", 0xD7D3, [2], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_hidden_x_defend", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_hidden_max_potion", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.olivine_port_hidden_protein", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.vermilion_port_hidden_iron", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.mount_moon_square_hidden_moon_stone", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_max_ether", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_full_heal", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_full_restore", 0xD7D4, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_hidden_revive", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_4_hidden_ultra_ball", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_9_hidden_ether", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_12_hidden_elixer", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_13_hidden_calcium", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_11_hidden_revive", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_17_hidden_max_ether", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_17_hidden_max_elixer", 0xD7D5, [0], false);
            mapper.AssertAreEqual("event_flags.route_25_hidden_potion", 0xD7D6, [74], false);
            mapper.AssertAreEqual("event_flags.found_leftovers_in_celadon_cafe", 0xD7D6, [74], true);
            mapper.AssertAreEqual("event_flags.found_berserk_gene_in_cerulean_city", 0xD7D6, [74], false);
            mapper.AssertAreEqual("event_flags.found_machine_part_in_cerulean_gym", 0xD7D6, [74], true);
            mapper.AssertAreEqual("event_flags.vermilion_city_hidden_full_heal", 0xD7D6, [74], false);
            mapper.AssertAreEqual("event_flags.celadon_city_hidden_pp_up", 0xD7D6, [74], false);
            mapper.AssertAreEqual("event_flags.cinnabar_island_hidden_rare_candy", 0xD7D6, [74], true);
            mapper.AssertAreEqual("event_flags.gave_kurt_red_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_blu_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_ylw_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_grn_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_wht_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_blk_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.gave_kurt_pnk_apricorn", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.jack_asked_for_phone_number", 0xD802, [0], false);
            mapper.AssertAreEqual("event_flags.jack_ready_for_rematch", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.beverly_asked_for_phone_number", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.beverly_ready_for_rematch", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.huey_asked_for_phone_number", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.huey_ready_for_rematch", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.got_protein_from_huey", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.got_hp_up_from_joey", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.got_carbos_from_vance", 0xD803, [0], false);
            mapper.AssertAreEqual("event_flags.got_iron_from_parry", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.got_calcium_from_erin", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.kenji_on_break", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.gaven_asked_for_phone_number", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.gaven_ready_for_rematch", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.beth_asked_for_phone_number", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.beth_ready_for_rematch", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.jose_asked_for_phone_number", 0xD804, [0], false);
            mapper.AssertAreEqual("event_flags.jose_ready_for_rematch", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.reena_asked_for_phone_number", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.reena_ready_for_rematch", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.joey_asked_for_phone_number", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.joey_ready_for_rematch", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.wade_asked_for_phone_number", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.wade_ready_for_rematch", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.ralph_asked_for_phone_number", 0xD805, [0], false);
            mapper.AssertAreEqual("event_flags.ralph_ready_for_rematch", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.liz_asked_for_phone_number", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.liz_ready_for_rematch", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.anthony_asked_for_phone_number", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.anthony_ready_for_rematch", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.todd_asked_for_phone_number", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.todd_ready_for_rematch", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.gina_asked_for_phone_number", 0xD806, [0], false);
            mapper.AssertAreEqual("event_flags.gina_ready_for_rematch", 0xD807, [8], false);
            mapper.AssertAreEqual("event_flags.irwin_asked_for_phone_number", 0xD807, [8], false);
            mapper.AssertAreEqual("event_flags.irwin_ready_for_rematch", 0xD807, [8], false);
            mapper.AssertAreEqual("event_flags.arnie_asked_for_phone_number", 0xD807, [8], true);
            mapper.AssertAreEqual("event_flags.arnie_ready_for_rematch", 0xD807, [8], false);
            mapper.AssertAreEqual("event_flags.alan_asked_for_phone_number", 0xD807, [8], false);
            mapper.AssertAreEqual("event_flags.alan_ready_for_rematch", 0xD807, [8], false);
            mapper.AssertAreEqual("event_flags.dana_asked_for_phone_number", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.dana_ready_for_rematch", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.chad_asked_for_phone_number", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.chad_ready_for_rematch", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.derek_asked_for_phone_number", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.derek_ready_for_rematch", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.chris_asked_for_phone_number", 0xD808, [0], false);
            mapper.AssertAreEqual("event_flags.chris_ready_for_rematch", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.brent_asked_for_phone_number", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.brent_ready_for_rematch", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.tiffany_asked_for_phone_number", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.tiffany_ready_for_rematch", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.vance_asked_for_phone_number", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.vance_ready_for_rematch", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.wilton_asked_for_phone_number", 0xD809, [0], false);
            mapper.AssertAreEqual("event_flags.wilton_ready_for_rematch", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.kenji_asked_for_phone_number", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.kenji_ready_for_rematch", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.parry_asked_for_phone_number", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.parry_ready_for_rematch", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.erin_asked_for_phone_number", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.erin_ready_for_rematch", 0xD80A, [0], false);
            mapper.AssertAreEqual("event_flags.solved_ho_oh_puzzle", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.solved_kabuto_puzzle", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.solved_omanyte_puzzle", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.solved_aerodactyl_puzzle", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.deco_bed_1", 0xD80B, [16], true);
            mapper.AssertAreEqual("event_flags.deco_bed_2", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.deco_bed_3", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.deco_bed_4", 0xD80B, [16], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_1", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_2", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_3", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_carpet_4", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_plant_1", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_plant_2", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_plant_3", 0xD80C, [128], false);
            mapper.AssertAreEqual("event_flags.deco_poster_1", 0xD80C, [128], true);
            mapper.AssertAreEqual("event_flags.deco_poster_2", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_poster_3", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_poster_4", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_famicom", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_snes", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_n64", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_virtual_boy", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_pikachu_doll", 0xD80D, [0], false);
            mapper.AssertAreEqual("event_flags.deco_surfing_pikachu_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_clefairy_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_jigglypuff_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_bulbasaur_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_charmander_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_squirtle_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_poliwag_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_diglett_doll", 0xD80E, [0], false);
            mapper.AssertAreEqual("event_flags.deco_staryu_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_magikarp_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_oddish_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_gengar_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_shellder_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_grimer_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_voltorb_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_weedle_doll", 0xD80F, [0], false);
            mapper.AssertAreEqual("event_flags.deco_unown_doll", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.deco_geodude_doll", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.deco_machop_doll", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.deco_tentacool_doll", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.players_room_poster", 0xD810, [16], true);
            mapper.AssertAreEqual("event_flags.deco_gold_trophy", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.deco_silver_trophy", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.deco_big_snorlax_doll", 0xD810, [16], false);
            mapper.AssertAreEqual("event_flags.deco_big_onix_doll", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.deco_big_lapras_doll", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.warped_from_route_35_national_park_gate", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.switch_1", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.switch_2", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.switch_3", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.emergency_switch", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.switch_4", 0xD811, [0], false);
            mapper.AssertAreEqual("event_flags.switch_5", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_6", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_7", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_8", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_9", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_10", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_11", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_12", 0xD812, [0], false);
            mapper.AssertAreEqual("event_flags.switch_13", 0xD813, [252], false);
            mapper.AssertAreEqual("event_flags.switch_14", 0xD813, [252], false);
            mapper.AssertAreEqual("event_flags.uncovered_staircase_in_mahogany_mart", 0xD813, [252], true);
            mapper.AssertAreEqual("event_flags.turned_off_security_cameras", 0xD813, [252], true);
            mapper.AssertAreEqual("event_flags.security_camera_1", 0xD813, [252], true);
            mapper.AssertAreEqual("event_flags.security_camera_2", 0xD813, [252], true);
            mapper.AssertAreEqual("event_flags.security_camera_3", 0xD813, [252], true);
            mapper.AssertAreEqual("event_flags.security_camera_4", 0xD813, [252], true);
            mapper.AssertAreEqual("event_flags.security_camera_5", 0xD814, [1], true);
            mapper.AssertAreEqual("event_flags.exploding_trap_1", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_2", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_3", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_4", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_5", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_6", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_7", 0xD814, [1], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_8", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_9", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_10", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_11", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_12", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_13", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_14", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_15", 0xD815, [0], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_16", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_17", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_18", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_19", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_20", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_21", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.exploding_trap_22", 0xD816, [128], false);
            mapper.AssertAreEqual("event_flags.learned_hail_giovanni", 0xD816, [128], true);
            mapper.AssertAreEqual("event_flags.opened_door_to_rocket_hideout_transmitter", 0xD817, [47], true);
            mapper.AssertAreEqual("event_flags.learned_slowpoketail", 0xD817, [47], true);
            mapper.AssertAreEqual("event_flags.learned_raticate_tail", 0xD817, [47], true);
            mapper.AssertAreEqual("event_flags.opened_door_to_giovannis_office", 0xD817, [47], true);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_layout_1", 0xD817, [47], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_layout_2", 0xD817, [47], true);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_layout_3", 0xD817, [47], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_blocked_off", 0xD817, [47], false);
            mapper.AssertAreEqual("event_flags.left_mons_with_contest_officer", 0xD818, [254], false);
            mapper.AssertAreEqual("event_flags.wills_room_entrance_closed", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.wills_room_exit_open", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.kogas_room_entrance_closed", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.kogas_room_exit_open", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.brunos_room_entrance_closed", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.brunos_room_exit_open", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.karens_room_entrance_closed", 0xD818, [254], true);
            mapper.AssertAreEqual("event_flags.karens_room_exit_open", 0xD819, [3], true);
            mapper.AssertAreEqual("event_flags.lances_room_entrance_closed", 0xD819, [3], true);
            mapper.AssertAreEqual("event_flags.lances_room_exit_open", 0xD819, [3], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_sun_stone", 0xD819, [3], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_everstone", 0xD819, [3], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_gold_berry", 0xD819, [3], false);
            mapper.AssertAreEqual("event_flags.contest_officer_has_berry", 0xD819, [3], false);
            mapper.AssertAreEqual("event_flags.fought_ho_oh", 0xD819, [3], false);
            mapper.AssertAreEqual("event_flags.fought_lugia", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_rival_in_mt_moon", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.met_bills_grandpa", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.showed_lickitung_to_bills_grandpa", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.showed_oddish_to_bills_grandpa", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.showed_staryu_to_bills_grandpa", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.showed_growlithe_vulpix_to_bills_grandpa", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.showed_pichu_to_bills_grandpa", 0xD81A, [0], false);
            mapper.AssertAreEqual("event_flags.got_everstone_from_bills_grandpa", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.got_leaf_stone_from_bills_grandpa", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.got_water_stone_from_bills_grandpa", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.got_fire_stone_from_bills_grandpa", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.got_thunderstone_from_bills_grandpa", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.listened_to_initial_radio", 0xD81B, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_elaine", 0xD834, [1], true);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_paula", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_kaylee", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_susie", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_denise", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_kara", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_wendy", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_lisa", 0xD834, [1], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_jill", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_mary", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_katie", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_dawn", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_tara", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_nicole", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_lori", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_jody", 0xD835, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_nikki", 0xD836, [30], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_diana", 0xD836, [30], true);
            mapper.AssertAreEqual("event_flags.beat_swimmerf_briana", 0xD836, [30], true);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_rod", 0xD836, [30], true);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_abe", 0xD836, [30], true);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_bryan", 0xD836, [30], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_theo", 0xD836, [30], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_toby", 0xD836, [30], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_denis", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_vance", 0xD837, [2], true);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_hank", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_roy", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_boris", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_bob", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_jose", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_peter", 0xD837, [2], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_jose2", 0xD838, [192], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_perry", 0xD838, [192], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_bret", 0xD838, [192], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_jose3", 0xD838, [192], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_vance2", 0xD838, [192], false);
            mapper.AssertAreEqual("event_flags.beat_bird_keeper_vance3", 0xD838, [192], false);
            mapper.AssertAreEqual("event_flags.beat_boarder_ronald", 0xD838, [192], true);
            mapper.AssertAreEqual("event_flags.beat_boarder_brad", 0xD838, [192], true);
            mapper.AssertAreEqual("event_flags.beat_boarder_douglas", 0xD839, [97], true);
            mapper.AssertAreEqual("event_flags.beat_sage_chow", 0xD839, [97], false);
            mapper.AssertAreEqual("event_flags.beat_sage_nico", 0xD839, [97], false);
            mapper.AssertAreEqual("event_flags.beat_sage_jin", 0xD839, [97], false);
            mapper.AssertAreEqual("event_flags.beat_sage_troy", 0xD839, [97], false);
            mapper.AssertAreEqual("event_flags.beat_sage_jeffrey", 0xD839, [97], true);
            mapper.AssertAreEqual("event_flags.beat_sage_ping", 0xD839, [97], true);
            mapper.AssertAreEqual("event_flags.beat_sage_edmond", 0xD839, [97], false);
            mapper.AssertAreEqual("event_flags.beat_sage_neal", 0xD83A, [248], false);
            mapper.AssertAreEqual("event_flags.beat_sage_li", 0xD83A, [248], false);
            mapper.AssertAreEqual("event_flags.beat_camper_roland", 0xD83A, [248], false);
            mapper.AssertAreEqual("event_flags.beat_camper_todd", 0xD83A, [248], true);
            mapper.AssertAreEqual("event_flags.beat_camper_ivan", 0xD83A, [248], true);
            mapper.AssertAreEqual("event_flags.beat_camper_elliot", 0xD83A, [248], true);
            mapper.AssertAreEqual("event_flags.beat_camper_barry", 0xD83A, [248], true);
            mapper.AssertAreEqual("event_flags.beat_camper_lloyd", 0xD83A, [248], true);
            mapper.AssertAreEqual("event_flags.beat_camper_dean", 0xD83B, [1], true);
            mapper.AssertAreEqual("event_flags.beat_camper_sid", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_hervey", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_dale", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_ted", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_todd2", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_todd3", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_thomas", 0xD83B, [1], false);
            mapper.AssertAreEqual("event_flags.beat_camper_leroy", 0xD83C, [104], false);
            mapper.AssertAreEqual("event_flags.beat_camper_david", 0xD83C, [104], false);
            mapper.AssertAreEqual("event_flags.beat_camper_john", 0xD83C, [104], false);
            mapper.AssertAreEqual("event_flags.beat_camper_jerry", 0xD83C, [104], true);
            mapper.AssertAreEqual("event_flags.beat_camper_spencer", 0xD83C, [104], false);
            mapper.AssertAreEqual("event_flags.beat_burglar_duncan", 0xD83C, [104], true);
            mapper.AssertAreEqual("event_flags.beat_burglar_eddie", 0xD83C, [104], true);
            mapper.AssertAreEqual("event_flags.beat_burglar_corey", 0xD83C, [104], false);
            mapper.AssertAreEqual("event_flags.beat_biker_benny", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_kazu", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_dwayne", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_harris", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_zeke", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_charles", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_riley", 0xD83D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_biker_joel", 0xD83E, [72], false);
            mapper.AssertAreEqual("event_flags.beat_biker_glenn", 0xD83E, [72], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_nathan", 0xD83E, [72], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_franklin", 0xD83E, [72], true);
            mapper.AssertAreEqual("event_flags.beat_psychic_herman", 0xD83E, [72], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_fidel", 0xD83E, [72], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_greg", 0xD83E, [72], true);
            mapper.AssertAreEqual("event_flags.beat_psychic_norman", 0xD83E, [72], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_mark", 0xD83F, [21], true);
            mapper.AssertAreEqual("event_flags.beat_psychic_phil", 0xD83F, [21], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_richard", 0xD83F, [21], true);
            mapper.AssertAreEqual("event_flags.beat_psychic_gilbert", 0xD83F, [21], false);
            mapper.AssertAreEqual("event_flags.beat_psychic_jared", 0xD83F, [21], true);
            mapper.AssertAreEqual("event_flags.beat_psychic_rodney", 0xD83F, [21], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_otis", 0xD83F, [21], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_dick", 0xD83F, [21], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_ned", 0xD840, [28], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_burt", 0xD840, [28], false);
            mapper.AssertAreEqual("event_flags.beat_firebreather_bill", 0xD840, [28], true);
            mapper.AssertAreEqual("event_flags.beat_firebreather_walt", 0xD840, [28], true);
            mapper.AssertAreEqual("event_flags.beat_firebreather_ray", 0xD840, [28], true);
            mapper.AssertAreEqual("event_flags.beat_firebreather_lyle", 0xD840, [28], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_justin", 0xD840, [28], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_ralph", 0xD840, [28], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_arnold", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_kyle", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_henry", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_marvin", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_chris", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_andre", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_raymond", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_wilton", 0xD841, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_edgar", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_jonah", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_martin", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_stephen", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_barney", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_ralph2", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_ralph3", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_chris2", 0xD842, [0], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_chris3", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_wilton2", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_scott", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_fisher_wilton3", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_twins_amy_and_may", 0xD843, [16], true);
            mapper.AssertAreEqual("event_flags.beat_twins_ann_and_anne", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_twins_ann_and_anne2", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_twins_amy_and_may2", 0xD843, [16], false);
            mapper.AssertAreEqual("event_flags.beat_twins_jo_and_zoe", 0xD844, [1], true);
            mapper.AssertAreEqual("event_flags.beat_twins_jo_and_zoe2", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_twins_meg_and_peg", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_twins_meg_and_peg2", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_jack", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_kip", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_alan", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_johnny", 0xD844, [1], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_danny", 0xD845, [12], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_tommy", 0xD845, [12], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_dudley", 0xD845, [12], true);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_joe", 0xD845, [12], true);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_billy", 0xD845, [12], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_chad", 0xD845, [12], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_nate", 0xD845, [12], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_ricky", 0xD845, [12], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_jack2", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_jack3", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_alan2", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_alan3", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_chad2", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_schoolboy_chad3", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_liz", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_gina", 0xD846, [0], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_brooke", 0xD847, [7], true);
            mapper.AssertAreEqual("event_flags.beat_picnicker_kim", 0xD847, [7], true);
            mapper.AssertAreEqual("event_flags.beat_picnicker_cindy", 0xD847, [7], true);
            mapper.AssertAreEqual("event_flags.beat_picnicker_hope", 0xD847, [7], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_sharon", 0xD847, [7], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_debra", 0xD847, [7], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_gina2", 0xD847, [7], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_erin", 0xD847, [7], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_liz2", 0xD848, [12], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_liz3", 0xD848, [12], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_heidi", 0xD848, [12], true);
            mapper.AssertAreEqual("event_flags.beat_picnicker_edna", 0xD848, [12], true);
            mapper.AssertAreEqual("event_flags.beat_picnicker_gina3", 0xD848, [12], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tiffany2", 0xD848, [12], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tiffany3", 0xD848, [12], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_erin2", 0xD848, [12], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tanya", 0xD849, [177], true);
            mapper.AssertAreEqual("event_flags.beat_picnicker_tiffany", 0xD849, [177], false);
            mapper.AssertAreEqual("event_flags.beat_picnicker_erin3", 0xD849, [177], false);
            mapper.AssertAreEqual("event_flags.beat_guitarist_clyde", 0xD849, [177], false);
            mapper.AssertAreEqual("event_flags.beat_guitarist_vincent", 0xD849, [177], true);
            mapper.AssertAreEqual("event_flags.beat_juggler_irwin", 0xD849, [177], true);
            mapper.AssertAreEqual("event_flags.beat_juggler_fritz", 0xD849, [177], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_horton", 0xD849, [177], true);
            mapper.AssertAreEqual("event_flags.beat_juggler_irwin2", 0xD84A, [212], false);
            mapper.AssertAreEqual("event_flags.beat_juggler_irwin3", 0xD84A, [212], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_preston", 0xD84A, [212], true);
            mapper.AssertAreEqual("event_flags.beat_gentleman_edward", 0xD84A, [212], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_gregory", 0xD84A, [212], true);
            mapper.AssertAreEqual("event_flags.beat_gentleman_virgil", 0xD84A, [212], false);
            mapper.AssertAreEqual("event_flags.beat_gentleman_alfred", 0xD84A, [212], true);
            mapper.AssertAreEqual("event_flags.beat_scientist_ross", 0xD84A, [212], true);
            mapper.AssertAreEqual("event_flags.beat_scientist_mitch", 0xD84B, [175], true);
            mapper.AssertAreEqual("event_flags.beat_scientist_jed", 0xD84B, [175], true);
            mapper.AssertAreEqual("event_flags.beat_scientist_marc", 0xD84B, [175], true);
            mapper.AssertAreEqual("event_flags.beat_scientist_rich", 0xD84B, [175], true);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kenji2", 0xD84B, [175], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_yoshi", 0xD84B, [175], true);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kenji3", 0xD84B, [175], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_lao", 0xD84B, [175], true);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_nob", 0xD84C, [101], true);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kiyo", 0xD84C, [101], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_lung", 0xD84C, [101], true);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_kenji", 0xD84C, [101], false);
            mapper.AssertAreEqual("event_flags.beat_blackbelt_wai", 0xD84C, [101], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_victoria", 0xD84C, [101], true);
            mapper.AssertAreEqual("event_flags.beat_beauty_samantha", 0xD84C, [101], true);
            mapper.AssertAreEqual("event_flags.beat_beauty_julie", 0xD84C, [101], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_jaclyn", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_brenda", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_cassie", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_caroline", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_carlene", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_jessica", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_rachael", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_angelica", 0xD84D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_kendra", 0xD84E, [228], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_veronica", 0xD84E, [228], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_julia", 0xD84E, [228], true);
            mapper.AssertAreEqual("event_flags.beat_beauty_theresa", 0xD84E, [228], false);
            mapper.AssertAreEqual("event_flags.beat_beauty_valerie", 0xD84E, [228], false);
            mapper.AssertAreEqual("event_flags.beat_falkner", 0xD84E, [228], true);
            mapper.AssertAreEqual("event_flags.beat_bugsy", 0xD84E, [228], true);
            mapper.AssertAreEqual("event_flags.beat_whitney", 0xD84E, [228], true);
            mapper.AssertAreEqual("event_flags.beat_morty", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_jasmine", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_chuck", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_pryce", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_clair", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_brock", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_misty", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_ltsurge", 0xD84F, [255], true);
            mapper.AssertAreEqual("event_flags.beat_erika", 0xD850, [95], true);
            mapper.AssertAreEqual("event_flags.beat_janine", 0xD850, [95], true);
            mapper.AssertAreEqual("event_flags.beat_sabrina", 0xD850, [95], true);
            mapper.AssertAreEqual("event_flags.beat_blaine", 0xD850, [95], true);
            mapper.AssertAreEqual("event_flags.beat_blue", 0xD850, [95], true);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_william", 0xD850, [95], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_derek", 0xD850, [95], true);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_robert", 0xD850, [95], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_joshua", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_carter", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_trevor", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_brandon", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_jeremy", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_colin", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_derek2", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_derek3", 0xD851, [0], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanm_alex", 0xD852, [132], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_beverly", 0xD852, [132], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_ruth", 0xD852, [132], true);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_beverly2", 0xD852, [132], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_beverly3", 0xD852, [132], false);
            mapper.AssertAreEqual("event_flags.beat_pokefanf_georgia", 0xD852, [132], false);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_naoko", 0xD852, [132], true);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_sayo", 0xD853, [31], true);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_zuki", 0xD853, [31], true);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_kuni", 0xD853, [31], true);
            mapper.AssertAreEqual("event_flags.beat_kimono_girl_miki", 0xD853, [31], true);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_larry", 0xD853, [31], true);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_andrew", 0xD853, [31], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_calvin", 0xD853, [31], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_shane", 0xD853, [31], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_ben", 0xD854, [196], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_brent", 0xD854, [196], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_ron", 0xD854, [196], true);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_ethan", 0xD854, [196], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_brent2", 0xD854, [196], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_brent3", 0xD854, [196], false);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_issac", 0xD854, [196], true);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_donald", 0xD854, [196], true);
            mapper.AssertAreEqual("event_flags.beat_pokemaniac_zach", 0xD855, [222], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_1", 0xD855, [222], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_2", 0xD855, [222], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_3", 0xD855, [222], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_4", 0xD855, [222], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_5", 0xD855, [222], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_6", 0xD855, [222], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_7", 0xD855, [222], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_8", 0xD856, [238], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_9", 0xD856, [238], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_10", 0xD856, [238], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_11", 0xD856, [238], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_12", 0xD856, [238], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_13", 0xD856, [238], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_14", 0xD856, [238], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_15", 0xD856, [238], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_16", 0xD857, [14], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_17", 0xD857, [14], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_18", 0xD857, [14], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_19", 0xD857, [14], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_20", 0xD857, [14], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_21", 0xD857, [14], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_22", 0xD857, [14], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_23", 0xD857, [14], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_24", 0xD858, [51], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_25", 0xD858, [51], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_26", 0xD858, [51], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_27", 0xD858, [51], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_28", 0xD858, [51], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_29", 0xD858, [51], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_30", 0xD858, [51], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntm_31", 0xD858, [51], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_1", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_2", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_3", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_4", 0xD859, [247], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_gruntf_5", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_lass_carrie", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_lass_bridget", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_lass_alice", 0xD859, [247], true);
            mapper.AssertAreEqual("event_flags.beat_lass_krise", 0xD85A, [190], false);
            mapper.AssertAreEqual("event_flags.beat_lass_connie", 0xD85A, [190], true);
            mapper.AssertAreEqual("event_flags.beat_lass_linda", 0xD85A, [190], true);
            mapper.AssertAreEqual("event_flags.beat_lass_laura", 0xD85A, [190], true);
            mapper.AssertAreEqual("event_flags.beat_lass_shannon", 0xD85A, [190], true);
            mapper.AssertAreEqual("event_flags.beat_lass_michelle", 0xD85A, [190], true);
            mapper.AssertAreEqual("event_flags.beat_lass_dana", 0xD85A, [190], false);
            mapper.AssertAreEqual("event_flags.beat_lass_ellen", 0xD85A, [190], true);
            mapper.AssertAreEqual("event_flags.beat_lass_connie2", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_lass_connie3", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_lass_dana2", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_lass_dana3", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_anthony2", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_russell", 0xD85B, [32], true);
            mapper.AssertAreEqual("event_flags.beat_hiker_phillip", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_leonard", 0xD85B, [32], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_anthony", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_benjamin", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_erik", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_michael", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_parry", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_timothy", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_bailey", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_anthony3", 0xD85C, [0], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_tim", 0xD85D, [33], true);
            mapper.AssertAreEqual("event_flags.beat_hiker_noland", 0xD85D, [33], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_sidney", 0xD85D, [33], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_kenny", 0xD85D, [33], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_jim", 0xD85D, [33], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_daniel", 0xD85D, [33], true);
            mapper.AssertAreEqual("event_flags.beat_hiker_parry2", 0xD85D, [33], false);
            mapper.AssertAreEqual("event_flags.beat_hiker_parry3", 0xD85D, [33], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_don", 0xD85E, [245], true);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_rob", 0xD85E, [245], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_ed", 0xD85E, [245], true);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wade", 0xD85E, [245], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_benny", 0xD85E, [245], true);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_al", 0xD85E, [245], true);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_josh", 0xD85E, [245], true);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_arnie", 0xD85E, [245], true);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_ken", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wade2", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_wade3", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_doug", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_arnie2", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_bug_catcher_arnie3", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_officer_keith", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_officer_dirk", 0xD85F, [0], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_nick", 0xD860, [28], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_aaron", 0xD860, [28], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_paul", 0xD860, [28], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_cody", 0xD860, [28], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_mike", 0xD860, [28], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_gaven2", 0xD860, [28], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_gaven3", 0xD860, [28], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_ryan", 0xD860, [28], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_jake", 0xD861, [7], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_gaven", 0xD861, [7], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_blake", 0xD861, [7], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_brian", 0xD861, [7], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_erick", 0xD861, [7], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_andy", 0xD861, [7], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_tyler", 0xD861, [7], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_sean", 0xD861, [7], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_kevin", 0xD862, [96], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_steve", 0xD862, [96], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerm_allen", 0xD862, [96], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_gwen", 0xD862, [96], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_lois", 0xD862, [96], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_fran", 0xD862, [96], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_lola", 0xD862, [96], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_kate", 0xD862, [96], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_irene", 0xD863, [40], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_kelly", 0xD863, [40], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_joyce", 0xD863, [40], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_beth", 0xD863, [40], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_reena", 0xD863, [40], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_megan", 0xD863, [40], true);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_beth2", 0xD863, [40], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_carol", 0xD863, [40], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_quinn", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_emma", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_cybil", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_jenn", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_beth3", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_reena2", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_cooltrainerf_reena3", 0xD864, [128], false);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivef_1", 0xD864, [128], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivef_2", 0xD865, [63], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_1", 0xD865, [63], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_2", 0xD865, [63], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_3", 0xD865, [63], true);
            mapper.AssertAreEqual("event_flags.beat_rocket_executivem_4", 0xD865, [63], true);
            mapper.AssertAreEqual("event_flags.beat_sailor_eugene", 0xD865, [63], true);
            mapper.AssertAreEqual("event_flags.beat_sailor_huey", 0xD865, [63], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_terrell", 0xD865, [63], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_kent", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_ernest", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_jeff", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_garrett", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_kenneth", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_stanly", 0xD866, [32], true);
            mapper.AssertAreEqual("event_flags.beat_sailor_harry", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_huey2", 0xD866, [32], false);
            mapper.AssertAreEqual("event_flags.beat_sailor_huey3", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_eric_unused", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_eric", 0xD867, [4], true);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_gregg", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_jay", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beay_super_nerd_dave", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_sam", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_tom", 0xD867, [4], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_pat", 0xD868, [29], true);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_shawn", 0xD868, [29], false);
            mapper.AssertAreEqual("event_flags.beat_super_nerd_teru", 0xD868, [29], true);
            mapper.AssertAreEqual("event_flags.beat_medium_martha", 0xD868, [29], true);
            mapper.AssertAreEqual("event_flags.beat_medium_grace", 0xD868, [29], true);
            mapper.AssertAreEqual("event_flags.beat_medium_bethany", 0xD868, [29], false);
            mapper.AssertAreEqual("event_flags.beat_medium_margret", 0xD868, [29], false);
            mapper.AssertAreEqual("event_flags.beat_medium_ethel", 0xD868, [29], false);
            mapper.AssertAreEqual("event_flags.beat_medium_rebecca", 0xD869, [15], true);
            mapper.AssertAreEqual("event_flags.beat_medium_doris", 0xD869, [15], true);
            mapper.AssertAreEqual("event_flags.beat_skier_roxanne", 0xD869, [15], true);
            mapper.AssertAreEqual("event_flags.beat_skier_clarissa", 0xD869, [15], true);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_harold", 0xD869, [15], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_simon", 0xD869, [15], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_randall", 0xD869, [15], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_charlie", 0xD869, [15], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_george", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_berke", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_kirk", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_mathew", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_hal", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_paton", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_daryl", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_walter", 0xD86A, [0], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_tony", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_jerome", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_tucker", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_rick", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_cameron", 0xD86B, [16], true);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_seth", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_james", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_lewis", 0xD86B, [16], false);
            mapper.AssertAreEqual("event_flags.beat_swimmerm_parker", 0xD86C, [31], true);
            mapper.AssertAreEqual("event_flags.beat_youngster_joey", 0xD86C, [31], true);
            mapper.AssertAreEqual("event_flags.beat_youngster_mikey", 0xD86C, [31], true);
            mapper.AssertAreEqual("event_flags.beat_youngster_albert", 0xD86C, [31], true);
            mapper.AssertAreEqual("event_flags.beat_youngster_gordon", 0xD86C, [31], true);
            mapper.AssertAreEqual("event_flags.beat_youngster_samuel", 0xD86C, [31], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_ian", 0xD86C, [31], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_joey2", 0xD86C, [31], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_joey3", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_warren", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_jimmy", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_owen", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_youngster_jason", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_teacher_colette", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_teacher_hillary", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_teacher_shirley", 0xD86D, [0], false);
            mapper.AssertAreEqual("event_flags.beat_elite_4_will", 0xD86E, [31], true);
            mapper.AssertAreEqual("event_flags.beat_elite_4_koga", 0xD86E, [31], true);
            mapper.AssertAreEqual("event_flags.beat_elite_4_bruno", 0xD86E, [31], true);
            mapper.AssertAreEqual("event_flags.beat_elite_4_karen", 0xD86E, [31], true);
            mapper.AssertAreEqual("event_flags.beat_champion_lance", 0xD86E, [31], true);
            mapper.AssertAreEqual("event_flags.cyndaquil_pokeball_in_elms_lab", 0xD87F, [22], false);
            mapper.AssertAreEqual("event_flags.totodile_pokeball_in_elms_lab", 0xD87F, [22], true);
            mapper.AssertAreEqual("event_flags.chikorita_pokeball_in_elms_lab", 0xD87F, [22], true);
            mapper.AssertAreEqual("event_flags.violet_city_pp_up", 0xD87F, [22], false);
            mapper.AssertAreEqual("event_flags.violet_city_rare_candy", 0xD87F, [22], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_max_ether", 0xD87F, [22], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_tm_detect", 0xD87F, [22], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_1f_parlyz_heal", 0xD87F, [22], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_2f_x_defend", 0xD880, [136], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_3f_potion", 0xD880, [136], false);
            mapper.AssertAreEqual("event_flags.sprout_tower_3f_escape_rope", 0xD880, [136], false);
            mapper.AssertAreEqual("event_flags.tin_tower_3f_full_heal", 0xD880, [136], true);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_ultra_ball", 0xD880, [136], false);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_super_potion", 0xD880, [136], false);
            mapper.AssertAreEqual("event_flags.tin_tower_4f_escape_rope", 0xD880, [136], false);
            mapper.AssertAreEqual("event_flags.tin_tower_5f_rare_candy", 0xD880, [136], true);
            mapper.AssertAreEqual("event_flags.tin_tower_7f_max_revive", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_8f_nugget", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_8f_max_elixer", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.tin_tower_8f_full_restore", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_x_speed", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_1f_burn_heal", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_hp_up", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_tm_endure", 0xD881, [0], false);
            mapper.AssertAreEqual("event_flags.national_park_parlyz_heal", 0xD882, [82], false);
            mapper.AssertAreEqual("event_flags.national_park_tm_dig", 0xD882, [82], true);
            mapper.AssertAreEqual("event_flags.union_cave_1f_great_ball", 0xD882, [82], false);
            mapper.AssertAreEqual("event_flags.union_cave_1f_potion", 0xD882, [82], false);
            mapper.AssertAreEqual("event_flags.union_cave_1f_x_attack", 0xD882, [82], true);
            mapper.AssertAreEqual("event_flags.union_cave_1f_awakening", 0xD882, [82], false);
            mapper.AssertAreEqual("event_flags.union_cave_b1f_tm_swift", 0xD882, [82], true);
            mapper.AssertAreEqual("event_flags.union_cave_b1f_x_defend", 0xD882, [82], false);
            mapper.AssertAreEqual("event_flags.union_cave_b2f_elixer", 0xD883, [52], false);
            mapper.AssertAreEqual("event_flags.union_cave_b2f_hyper_potion", 0xD883, [52], false);
            mapper.AssertAreEqual("event_flags.slowpoke_well_b1f_super_potion", 0xD883, [52], true);
            mapper.AssertAreEqual("event_flags.slowpoke_well_b2f_tm_rain_dance", 0xD883, [52], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_3f_ether", 0xD883, [52], true);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_rare_candy", 0xD883, [52], true);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_great_ball", 0xD883, [52], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_5f_tm_swagger", 0xD883, [52], false);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_6f_super_potion", 0xD884, [132], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_hyper_potion", 0xD884, [132], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_nugget", 0xD884, [132], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b1f_x_accuracy", 0xD884, [132], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_tm_thief", 0xD884, [132], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_full_heal", 0xD884, [132], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_dire_hit", 0xD884, [132], false);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_protein", 0xD884, [132], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_ice_heal", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.ilex_forest_revive", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_coin_case", 0xD885, [4], true);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_smoke_ball", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_switch_room_entrances_full_heal", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_ether", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_amulet_coin", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_burn_heal", 0xD885, [4], false);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_b1f_ultra_ball", 0xD886, [6], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_max_ether", 0xD886, [6], true);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_warehouse_tm_sleep_talk", 0xD886, [6], true);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_outside_ether", 0xD886, [6], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_outside_revive", 0xD886, [6], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_escape_rope", 0xD886, [6], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_max_revive", 0xD886, [6], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_1f_inside_hyper_potion", 0xD886, [6], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_max_potion", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_rare_candy", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_tm_defense_curl", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_dragon_scale", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_elixer", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_2f_inside_escape_rope", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_hyper_potion", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.mount_mortar_b1f_full_heal", 0xD887, [0], false);
            mapper.AssertAreEqual("event_flags.got_hm07_waterfall", 0xD888, [41], true);
            mapper.AssertAreEqual("event_flags.ice_path_1f_pp_up", 0xD888, [41], false);
            mapper.AssertAreEqual("event_flags.ice_path_b1f_iron", 0xD888, [41], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_mahogany_side_full_heal", 0xD888, [41], true);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_mahogany_side_max_potion", 0xD888, [41], false);
            mapper.AssertAreEqual("event_flags.ice_path_b2f_blackthorn_side_tm_rest", 0xD888, [41], true);
            mapper.AssertAreEqual("event_flags.ice_path_b3f_nevermeltice", 0xD888, [41], false);
            mapper.AssertAreEqual("event_flags.whirl_island_ne_ultra_ball", 0xD888, [41], false);
            mapper.AssertAreEqual("event_flags.whirl_island_sw_guard_spec", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_full_restore", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_carbos", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_calcium", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_nugget", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b1f_escape_rope", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b2f_full_restore", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b2f_max_revive", 0xD889, [0], false);
            mapper.AssertAreEqual("event_flags.whirl_island_b2f_max_elixer", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_max_elixer", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_x_accuracy", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_room_1_escape_rope", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_item_rooms_max_revive", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.silver_cave_item_rooms_full_restore", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_potion", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_full_heal", 0xD88A, [0], false);
            mapper.AssertAreEqual("event_flags.dark_cave_violet_entrance_hyper_potion", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.dark_cave_blackthorn_entrance_revive", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.dark_cave_blackthorn_entrance_tm_snore", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.victory_road_tm_earthquake", 0xD88B, [8], true);
            mapper.AssertAreEqual("event_flags.victory_road_max_revive", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.victory_road_full_restore", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.victory_road_full_heal", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.victory_road_x_special", 0xD88B, [8], false);
            mapper.AssertAreEqual("event_flags.dragons_den_b1f_dragon_fang", 0xD88C, [209], true);
            mapper.AssertAreEqual("event_flags.tohjo_falls_moon_stone", 0xD88C, [209], false);
            mapper.AssertAreEqual("event_flags.route_26_max_elixer", 0xD88C, [209], false);
            mapper.AssertAreEqual("event_flags.route_27_tm_solarbeam", 0xD88C, [209], false);
            mapper.AssertAreEqual("event_flags.route_27_rare_candy", 0xD88C, [209], true);
            mapper.AssertAreEqual("event_flags.route_29_potion", 0xD88C, [209], false);
            mapper.AssertAreEqual("event_flags.route_31_antidote", 0xD88C, [209], true);
            mapper.AssertAreEqual("event_flags.route_31_poke_ball", 0xD88C, [209], true);
            mapper.AssertAreEqual("event_flags.route_32_great_ball", 0xD88D, [34], false);
            mapper.AssertAreEqual("event_flags.route_32_potion", 0xD88D, [34], true);
            mapper.AssertAreEqual("event_flags.route_35_tm_rollout", 0xD88D, [34], false);
            mapper.AssertAreEqual("event_flags.route_42_ultra_ball", 0xD88D, [34], false);
            mapper.AssertAreEqual("event_flags.route_42_super_potion", 0xD88D, [34], false);
            mapper.AssertAreEqual("event_flags.route_43_max_ether", 0xD88D, [34], true);
            mapper.AssertAreEqual("event_flags.route_44_max_revive", 0xD88D, [34], false);
            mapper.AssertAreEqual("event_flags.route_44_ultra_ball", 0xD88D, [34], false);
            mapper.AssertAreEqual("event_flags.route_45_x_special", 0xD88E, [224], false);
            mapper.AssertAreEqual("event_flags.route_45_revive", 0xD88E, [224], false);
            mapper.AssertAreEqual("event_flags.route_45_elixer", 0xD88E, [224], false);
            mapper.AssertAreEqual("event_flags.route_45_max_potion", 0xD88E, [224], false);
            mapper.AssertAreEqual("event_flags.route_46_dire_hit", 0xD88E, [224], false);
            mapper.AssertAreEqual("event_flags.rival_new_bark_town", 0xD88E, [224], true);
            mapper.AssertAreEqual("event_flags.rival_cherrygrove_city", 0xD88E, [224], true);
            mapper.AssertAreEqual("event_flags.rival_azalea_town", 0xD88E, [224], true);
            mapper.AssertAreEqual("event_flags.rival_team_rocket_base", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.rival_goldenrod_underground", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.rival_victory_road", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.rival_olivine_city", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.rival_sprout_tower", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.rival_burned_tower", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.rival_dragons_den", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.players_house_mom_1", 0xD88F, [255], true);
            mapper.AssertAreEqual("event_flags.players_house_mom_2", 0xD890, [122], false);
            mapper.AssertAreEqual("event_flags.mr_pokemons_house_oak", 0xD890, [122], true);
            mapper.AssertAreEqual("event_flags.violet_city_earl", 0xD890, [122], false);
            mapper.AssertAreEqual("event_flags.earls_academy_earl", 0xD890, [122], true);
            mapper.AssertAreEqual("event_flags.goldenrod_city_rocket_scout", 0xD890, [122], true);
            mapper.AssertAreEqual("event_flags.goldenrod_city_rocket_takeover", 0xD890, [122], true);
            mapper.AssertAreEqual("event_flags.radio_tower_rocket_takeover", 0xD890, [122], true);
            mapper.AssertAreEqual("event_flags.goldenrod_city_civilians", 0xD890, [122], false);
            mapper.AssertAreEqual("event_flags.radio_tower_civilians_after", 0xD891, [246], false);
            mapper.AssertAreEqual("event_flags.radio_tower_blackbelt_blocks_stairs", 0xD891, [246], true);
            mapper.AssertAreEqual("event_flags.olivine_lighthouse_jasmine", 0xD891, [246], true);
            mapper.AssertAreEqual("event_flags.olivine_gym_jasmine", 0xD891, [246], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_lance", 0xD891, [246], true);
            mapper.AssertAreEqual("event_flags.mahogany_mart_lance_and_dragonite", 0xD891, [246], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_lance", 0xD891, [246], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_lance_passwords", 0xD891, [246], true);
            mapper.AssertAreEqual("event_flags.dragons_den_clair", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_security_grunts", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_population", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b3f_executive", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.route_43_gate_rockets", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_executive", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_grunt_with_executive", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_dragonite", 0xD892, [255], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_electrode_1", 0xD893, [207], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_electrode_2", 0xD893, [207], true);
            mapper.AssertAreEqual("event_flags.team_rocket_base_b2f_electrode_3", 0xD893, [207], true);
            mapper.AssertAreEqual("event_flags.blackthorn_city_super_nerd_blocks_gym", 0xD893, [207], true);
            mapper.AssertAreEqual("event_flags.blackthorn_city_super_nerd_does_not_block_gym", 0xD893, [207], false);
            mapper.AssertAreEqual("event_flags.day_care_man_in_day_care", 0xD893, [207], false);
            mapper.AssertAreEqual("event_flags.day_care_man_on_route_34", 0xD893, [207], true);
            mapper.AssertAreEqual("event_flags.day_care_mon_1", 0xD893, [207], true);
            mapper.AssertAreEqual("event_flags.day_care_mon_2", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_1", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_2", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_3", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_4", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_5", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_6", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_7", 0xD894, [255], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_8", 0xD895, [31], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_9", 0xD895, [31], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_farfetchd_10", 0xD895, [31], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_apprentice", 0xD895, [31], true);
            mapper.AssertAreEqual("event_flags.ilex_forest_charcoal_master", 0xD895, [31], true);
            mapper.AssertAreEqual("event_flags.charcoal_kiln_farfetch_d", 0xD895, [31], false);
            mapper.AssertAreEqual("event_flags.charcoal_kiln_apprentice", 0xD895, [31], false);
            mapper.AssertAreEqual("event_flags.charcoal_kiln_boss", 0xD895, [31], false);
            mapper.AssertAreEqual("event_flags.route_36_sudowoodo", 0xD896, [157], true);
            mapper.AssertAreEqual("event_flags.azalea_town_slowpokes", 0xD896, [157], false);
            mapper.AssertAreEqual("event_flags.azalea_town_slowpoketail_rocket", 0xD896, [157], true);
            mapper.AssertAreEqual("event_flags.slowpoke_well_slowpokes", 0xD896, [157], true);
            mapper.AssertAreEqual("event_flags.slowpoke_well_rockets", 0xD896, [157], true);
            mapper.AssertAreEqual("event_flags.kurts_house_slowpoke", 0xD896, [157], false);
            mapper.AssertAreEqual("event_flags.guide_gent_in_his_house", 0xD896, [157], false);
            mapper.AssertAreEqual("event_flags.guide_gent_visible_in_cherrygrove", 0xD896, [157], true);
            mapper.AssertAreEqual("event_flags.elms_aide_in_violet_pokemon_center", 0xD897, [93], true);
            mapper.AssertAreEqual("event_flags.elms_aide_in_lab", 0xD897, [93], false);
            mapper.AssertAreEqual("event_flags.cop_in_elms_lab", 0xD897, [93], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_outside_scientist", 0xD897, [93], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_research_center_scientist", 0xD897, [93], true);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_inner_chamber_tourists", 0xD897, [93], false);
            mapper.AssertAreEqual("event_flags.boulder_in_blackthorn_gym_1", 0xD897, [93], true);
            mapper.AssertAreEqual("event_flags.boulder_in_blackthorn_gym_2", 0xD897, [93], false);
            mapper.AssertAreEqual("event_flags.boulder_in_blackthorn_gym_3", 0xD898, [31], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_1", 0xD898, [31], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_2", 0xD898, [31], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_3", 0xD898, [31], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_4", 0xD898, [31], true);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_1a", 0xD898, [31], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_2a", 0xD898, [31], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_3a", 0xD898, [31], false);
            mapper.AssertAreEqual("event_flags.boulder_in_ice_path_4a", 0xD899, [218], false);
            mapper.AssertAreEqual("event_flags.mystery_gift_delivery_guy", 0xD899, [218], true);
            mapper.AssertAreEqual("event_flags.met_bill", 0xD899, [218], false);
            mapper.AssertAreEqual("event_flags.ecruteak_poke_center_bill", 0xD899, [218], true);
            mapper.AssertAreEqual("event_flags.route_30_battle", 0xD899, [218], true);
            mapper.AssertAreEqual("event_flags.route_30_youngster_joey", 0xD899, [218], false);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_1a", 0xD899, [218], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_2a", 0xD899, [218], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_3a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_4a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_5a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_6a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_7a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_8a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_9a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_10a", 0xD89A, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_1b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_2b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_3b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_4b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_5b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_6b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_7b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_8b", 0xD89B, [255], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_9b", 0xD89C, [115], true);
            mapper.AssertAreEqual("event_flags.bug_catching_contestant_10b", 0xD89C, [115], true);
            mapper.AssertAreEqual("event_flags.olivine_port_sailor_at_gangway", 0xD89C, [115], false);
            mapper.AssertAreEqual("event_flags.vermilion_port_sailor_at_gangway", 0xD89C, [115], false);
            mapper.AssertAreEqual("event_flags.fast_ship_1f_gentleman", 0xD89C, [115], true);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_nnw_nne_ne_sailor", 0xD89C, [115], true);
            mapper.AssertAreEqual("event_flags.fast_ship_b1f_sailor_left", 0xD89C, [115], true);
            mapper.AssertAreEqual("event_flags.fast_ship_b1f_sailor_right", 0xD89C, [115], false);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_se_sse_gentleman", 0xD89D, [135], true);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_se_sse_captains_cabin_twin_1", 0xD89D, [135], true);
            mapper.AssertAreEqual("event_flags.fast_ship_cabins_se_sse_captains_cabin_twin_2", 0xD89D, [135], true);
            mapper.AssertAreEqual("event_flags.olivine_port_passage_pokefan_m", 0xD89D, [135], false);
            mapper.AssertAreEqual("event_flags.route_35_national_park_gate_youngster", 0xD89D, [135], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_civilians", 0xD89D, [135], false);
            mapper.AssertAreEqual("event_flags.mahogany_mart_owners", 0xD89D, [135], false);
            mapper.AssertAreEqual("event_flags.olivine_port_sprites_before_hall_of_fame", 0xD89D, [135], true);
            mapper.AssertAreEqual("event_flags.olivine_port_sprites_after_hall_of_fame", 0xD89E, [190], false);
            mapper.AssertAreEqual("event_flags.fast_ship_passengers_first_trip", 0xD89E, [190], true);
            mapper.AssertAreEqual("event_flags.fast_ship_passengers_eastbound", 0xD89E, [190], true);
            mapper.AssertAreEqual("event_flags.fast_ship_passengers_westbound", 0xD89E, [190], true);
            mapper.AssertAreEqual("event_flags.tin_tower_roof_ho_oh", 0xD89E, [190], true);
            mapper.AssertAreEqual("event_flags.whirl_island_lugia_chamber_lugia", 0xD89E, [190], true);
            mapper.AssertAreEqual("event_flags.kurts_house_kurt_1", 0xD89E, [190], false);
            mapper.AssertAreEqual("event_flags.kurts_house_kurt_2", 0xD89E, [190], true);
            mapper.AssertAreEqual("event_flags.slowpoke_well_kurt", 0xD89F, [159], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_console", 0xD89F, [159], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_doll_1", 0xD89F, [159], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_doll_2", 0xD89F, [159], true);
            mapper.AssertAreEqual("event_flags.players_house_2f_big_doll", 0xD89F, [159], true);
            mapper.AssertAreEqual("event_flags.route_35_national_park_gate_officer_contest_day", 0xD89F, [159], false);
            mapper.AssertAreEqual("event_flags.route_35_national_park_gate_officer_not_contest_day", 0xD89F, [159], false);
            mapper.AssertAreEqual("event_flags.route_36_national_park_gate_officer_contest_day", 0xD89F, [159], true);
            mapper.AssertAreEqual("event_flags.route_36_national_park_gate_officer_not_contest_day", 0xD8A0, [148], false);
            mapper.AssertAreEqual("event_flags.goldenrod_train_station_gentleman", 0xD8A0, [148], false);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_beasts_1", 0xD8A0, [148], true);
            mapper.AssertAreEqual("event_flags.burned_tower_b1f_beasts_2", 0xD8A0, [148], false);
            mapper.AssertAreEqual("event_flags.blackthorn_city_gramps_blocks_dragons_den", 0xD8A0, [148], true);
            mapper.AssertAreEqual("event_flags.blackthorn_city_gramps_not_blocking_dragons_den", 0xD8A0, [148], false);
            mapper.AssertAreEqual("event_flags.ruins_of_alph_kabuto_chamber_receptionist", 0xD8A0, [148], false);
            mapper.AssertAreEqual("event_flags.opened_mt_silver", 0xD8A0, [148], true);
            mapper.AssertAreEqual("event_flags.fought_snorlax", 0xD8A1, [219], true);
            mapper.AssertAreEqual("event_flags.lake_of_rage_red_gyarados", 0xD8A1, [219], true);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_granny", 0xD8A1, [219], false);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_gramps", 0xD8A1, [219], true);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_older_haircut_brother", 0xD8A1, [219], true);
            mapper.AssertAreEqual("event_flags.goldenrod_underground_younger_haircut_brother", 0xD8A1, [219], false);
            mapper.AssertAreEqual("event_flags.mahogany_town_pokefan_m_blocks_east", 0xD8A1, [219], true);
            mapper.AssertAreEqual("event_flags.mahogany_town_pokefan_m_blocks_gym", 0xD8A1, [219], true);
            mapper.AssertAreEqual("event_flags.route_32_frieda_of_friday", 0xD8A2, [119], true);
            mapper.AssertAreEqual("event_flags.route_29_tuscany_of_tuesday", 0xD8A2, [119], true);
            mapper.AssertAreEqual("event_flags.route_36_arthur_of_thursday", 0xD8A2, [119], true);
            mapper.AssertAreEqual("event_flags.route_37_sunny_of_sunday", 0xD8A2, [119], false);
            mapper.AssertAreEqual("event_flags.lake_of_rage_wesley_of_wednesday", 0xD8A2, [119], true);
            mapper.AssertAreEqual("event_flags.blackthorn_city_santos_of_saturday", 0xD8A2, [119], true);
            mapper.AssertAreEqual("event_flags.route_40_monica_of_monday", 0xD8A2, [119], true);
            mapper.AssertAreEqual("event_flags.lances_room_oak_and_mary", 0xD8A2, [119], false);
            mapper.AssertAreEqual("event_flags.union_cave_b2f_lapras", 0xD8A3, [102], false);
            mapper.AssertAreEqual("event_flags.team_rocket_disbanded", 0xD8A3, [102], true);
            mapper.AssertAreEqual("event_flags.red_in_mt_silver", 0xD8A3, [102], true);
            mapper.AssertAreEqual("event_flags.goldenrod_dept_store_5f_happiness_lady", 0xD8A3, [102], false);
            mapper.AssertAreEqual("event_flags.burned_tower_firebreather_dick_normal", 0xD8A3, [102], false);
            mapper.AssertAreEqual("event_flags.burned_tower_firebreather_dick_ashes", 0xD8A3, [102], true);
            mapper.AssertAreEqual("event_flags.ecruteak_tin_tower_entrance_sage_left", 0xD8A3, [102], true);
            mapper.AssertAreEqual("event_flags.ecruteak_tin_tower_entrance_sage_right", 0xD8A3, [102], false);
            mapper.AssertAreEqual("event_flags.route_24_rocket", 0xD8A4, [112], true);
            mapper.AssertAreEqual("event_flags.cerulean_gym_rocket", 0xD8A4, [112], true);
            mapper.AssertAreEqual("event_flags.route_25_misty_boyfriend", 0xD8A4, [112], true);
            mapper.AssertAreEqual("event_flags.trainers_in_cerulean_gym", 0xD8A4, [112], false);
            mapper.AssertAreEqual("event_flags.vermilion_city_snorlax", 0xD8A5, [43], true);
            mapper.AssertAreEqual("event_flags.route_5_6_pokefan_m_blocks_underground_path", 0xD8A5, [43], true);
            mapper.AssertAreEqual("event_flags.saffron_train_station_population", 0xD8A5, [43], false);
            mapper.AssertAreEqual("event_flags.copycats_house_2f_doll", 0xD8A5, [43], true);
            mapper.AssertAreEqual("event_flags.vermilion_fan_club_doll", 0xD8A5, [43], false);
            mapper.AssertAreEqual("event_flags.blue_in_cinnabar", 0xD8A5, [43], true);
            mapper.AssertAreEqual("event_flags.viridian_gym_blue", 0xD8A5, [43], false);
            mapper.AssertAreEqual("event_flags.seafoam_gym_gym_guide", 0xD8A5, [43], false);
            mapper.AssertAreEqual("event_flags.mt_moon_square_rock", 0xD8A6, [26], false);
            mapper.AssertAreEqual("event_flags.mt_moon_square_clefairy", 0xD8A6, [26], true);
            mapper.AssertAreEqual("event_flags.mt_moon_rival", 0xD8A6, [26], false);
            mapper.AssertAreEqual("event_flags.indigo_plateau_pokecenter_rival", 0xD8A6, [26], true);
            mapper.AssertAreEqual("event_flags.teleport_guy", 0xD8A6, [26], true);
            mapper.AssertAreEqual("event_flags.picked_up_focus_band", 0xD8A6, [26], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_elixer", 0xD8A6, [26], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_1f_tm_steel_wing", 0xD8A6, [26], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_iron", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_pp_up", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.rock_tunnel_b1f_revive", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_dire_hit", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_max_potion", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_carbos", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.route_2_elixer", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.route_4_hp_up", 0xD8A7, [0], false);
            mapper.AssertAreEqual("event_flags.route_12_calcium", 0xD8A8, [0], false);
            mapper.AssertAreEqual("event_flags.route_12_nugget", 0xD8A8, [0], false);
            mapper.AssertAreEqual("event_flags.route_15_pp_up", 0xD8A8, [0], false);
            mapper.AssertAreEqual("event_flags.route_25_protein", 0xD8A8, [0], false);
            mapper.AssertAreEqual("roamers.roamers_current_map_index", 0xDD2F, [2], 2);
            mapper.AssertAreEqual("roamers.roamers_currnet_map_group", 0xDD30, [19], "Silver");
            mapper.AssertAreEqual("roamers.roamers_last_map_number", 0xDD31, [68], 68);
            mapper.AssertAreEqual("roamers.roamers_last_map_group", 0xDD32, [3], "Dungeons");
            mapper.AssertAreEqual("roamers.0.species", 0xDD1A, [0], null);
            mapper.AssertAreEqual("roamers.0.dex_number", 0xDD1A, [0], null);
            mapper.AssertAreEqual("roamers.0.level", 0xDD1B, [0], 0);
            mapper.AssertAreEqual("roamers.0.map_name", 0xDD1C, [255, 255], null);
            mapper.AssertAreEqual("roamers.0.map_group", 0xDD1C, [255], null);
            mapper.AssertAreEqual("roamers.0.map_index", 0xDD1D, [255], 255);
            mapper.AssertAreEqual("roamers.0.hp", 0xDD1E, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.attack", 0xDD1F, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.defense", 0xDD1F, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.speed", 0xDD20, [0], 0);
            mapper.AssertAreEqual("roamers.0.ivs.special", 0xDD20, [0], 0);
            mapper.AssertAreEqual("roamers.1.species", 0xDD21, [0], null);
            mapper.AssertAreEqual("roamers.1.dex_number", 0xDD21, [0], null);
            mapper.AssertAreEqual("roamers.1.level", 0xDD22, [0], 0);
            mapper.AssertAreEqual("roamers.1.map_name", 0xDD23, [255, 255], null);
            mapper.AssertAreEqual("roamers.1.map_group", 0xDD23, [255], null);
            mapper.AssertAreEqual("roamers.1.map_index", 0xDD24, [255], 255);
            mapper.AssertAreEqual("roamers.1.hp", 0xDD25, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.attack", 0xDD26, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.defense", 0xDD26, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.speed", 0xDD27, [0], 0);
            mapper.AssertAreEqual("roamers.1.ivs.special", 0xDD27, [0], 0);
            mapper.AssertAreEqual("roamers.2.species", 0xDD28, [0], null);
            mapper.AssertAreEqual("roamers.2.dex_number", 0xDD28, [0], null);
            mapper.AssertAreEqual("roamers.2.level", 0xDD29, [0], 0);
            mapper.AssertAreEqual("roamers.2.map_name", 0xDD2A, [255, 255], null);
            mapper.AssertAreEqual("roamers.2.map_group", 0xDD2A, [255], null);
            mapper.AssertAreEqual("roamers.2.map_index", 0xDD2B, [255], 255);
            mapper.AssertAreEqual("roamers.2.hp", 0xDD2C, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.attack", 0xDD2D, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.defense", 0xDD2D, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.speed", 0xDD2E, [0], 0);
            mapper.AssertAreEqual("roamers.2.ivs.special", 0xDD2E, [0], 0);
            mapper.AssertAreEqual("battle.mode", 0xD116, [1], "Wild");
            mapper.AssertAreEqual("battle.type", 0xD119, [0], "NORMAL");
            mapper.AssertAreEqual("battle.player.party_position", 0xCFC6, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0xCB0D, [146], "Leftovers");
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0xCB0C, [217], "Ursaring");
            mapper.AssertAreEqual("battle.player.active_pokemon.dex_number", 0xCB0C, [217], 217);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0xCB2A, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0xCB2B, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0xCB19, [76], 76);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0xCB1C, [1, 1], 257);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0xCB1E, [1, 1], 257);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0xCB20, [1, 16], 272);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0xCB22, [0, 168], 168);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0xCB24, [0, 160], 160);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0xCB26, [0, 191], 191);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0xCB28, [0, 170], 170);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0xCBAA, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0xCBAB, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0xCBAC, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0xCBAD, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0xCBAE, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0xCBAF, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0xCBB0, [7], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0xCB0E, [216], "Return");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0xCB14, [20], 20);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", 0xCB14, [20], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0xCB0F, [214], "Sleep Talk");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0xCB15, [10], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", 0xCB15, [10], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0xCB10, [182], "Protect");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0xCB16, [9], 9);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", 0xCB16, [9], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0xCB11, [156], "Rest");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0xCB17, [9], 9);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", 0xCB17, [9], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.confused", 0xC66A, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.toxic", 0xC66C, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.leech_seed", 0xC66B, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.curse", 0xC668, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.in_love", 0xC668, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.volatile_status_conditions.nightmare", 0xC668, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.protect", 0xC668, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.identified", 0xC668, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.perish", 0xC668, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.endure", 0xC668, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rollout", 0xC668, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.curled", 0xC669, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bide", 0xC66A, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rampage", 0xC66A, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.in_loop", 0xC66A, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.flinched", 0xC66A, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.charged", 0xC66A, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.underground", 0xC66A, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.flying", 0xC66A, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.bypass_accuracy", 0xC66B, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.mist", 0xC66B, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.focus_energy", 0xC66B, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.substitute", 0xC66B, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.recharge", 0xC66B, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.rage", 0xC66B, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.transformed", 0xC66C, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.encored", 0xC66C, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.lock_on", 0xC66C, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.destiny_bond", 0xC66C, [122], true);
            mapper.AssertAreEqual("battle.player.active_pokemon.effects.cant_run", 0xC66C, [122], false);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.rollout", 0xCB50, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.confuse", 0xCB51, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.toxic", 0xCB52, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.disable", 0xCB53, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.encore", 0xCB54, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.perish", 0xCB55, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.fury_cutter", 0xCB56, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.counters.protect", 0xCB57, [0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0xD118, [0, 0, 0, 0, 0, 0, 8, 0, 77, 50, 85], "      ");
            mapper.AssertAreEqual("battle.opponent.trainer", 0xD22F, [0], null);
            mapper.AssertAreEqual("battle.opponent.id", 0xD231, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team_count", 0xDD55, [6], 6);
            mapper.AssertAreEqual("battle.opponent.party_position", 0xCB41, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0xD0EF, [77], "Ponyta");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.dex_number", 0xD0EF, [77], 77);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0xD127, [20], "Fire");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0xD128, [20], "Fire");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0xD0F0, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0xD0FC, [42], 42);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0xD0FD, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0xD0F1, [52], "Ember");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0xD0F7, [25], 25);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", 0xD0F7, [25], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0xD0F2, [23], "Stomp");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0xD0F8, [19], 19);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", 0xD0F8, [19], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0xD0F3, [83], "Fire Spin");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0xD0F9, [14], 14);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", 0xD0F9, [14], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0xD0F4, [36], "Take Down");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0xD0FA, [20], 20);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", 0xD0FA, [20], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0xD0FF, [0, 104], 104);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0xD101, [0, 104], 104);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0xD103, [0, 82], 82);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0xD105, [0, 58], 58);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0xD109, [0, 59], 59);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0xD10B, [0, 59], 59);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0xD107, [0, 90], 90);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0xCBB2, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0xCBB3, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0xCBB4, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0xCBB5, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0xCBB6, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0xCBB7, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0xCBB8, [7], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.enemy_mon_end", 0xD116, [1], 1);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.hp", 0xD10F, [50, 85], 12885);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.attack", 0xD111, [55, 90], 14170);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.defense", 0xD113, [65, 190], 16830);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.speed", 0xD115, [152, 1], 38913);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.special_attack", 0xD117, [77, 0], 19712);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.base_stats.special_defense", 0xD119, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0xD0F5, [121], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0xD0F5, [121], 9);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0xD0F6, [192], 12);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special", 0xD0F6, [192], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.confused", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.toxic", 0xCB4E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.leech_seed", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.curse", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.in_love", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.volatile_status_conditions.nightmare", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.protect", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.identified", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.perish", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.endure", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rollout", 0xCB4B, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.curled", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bide", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rampage", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.in_loop", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.flinched", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.charged", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.underground", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.flying", 0xCB4C, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.bypass_accuracy", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.mist", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.focus_energy", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.substitute", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.recharge", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.rage", 0xCB4D, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.transformed", 0xCB4E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.encored", 0xCB4E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.lock_on", 0xCB4E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.destiny_bond", 0xCB4E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.effects.cant_run", 0xCB4E, [0], false);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.rollout", 0xCB58, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.confuse", 0xCB59, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.toxic", 0xCB5A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.disable", 0xCB5B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.encore", 0xCB5C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.perish", 0xCB5D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.fury_cutter", 0xCB5E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.counters.protect", 0xCB5F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0xDD5D, [25], "Pikachu");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0xDD5D, [25], 25);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0xDEBF, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0xDD7C, [81], 81);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0xDD65, [8, 27, 241], 531441);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xDD63, [185, 218], 47578);
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0xDD5E, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0xDD78, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0xDD79, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0xDD7D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0xDD5F, [204], "Charm");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0xDD74, [19], 19);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0xDD74, [19], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0xDD60, [98], "Quick Attack");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0xDD75, [30], 30);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0xDD75, [30], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0xDD61, [85], "Thunderbolt");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0xDD76, [15], 15);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0xDD76, [15], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0xDD62, [87], "Thunder");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0xDD77, [9], 9);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0xDD77, [9], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0xDD7F, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0xDD81, [0, 170], 170);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0xDD83, [0, 118], 118);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0xDD85, [0, 74], 74);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0xDD87, [0, 171], 171);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0xDD89, [0, 108], 108);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0xDD8B, [0, 92], 92);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0xDD72, [253], 15);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0xDD72, [253], 13);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0xDD73, [222], 13);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special", 0xDD73, [222], 14);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0xDD68, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0xDD6A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0xDD6C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0xDD6E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special", 0xDD70, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0xDD8D, [196], "Espeon");
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0xDD8D, [196], 196);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0xDECA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0xDDAC, [73], 73);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0xDD95, [5, 239, 153], 389017);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xDD93, [185, 218], 47578);
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0xDD8E, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0xDDA8, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0xDDA9, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0xDDAD, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0xDD8F, [189], "Mud-Slap");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0xDDA4, [10], 10);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0xDDA4, [10], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0xDD90, [115], "Reflect");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0xDDA5, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0xDDA5, [20], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0xDD91, [129], "Swift");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0xDDA6, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0xDDA6, [20], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0xDD92, [94], "Psychic");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0xDDA7, [9], 9);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0xDDA7, [9], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0xDDAF, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0xDDB1, [0, 198], 198);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0xDDB3, [0, 121], 121);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0xDDB5, [0, 111], 111);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0xDDB7, [0, 184], 184);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0xDDB9, [0, 215], 215);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0xDDBB, [0, 164], 164);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0xDDA2, [253], 15);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0xDDA2, [253], 13);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0xDDA3, [222], 13);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special", 0xDDA3, [222], 14);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0xDD98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0xDD9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0xDD9C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0xDD9E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special", 0xDDA0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0xDDBD, [143], "Snorlax");
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0xDDBD, [143], 143);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0xDED5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0xDDDC, [75], 75);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0xDDC5, [8, 11, 239], 527343);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xDDC3, [185, 218], 47578);
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0xDDBE, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0xDDD8, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0xDDD9, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0xDDDD, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0xDDBF, [133], "Amnesia");
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0xDDD4, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0xDDD4, [20], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0xDDC0, [173], "Snore");
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0xDDD5, [15], 15);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0xDDD5, [15], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0xDDC1, [156], "Rest");
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0xDDD6, [10], 10);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0xDDD6, [10], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0xDDC2, [34], "Body Slam");
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0xDDD7, [12], 12);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0xDDD7, [12], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0xDDDF, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0xDDE1, [1, 90], 346);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0xDDE3, [0, 192], 192);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0xDDE5, [0, 122], 122);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0xDDE7, [0, 69], 69);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0xDDE9, [0, 123], 123);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0xDDEB, [0, 191], 191);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0xDDD2, [253], 15);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0xDDD2, [253], 13);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0xDDD3, [222], 13);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special", 0xDDD3, [222], 14);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0xDDC8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0xDDCA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0xDDCC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0xDDCE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special", 0xDDD0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0xDDED, [3], "Venusaur");
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0xDDED, [3], 3);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0xDEE0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0xDE0C, [77], 77);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0xDDF5, [7, 30, 32], 466464);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xDDF3, [185, 218], 47578);
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0xDDEE, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0xDE08, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0xDE09, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0xDE0D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0xDDEF, [241], "Sunny Day");
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0xDE04, [5], 5);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0xDE04, [5], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0xDDF0, [202], "Giga Drain");
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0xDE05, [5], 5);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0xDE05, [5], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0xDDF1, [235], "Synthesis");
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0xDE06, [5], 5);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0xDE06, [5], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0xDDF2, [76], "SolarBeam");
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0xDE07, [9], 9);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0xDE07, [9], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0xDE0F, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0xDE11, [0, 231], 231);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0xDE13, [0, 154], 154);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0xDE15, [0, 152], 152);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0xDE17, [0, 148], 148);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0xDE19, [0, 180], 180);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0xDE1B, [0, 180], 180);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0xDE02, [253], 15);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0xDE02, [253], 13);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0xDE03, [222], 13);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special", 0xDE03, [222], 14);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0xDDF8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0xDDFA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0xDDFC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0xDDFE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special", 0xDE00, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0xDE1D, [6], "Charizard");
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0xDE1D, [6], 6);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0xDEEB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0xDE3C, [77], 77);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0xDE25, [7, 30, 32], 466464);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xDE23, [185, 218], 47578);
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0xDE1E, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0xDE38, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0xDE39, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0xDE3D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0xDE1F, [53], "Flamethrower");
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0xDE34, [11], 11);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0xDE34, [11], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0xDE20, [17], "Wing Attack");
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0xDE35, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0xDE35, [35], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0xDE21, [163], "Slash");
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0xDE36, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0xDE36, [20], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0xDE22, [83], "Fire Spin");
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0xDE37, [15], 15);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0xDE37, [15], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0xDE3F, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0xDE41, [0, 228], 228);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0xDE43, [0, 157], 157);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0xDE45, [0, 145], 145);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0xDE47, [0, 179], 179);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0xDE49, [0, 194], 194);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0xDE4B, [0, 157], 157);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0xDE32, [253], 15);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0xDE32, [253], 13);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0xDE33, [222], 13);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special", 0xDE33, [222], 14);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0xDE28, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0xDE2A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0xDE2C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0xDE2E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special", 0xDE30, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0xDE4D, [9], "Blastoise");
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0xDE4D, [9], 9);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0xDEF6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0xDE6C, [77], 77);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0xDE55, [7, 30, 32], 466464);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xDE53, [185, 218], 47578);
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0xDE4E, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0xDE68, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0xDE69, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0xDE6D, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0xDE4F, [240], "Rain Dance");
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0xDE64, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0xDE64, [4], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0xDE50, [57], "Surf");
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0xDE65, [7], 7);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0xDE65, [7], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0xDE51, [59], "Blizzard");
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0xDE66, [5], 5);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0xDE66, [5], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0xDE52, [250], "Whirlpool");
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0xDE67, [15], 15);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0xDE67, [15], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0xDE6F, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0xDE71, [0, 230], 230);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0xDE73, [0, 155], 155);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0xDE75, [0, 179], 179);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0xDE77, [0, 145], 145);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0xDE79, [0, 157], 157);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0xDE7B, [0, 188], 188);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0xDE62, [253], 15);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0xDE62, [253], 13);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0xDE63, [222], 13);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special", 0xDE63, [222], 14);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0xDE58, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0xDE5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0xDE5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0xDE5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special", 0xDE60, [0, 0], 0);
            mapper.AssertAreEqual("battle.field.player.safeguard", 0xCBDD, [0], false);
            mapper.AssertAreEqual("battle.field.player.reflect", 0xCBDD, [0], false);
            mapper.AssertAreEqual("battle.field.player.lightscreen", 0xCBDD, [0], false);
            mapper.AssertAreEqual("battle.field.player.safeguard_count", 0xCBDF, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightscreen_count", 0xCBE0, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflect_count", 0xCBE1, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.safeguard", 0xCBDE, [0], false);
            mapper.AssertAreEqual("battle.field.opponent.reflect", 0xCBDE, [0], false);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen", 0xCBDE, [0], false);
            mapper.AssertAreEqual("battle.field.opponent.safeguard_count", 0xCBE3, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.lightscreen_count", 0xCBE4, [0], 0);
            mapper.AssertAreEqual("battle.field.opponent.reflect_count", 0xCBE5, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0xCBE8, [0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0xCBE9, [0], 0);
            mapper.AssertAreEqual("battle.other.current_damage", 0xD256, [0, 0], 0);
            mapper.AssertAreEqual("battle.other.low_health_alarm", 0xCBDB, [0], "Enabled");
            mapper.AssertAreEqual("battle.other.miss", 0xCB45, [0], 0);
            mapper.AssertAreEqual("battle.other.turn_ended", 0xCB92, [0], 0);
            mapper.AssertAreEqual("battle.other.player_turn_taken", 0xCBBB, [2], 2);
            mapper.AssertAreEqual("battle.other.enemy_turn_taken", 0xCBBA, [2], 2);
            mapper.AssertAreEqual("battle.other.battle_start", 0xCB42, [1], 1);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_0", 0xCB42, [1], true);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_1", 0xCB42, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_2", 0xCB42, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_3", 0xCB42, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_4", 0xCB42, [1], false);
            mapper.AssertAreEqual("battle.other.battle_participants_not_fainted_slot_5", 0xCB42, [1], false);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0xCFE9, [0], 0);
            mapper.AssertAreEqual("battle.other.text_buffer", 0xCF6B, [132, 173, 164, 172, 184, 80, 132, 145, 80, 139, 132], "Enemy");
            mapper.AssertAreEqual("rival.name", 0xD1B9, [230, 230, 230, 80, 80, 80, 80, 80, 134, 145, 132], "   ");
            mapper.AssertAreEqual("audio.map_music", 0xC2C0, [255], 255);
            mapper.AssertAreEqual("audio.current_sound", 0xC2BF, [0], 0);
            mapper.AssertAreEqual("audio.music_id", 0xC29D, [2, 0], 512);
            mapper.AssertAreEqual("audio.music_bank", 0xC29F, [0], 0);
            mapper.AssertAreEqual("audio.channels.0", 0xC001, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channels.1", 0xC033, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channels.2", 0xC065, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channels.3", 0xC097, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.4", 0xC0C9, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.5", 0xC0FB, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.6", 0xC12D, [0, 0], 0);
            mapper.AssertAreEqual("audio.channels.7", 0xC15F, [0, 0], 0);
            mapper.AssertAreEqual("screen.text.prompt", 0xC606, [122], "");
            mapper.AssertAreEqual("screen.menu.current_item", 0xCC26, [57], 57);
            mapper.AssertAreEqual("screen.menu.menu_flags", 0xCEB8, [64], 64);
            mapper.AssertAreEqual("screen.menu.menu_cursor_position", 0xCEBF, [1], 1);
            mapper.AssertAreEqual("screen.menu.party_menu_cursor", 0xCFC9, [0], 0);
            mapper.AssertAreEqual("screen.menu.items_pocket_cursor", 0xCFCA, [0], 0);
            mapper.AssertAreEqual("screen.menu.key_items_pocket_cursor", 0xCFCB, [0], 0);
            mapper.AssertAreEqual("screen.menu.balls_pocket_cursor", 0xCFCC, [0], 0);
            mapper.AssertAreEqual("screen.menu.tmhm_pocket_cursor", 0xCFCD, [0], 0);
            mapper.AssertAreEqual("screen.menu.items_pocket_scroll_position", 0xC1D8, [0], 0);
            mapper.AssertAreEqual("screen.menu.key_items_pocket_scroll_position", 0xCFD0, [0], 0);
            mapper.AssertAreEqual("screen.menu.balls_pocket_scroll_position", 0xCFD1, [0], 0);
            mapper.AssertAreEqual("screen.menu.tmhm_pocket_scroll_position", 0xCFD2, [0], 0);
            mapper.AssertAreEqual("screen.menu.pc_items_cursor", 0xC1D7, [0], 0);
            mapper.AssertAreEqual("screen.menu.pc_items_scroll_position", 0xCFCF, [0], 0);
            mapper.AssertAreEqual("screen.column_1.tiles.0", 0x980C, [0], 0);
            mapper.AssertAreEqual("screen.column_1.tiles.1", 0x982C, [1], 1);
            mapper.AssertAreEqual("screen.column_1.tiles.2", 0x984C, [2], 2);
            mapper.AssertAreEqual("screen.column_1.tiles.3", 0x986C, [3], 3);
            mapper.AssertAreEqual("screen.column_1.tiles.4", 0x988C, [4], 4);
            mapper.AssertAreEqual("screen.column_1.tiles.5", 0x98AC, [5], 5);
            mapper.AssertAreEqual("screen.column_1.tiles.6", 0x98CC, [6], 6);
            mapper.AssertAreEqual("options.text_speed", 0xD199, [193], "Fast");
            mapper.AssertAreEqual("options.no_text_scroll", 0xD199, [193], false);
            mapper.AssertAreEqual("options.sound", 0xD199, [193], false);
            mapper.AssertAreEqual("options.battle_style", 0xD199, [193], true);
            mapper.AssertAreEqual("options.battle_animations", 0xD199, [193], true);
            mapper.AssertAreEqual("game_time.hours", 0xD1EB, [0, 7], 7);
            mapper.AssertAreEqual("game_time.minutes", 0xD1ED, [6], 6);
            mapper.AssertAreEqual("game_time.seconds", 0xD1EE, [27], 27);
            mapper.AssertAreEqual("game_time.frames", 0xD1EF, [33], 33);
            mapper.AssertAreEqual("time.current.day", 0xD1F2, [12], "Friday");
            mapper.AssertAreEqual("time.current.hour", 0xFF96, [14], 14);
            mapper.AssertAreEqual("time.current.minute", 0xFF98, [20], 20);
            mapper.AssertAreEqual("time.current.second", 0xFF9A, [21], 21);
            mapper.AssertAreEqual("time.current.dst", 0xD1E8, [128], true);
            mapper.AssertAreEqual("time.current.time_of_day", 0xD157, [1], "Day");
            mapper.AssertAreEqual("time.start.day", 0xD1DC, [0], "Sunday");
            mapper.AssertAreEqual("time.start.hour", 0xD1DD, [9], 9);
            mapper.AssertAreEqual("time.start.minute", 0xD1DE, [59], 59);
            mapper.AssertAreEqual("time.start.second", 0xD1DF, [18], 18);
            mapper.AssertAreEqual("time.rtc.day", 0xFF8F, [0, 12], 5);
            mapper.AssertAreEqual("time.rtc.hour", 0xFF91, [4], 4);
            mapper.AssertAreEqual("time.rtc.minute", 0xFF92, [21], 21);
            mapper.AssertAreEqual("time.rtc.second", 0xFF93, [3], 3);
            mapper.AssertAreEqual("time.rtc.day_hi", 0xFF94, [0], 0);
            mapper.AssertAreEqual("time.rtc.day_lo", 0xFF95, [0], 0);
            mapper.AssertAreEqual("time.game_clock.day", 0xD4B6, [0], "Sunday");
            mapper.AssertAreEqual("input.a", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.b", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.select", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.start", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.right", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.left", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.up", 0xFFA6, [0], false);
            mapper.AssertAreEqual("input.down", 0xFFA6, [0], false);
            mapper.AssertAreEqual("meta.generation", "2");
            mapper.AssertAreEqual("meta.game_name", "Gold and Silver");
            mapper.AssertAreEqual("meta.game_type", "Originals");
            mapper.AssertAreEqual("meta.state", "Battle");
        }

    }
}
