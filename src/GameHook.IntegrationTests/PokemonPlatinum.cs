using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Numerics;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonPlatinum : BaseTest
    {

        [TestMethod]
        public async Task All_Properties()
        {
            await Load_NDS_PokemonPlatinum(5);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x227E214, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.gender", 0x227E22C, [0], 0);
            mapper.AssertAreEqual("player.player_id", 0x227E224, [195, 155], 39875);
            mapper.AssertAreEqual("player.secret_id", 0x227E226, [182, 67], 17334);
            mapper.AssertAreEqual("player.team_count", 0x227E248, [6], 6);
            mapper.AssertAreEqual("player.starter", 0x227EFB8, [131, 1], "Turtwig");
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.team.0.species", 0x8, [133, 1], "Torterra");
            mapper.AssertAreEqual("player.team.0.dex_number", 0x8, [133, 1], 389);
            mapper.AssertAreEqual("player.team.0.nickname", 0x48, [62, 1, 65, 1, 51, 1, 49, 1, 255, 255, 98, 1, 88, 67, 165, 1, 204, 156, 121, 1, 56, 184], "TWIG");
            mapper.AssertAreEqual("player.team.0.level", 0x8C, [84], 84);
            mapper.AssertAreEqual("player.team.0.exp", 0x10, [29, 154, 9, 0], 629277);
            mapper.AssertAreEqual("player.team.0.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.team.0.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("player.team.0.ability", 0x15, [65], "Overgrow");
            mapper.AssertAreEqual("player.team.0.nature", "Hardy");
            mapper.AssertAreEqual("player.team.0.held_item", 0xA, [253, 0], "Shell Bell");
            mapper.AssertAreEqual("player.team.0.friendship", 0x14, [255], 255);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0x28, [89, 0], "Earthquake");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0x30, [10], 10);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0x2A, [216, 0], "Return");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0x31, [20], 20);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0x2C, [14, 0], "Swords Dance");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0x32, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0x2E, [157, 0], "Rock Slide");
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0x33, [10], 10);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0x8E, [37, 1], 293);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0x90, [37, 1], 293);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0x92, [237, 0], 237);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0x94, [217, 0], 217);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0x96, [162, 0], 162);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0x98, [175, 0], 175);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0x9A, [177, 0], 177);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("player.team.0.ivs.special_attack", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("player.team.0.ivs.special_defense", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0x18, [65], 65);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0x19, [112], 112);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0x1A, [50], 50);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0x1B, [177], 177);
            mapper.AssertAreEqual("player.team.0.evs.special_attack", 0x1C, [88], 88);
            mapper.AssertAreEqual("player.team.0.evs.special_defense", 0x1D, [18], 18);
            mapper.AssertAreEqual("player.team.0.flags.is_egg", 0x38, [255, 255, 255, 191], false);
            mapper.AssertAreEqual("player.team.0.flags.is_nicknamed", 0x38, [255, 255, 255, 191], true);
            mapper.AssertAreEqual("player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.internals.personality_value", 1173323200);
            mapper.AssertAreEqual("player.team.0.internals.checksum", 0x6, [240, 174], 44784);
            mapper.AssertAreEqual("player.team.0.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("player.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.met_location", 0x80, [16, 0], 16);
            mapper.AssertAreEqual("player.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.0.misc.met_info.met_level", 0x84, [5], 5);
            mapper.AssertAreEqual("player.team.0.misc.met_info.female_ot_gender", 0x84, [5], false);
            mapper.AssertAreEqual("player.team.0.misc.met_info.encounter_type", 0x85, [24], 24);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("player.team.1.species", 0x8, [143, 1], "Bidoof");
            mapper.AssertAreEqual("player.team.1.dex_number", 0x8, [143, 1], 399);
            mapper.AssertAreEqual("player.team.1.nickname", 0x48, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0], "BIDOOF");
            mapper.AssertAreEqual("player.team.1.level", 0x8C, [7], 7);
            mapper.AssertAreEqual("player.team.1.exp", 0x10, [94, 1, 0, 0], 350);
            mapper.AssertAreEqual("player.team.1.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.team.1.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("player.team.1.ability", 0x15, [109], "Unaware");
            mapper.AssertAreEqual("player.team.1.nature", "Naughty");
            mapper.AssertAreEqual("player.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0x14, [193], 193);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0x2A, [15, 0], "Cut");
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0x2C, [45, 0], "Growl");
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0x32, [40], 40);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0x8E, [27, 0], 27);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0x90, [27, 0], 27);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0x92, [12, 0], 12);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0x94, [10, 0], 10);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0x96, [10, 0], 10);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0x98, [10, 0], 10);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0x9A, [9, 0], 9);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0x38, [153, 4, 133, 2], 25);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0x38, [153, 4, 133, 2], 4);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0x38, [153, 4, 133, 2], 1);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0x38, [153, 4, 133, 2], 10);
            mapper.AssertAreEqual("player.team.1.ivs.special_attack", 0x38, [153, 4, 133, 2], 8);
            mapper.AssertAreEqual("player.team.1.ivs.special_defense", 0x38, [153, 4, 133, 2], 1);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0x1A, [1], 1);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_defense", 0x1D, [1], 1);
            mapper.AssertAreEqual("player.team.1.flags.is_egg", 0x38, [153, 4, 133, 2], false);
            mapper.AssertAreEqual("player.team.1.flags.is_nicknamed", 0x38, [153, 4, 133, 2], false);
            mapper.AssertAreEqual("player.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.internals.personality_value", 1251239079);
            mapper.AssertAreEqual("player.team.1.internals.checksum", 0x6, [96, 163], 41824);
            mapper.AssertAreEqual("player.team.1.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("player.team.1.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.met_location", 0x80, [17, 0], 17);
            mapper.AssertAreEqual("player.team.1.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.1.misc.met_info.met_level", 0x84, [2], 2);
            mapper.AssertAreEqual("player.team.1.misc.met_info.female_ot_gender", 0x84, [2], false);
            mapper.AssertAreEqual("player.team.1.misc.met_info.encounter_type", 0x85, [2], 2);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("player.team.2.species", 0x8, [140, 1], "Starly");
            mapper.AssertAreEqual("player.team.2.dex_number", 0x8, [140, 1], 396);
            mapper.AssertAreEqual("player.team.2.nickname", 0x48, [63, 1, 56, 1, 54, 1, 63, 1, 45, 1, 53, 1, 67, 1, 255, 255, 0, 0, 0, 0, 0, 0], "UNLUCKY");
            mapper.AssertAreEqual("player.team.2.level", 0x8C, [4], 4);
            mapper.AssertAreEqual("player.team.2.exp", 0x10, [96, 0, 0, 0], 96);
            mapper.AssertAreEqual("player.team.2.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.team.2.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("player.team.2.ability", 0x15, [51], "Keen Eye");
            mapper.AssertAreEqual("player.team.2.nature", "Calm");
            mapper.AssertAreEqual("player.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0x14, [185], 185);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0x2A, [45, 0], "Growl");
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0x31, [40], 40);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0x2C, [19, 0], "Fly");
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0x32, [15], 15);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0x2E, [176, 1], "Defog");
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0x33, [15], 15);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0x8E, [17, 0], 17);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0x90, [17, 0], 17);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0x92, [8, 0], 8);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0x94, [7, 0], 7);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0x96, [9, 0], 9);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0x98, [8, 0], 8);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0x9A, [7, 0], 7);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0x38, [140, 45, 242, 140], 12);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0x38, [140, 45, 242, 140], 12);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0x38, [140, 45, 242, 140], 11);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0x38, [140, 45, 242, 140], 4);
            mapper.AssertAreEqual("player.team.2.ivs.special_attack", 0x38, [140, 45, 242, 140], 15);
            mapper.AssertAreEqual("player.team.2.ivs.special_defense", 0x38, [140, 45, 242, 140], 6);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.2.flags.is_egg", 0x38, [140, 45, 242, 140], false);
            mapper.AssertAreEqual("player.team.2.flags.is_nicknamed", 0x38, [140, 45, 242, 140], true);
            mapper.AssertAreEqual("player.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.internals.personality_value", 3428230445);
            mapper.AssertAreEqual("player.team.2.internals.checksum", 0x6, [183, 54], 14007);
            mapper.AssertAreEqual("player.team.2.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("player.team.2.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.met_location", 0x80, [17, 0], 17);
            mapper.AssertAreEqual("player.team.2.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.2.misc.met_info.met_level", 0x84, [4], 4);
            mapper.AssertAreEqual("player.team.2.misc.met_info.female_ot_gender", 0x84, [4], false);
            mapper.AssertAreEqual("player.team.2.misc.met_info.encounter_type", 0x85, [2], 2);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("player.team.3.species", 0x8, [54, 0], "Psyduck");
            mapper.AssertAreEqual("player.team.3.dex_number", 0x8, [54, 0], 54);
            mapper.AssertAreEqual("player.team.3.nickname", 0x48, [44, 1, 43, 1, 54, 1, 54, 1, 61, 1, 255, 255, 53, 1, 255, 255, 0, 0, 0, 0, 0, 0], "BALLS");
            mapper.AssertAreEqual("player.team.3.level", 0x8C, [10], 10);
            mapper.AssertAreEqual("player.team.3.exp", 0x10, [208, 4, 0, 0], 1232);
            mapper.AssertAreEqual("player.team.3.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.team.3.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("player.team.3.ability", 0x15, [6], "Damp");
            mapper.AssertAreEqual("player.team.3.nature", "Relaxed");
            mapper.AssertAreEqual("player.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0x14, [196], 196);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0x28, [90, 1], "Water Sport");
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0x30, [15], 15);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0x2A, [127, 0], "Waterfall");
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0x31, [15], 15);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0x2C, [39, 0], "Tail Whip");
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0x32, [30], 30);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0x2E, [57, 0], "Surf");
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0x33, [15], 15);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0x8E, [32, 0], 32);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0x90, [32, 0], 32);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0x92, [18, 0], 18);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0x94, [18, 0], 18);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0x96, [15, 0], 15);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0x98, [18, 0], 18);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0x9A, [17, 0], 17);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0x38, [125, 231, 134, 184], 29);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0x38, [125, 231, 134, 184], 27);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0x38, [125, 231, 134, 184], 25);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0x38, [125, 231, 134, 184], 13);
            mapper.AssertAreEqual("player.team.3.ivs.special_attack", 0x38, [125, 231, 134, 184], 8);
            mapper.AssertAreEqual("player.team.3.ivs.special_defense", 0x38, [125, 231, 134, 184], 28);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0x1B, [3], 3);
            mapper.AssertAreEqual("player.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.3.flags.is_egg", 0x38, [125, 231, 134, 184], false);
            mapper.AssertAreEqual("player.team.3.flags.is_nicknamed", 0x38, [125, 231, 134, 184], true);
            mapper.AssertAreEqual("player.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.internals.personality_value", 4053449682);
            mapper.AssertAreEqual("player.team.3.internals.checksum", 0x6, [123, 222], 56955);
            mapper.AssertAreEqual("player.team.3.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("player.team.3.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.met_location", 0x80, [59, 0], 59);
            mapper.AssertAreEqual("player.team.3.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.3.misc.met_info.met_level", 0x84, [6], 6);
            mapper.AssertAreEqual("player.team.3.misc.met_info.female_ot_gender", 0x84, [6], false);
            mapper.AssertAreEqual("player.team.3.misc.met_info.encounter_type", 0x85, [5], 5);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("player.team.4.species", 0x8, [74, 0], "Geodude");
            mapper.AssertAreEqual("player.team.4.dex_number", 0x8, [74, 0], 74);
            mapper.AssertAreEqual("player.team.4.nickname", 0x48, [43, 1, 255, 255, 57, 1, 46, 1, 63, 1, 46, 1, 47, 1, 255, 255, 0, 0, 0, 0, 0, 0], "A");
            mapper.AssertAreEqual("player.team.4.level", 0x8C, [8], 8);
            mapper.AssertAreEqual("player.team.4.exp", 0x10, [58, 1, 0, 0], 314);
            mapper.AssertAreEqual("player.team.4.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.team.4.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("player.team.4.ability", 0x15, [69], "Rock Head");
            mapper.AssertAreEqual("player.team.4.nature", "Rash");
            mapper.AssertAreEqual("player.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0x14, [187], 187);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0x28, [249, 0], "Rock Smash");
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0x30, [15], 15);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0x2A, [70, 0], "Strength");
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0x31, [15], 15);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0x2C, [175, 1], "Rock Climb");
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0x32, [20], 20);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0x2E, [141, 1], "Rock Polish");
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0x33, [20], 20);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0x8E, [25, 0], 25);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0x90, [25, 0], 25);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0x92, [19, 0], 19);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0x94, [23, 0], 23);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0x96, [8, 0], 8);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0x98, [9, 0], 9);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0x9A, [10, 0], 10);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0x38, [76, 103, 17, 184], 12);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0x38, [76, 103, 17, 184], 26);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0x38, [76, 103, 17, 184], 25);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0x38, [76, 103, 17, 184], 2);
            mapper.AssertAreEqual("player.team.4.ivs.special_attack", 0x38, [76, 103, 17, 184], 1);
            mapper.AssertAreEqual("player.team.4.ivs.special_defense", 0x38, [76, 103, 17, 184], 28);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.4.flags.is_egg", 0x38, [76, 103, 17, 184], false);
            mapper.AssertAreEqual("player.team.4.flags.is_nicknamed", 0x38, [76, 103, 17, 184], true);
            mapper.AssertAreEqual("player.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.internals.personality_value", 3133829144);
            mapper.AssertAreEqual("player.team.4.internals.checksum", 0x6, [101, 157], 40293);
            mapper.AssertAreEqual("player.team.4.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("player.team.4.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.met_location", 0x80, [46, 0], 46);
            mapper.AssertAreEqual("player.team.4.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.4.misc.met_info.met_level", 0x84, [8], 8);
            mapper.AssertAreEqual("player.team.4.misc.met_info.female_ot_gender", 0x84, [8], false);
            mapper.AssertAreEqual("player.team.4.misc.met_info.encounter_type", 0x85, [5], 5);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("player.team.5.species", 0x8, [175, 0], "Togepi");
            mapper.AssertAreEqual("player.team.5.dex_number", 0x8, [175, 0], 175);
            mapper.AssertAreEqual("player.team.5.nickname", 0x48, [62, 1, 57, 1, 49, 1, 47, 1, 58, 1, 51, 1, 255, 255, 25, 192, 24, 179, 12, 2, 48, 55], "TOGEPI");
            mapper.AssertAreEqual("player.team.5.level", 0x8C, [1], 1);
            mapper.AssertAreEqual("player.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("player.team.5.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("player.team.5.ability", 0x15, [32], "Serene Grace");
            mapper.AssertAreEqual("player.team.5.nature", "Docile");
            mapper.AssertAreEqual("player.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0x14, [213], 213);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0x28, [45, 0], "Growl");
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0x30, [40], 40);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0x2A, [204, 0], "Charm");
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0x31, [20], 20);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0x8E, [11, 0], 11);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0x90, [11, 0], 11);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0x92, [5, 0], 5);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0x94, [6, 0], 6);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0x96, [5, 0], 5);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0x98, [5, 0], 5);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0x9A, [6, 0], 6);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0x38, [130, 189, 223, 30], 2);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0x38, [130, 189, 223, 30], 12);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0x38, [130, 189, 223, 30], 15);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0x38, [130, 189, 223, 30], 31);
            mapper.AssertAreEqual("player.team.5.ivs.special_attack", 0x38, [130, 189, 223, 30], 13);
            mapper.AssertAreEqual("player.team.5.ivs.special_defense", 0x38, [130, 189, 223, 30], 15);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.5.flags.is_egg", 0x38, [130, 189, 223, 30], false);
            mapper.AssertAreEqual("player.team.5.flags.is_nicknamed", 0x38, [130, 189, 223, 30], false);
            mapper.AssertAreEqual("player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.internals.personality_value", 2971769981);
            mapper.AssertAreEqual("player.team.5.internals.checksum", 0x6, [89, 222], 56921);
            mapper.AssertAreEqual("player.team.5.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("player.team.5.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.date_egg_received", 0x78, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.5.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.5.misc.met_info.egg_location", 0x7E, [186, 11], 3002);
            mapper.AssertAreEqual("player.team.5.misc.met_info.met_location", 0x80, [53, 0], 53);
            mapper.AssertAreEqual("player.team.5.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("player.badges.0", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.1", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.2", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.3", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.4", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.5", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.6", 0x227E22E, [255], true);
            mapper.AssertAreEqual("player.badges.7", 0x227E22E, [255], true);
            mapper.AssertAreEqual("bag.money", 0x227E228, [59, 85, 1, 0], 87355);
            mapper.AssertAreEqual("bag.coins", 0x227E234, [0, 0, 9, 0], 589824);
            mapper.AssertAreEqual("bag.items.0.item", 0x227E7DC, [94, 0], "Honey");
            mapper.AssertAreEqual("bag.items.0.quantity", 0x227E7DE, [10, 0], 10);
            mapper.AssertAreEqual("bag.items.1.item", 0x227E7E0, [218, 0], "Soothe Bell");
            mapper.AssertAreEqual("bag.items.1.quantity", 0x227E7E2, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.2.item", 0x227E7E4, [78, 0], "Escape Rope");
            mapper.AssertAreEqual("bag.items.2.quantity", 0x227E7E6, [5, 0], 5);
            mapper.AssertAreEqual("bag.items.3.item", 0x227E7E8, [76, 0], "Super Repel");
            mapper.AssertAreEqual("bag.items.3.quantity", 0x227E7EA, [16, 0], 16);
            mapper.AssertAreEqual("bag.items.4.item", 0x227E7EC, [58, 1], "Odd Incense");
            mapper.AssertAreEqual("bag.items.4.quantity", 0x227E7EE, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.5.item", 0x227E7F0, [51, 1], "Mind Plate");
            mapper.AssertAreEqual("bag.items.5.quantity", 0x227E7F2, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.6.item", 0x227E7F4, [67, 1], "Magmarizer");
            mapper.AssertAreEqual("bag.items.6.quantity", 0x227E7F6, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.7.item", 0x227E7F8, [72, 0], "Red Shard");
            mapper.AssertAreEqual("bag.items.7.quantity", 0x227E7FA, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.8.item", 0x227E7FC, [66, 1], "Electirizer");
            mapper.AssertAreEqual("bag.items.8.quantity", 0x227E7FE, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.9.item", 0x227E800, [239, 0], "Miracle Seed");
            mapper.AssertAreEqual("bag.items.9.quantity", 0x227E802, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.10.item", 0x227E804, [85, 0], "Leaf Stone");
            mapper.AssertAreEqual("bag.items.10.quantity", 0x227E806, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.11.item", 0x227E808, [73, 0], "Blue Shard");
            mapper.AssertAreEqual("bag.items.11.quantity", 0x227E80A, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.12.item", 0x227E80C, [237, 0], "Soft Sand");
            mapper.AssertAreEqual("bag.items.12.quantity", 0x227E80E, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.13.item", 0x227E810, [251, 0], "Silk Scarf");
            mapper.AssertAreEqual("bag.items.13.quantity", 0x227E812, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.14.item", 0x227E814, [108, 0], "Dusk Stone");
            mapper.AssertAreEqual("bag.items.14.quantity", 0x227E816, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.15.item", 0x227E818, [68, 1], "Dubious Disc");
            mapper.AssertAreEqual("bag.items.15.quantity", 0x227E81A, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.16.item", 0x227E81C, [68, 0], "Black Flute");
            mapper.AssertAreEqual("bag.items.16.quantity", 0x227E81E, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.17.item", 0x227E820, [74, 0], "Yellow Shard");
            mapper.AssertAreEqual("bag.items.17.quantity", 0x227E822, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.18.item", 0x227E824, [93, 0], "Heart Scale");
            mapper.AssertAreEqual("bag.items.18.quantity", 0x227E826, [2, 0], 2);
            mapper.AssertAreEqual("bag.items.19.item", 0x227E828, [70, 1], "Razor Claw");
            mapper.AssertAreEqual("bag.items.19.quantity", 0x227E82A, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.20.item", 0x227E82C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.20.quantity", 0x227E82E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.21.item", 0x227E830, [0, 0], null);
            mapper.AssertAreEqual("bag.items.21.quantity", 0x227E832, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.22.item", 0x227E834, [0, 0], null);
            mapper.AssertAreEqual("bag.items.22.quantity", 0x227E836, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.23.item", 0x227E838, [0, 0], null);
            mapper.AssertAreEqual("bag.items.23.quantity", 0x227E83A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.24.item", 0x227E83C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.24.quantity", 0x227E83E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.25.item", 0x227E840, [0, 0], null);
            mapper.AssertAreEqual("bag.items.25.quantity", 0x227E842, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.26.item", 0x227E844, [0, 0], null);
            mapper.AssertAreEqual("bag.items.26.quantity", 0x227E846, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.27.item", 0x227E848, [0, 0], null);
            mapper.AssertAreEqual("bag.items.27.quantity", 0x227E84A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.28.item", 0x227E84C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.28.quantity", 0x227E84E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.29.item", 0x227E850, [0, 0], null);
            mapper.AssertAreEqual("bag.items.29.quantity", 0x227E852, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.30.item", 0x227E854, [0, 0], null);
            mapper.AssertAreEqual("bag.items.30.quantity", 0x227E856, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.31.item", 0x227E858, [0, 0], null);
            mapper.AssertAreEqual("bag.items.31.quantity", 0x227E85A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.32.item", 0x227E85C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.32.quantity", 0x227E85E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.33.item", 0x227E860, [0, 0], null);
            mapper.AssertAreEqual("bag.items.33.quantity", 0x227E862, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.34.item", 0x227E864, [0, 0], null);
            mapper.AssertAreEqual("bag.items.34.quantity", 0x227E866, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.35.item", 0x227E868, [0, 0], null);
            mapper.AssertAreEqual("bag.items.35.quantity", 0x227E86A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.36.item", 0x227E86C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.36.quantity", 0x227E86E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.37.item", 0x227E870, [0, 0], null);
            mapper.AssertAreEqual("bag.items.37.quantity", 0x227E872, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.38.item", 0x227E874, [0, 0], null);
            mapper.AssertAreEqual("bag.items.38.quantity", 0x227E876, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.39.item", 0x227E878, [0, 0], null);
            mapper.AssertAreEqual("bag.items.39.quantity", 0x227E87A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.40.item", 0x227E87C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.40.quantity", 0x227E87E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.0.item", 0x227ECF8, [18, 0], "Antidote");
            mapper.AssertAreEqual("bag.medicine.0.quantity", 0x227ECFA, [2, 0], 2);
            mapper.AssertAreEqual("bag.medicine.1.item", 0x227ECFC, [22, 0], "Paralyze Heal");
            mapper.AssertAreEqual("bag.medicine.1.quantity", 0x227ECFE, [2, 0], 2);
            mapper.AssertAreEqual("bag.medicine.2.item", 0x227ED00, [21, 0], "Awakening");
            mapper.AssertAreEqual("bag.medicine.2.quantity", 0x227ED02, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.3.item", 0x227ED04, [19, 0], "Burn Heal");
            mapper.AssertAreEqual("bag.medicine.3.quantity", 0x227ED06, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.4.item", 0x227ED08, [38, 0], "Ether");
            mapper.AssertAreEqual("bag.medicine.4.quantity", 0x227ED0A, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.5.item", 0x227ED0C, [39, 0], "Max Ether");
            mapper.AssertAreEqual("bag.medicine.5.quantity", 0x227ED0E, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.6.item", 0x227ED10, [48, 0], "Carbos");
            mapper.AssertAreEqual("bag.medicine.6.quantity", 0x227ED12, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.7.item", 0x227ED14, [52, 0], "Zinc");
            mapper.AssertAreEqual("bag.medicine.7.quantity", 0x227ED16, [2, 0], 2);
            mapper.AssertAreEqual("bag.medicine.8.item", 0x227ED18, [29, 0], "Max Revive");
            mapper.AssertAreEqual("bag.medicine.8.quantity", 0x227ED1A, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.9.item", 0x227ED1C, [25, 0], "Hyper Potion");
            mapper.AssertAreEqual("bag.medicine.9.quantity", 0x227ED1E, [11, 0], 11);
            mapper.AssertAreEqual("bag.medicine.10.item", 0x227ED20, [23, 0], "Full Restore");
            mapper.AssertAreEqual("bag.medicine.10.quantity", 0x227ED22, [20, 0], 20);
            mapper.AssertAreEqual("bag.medicine.11.item", 0x227ED24, [49, 0], "Calcium");
            mapper.AssertAreEqual("bag.medicine.11.quantity", 0x227ED26, [1, 0], 1);
            mapper.AssertAreEqual("bag.medicine.12.item", 0x227ED28, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.12.quantity", 0x227ED2A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.13.item", 0x227ED2C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.13.quantity", 0x227ED2E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.14.item", 0x227ED30, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.14.quantity", 0x227ED32, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.15.item", 0x227ED34, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.15.quantity", 0x227ED36, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.16.item", 0x227ED38, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.16.quantity", 0x227ED3A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.17.item", 0x227ED3C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.17.quantity", 0x227ED3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.18.item", 0x227ED40, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.18.quantity", 0x227ED42, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.19.item", 0x227ED44, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.19.quantity", 0x227ED46, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.20.item", 0x227ED48, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.20.quantity", 0x227ED4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.0.item", 0x227EE98, [14, 0], "Heal Ball");
            mapper.AssertAreEqual("bag.balls.0.quantity", 0x227EE9A, [1, 0], 1);
            mapper.AssertAreEqual("bag.balls.1.item", 0x227EE9C, [2, 0], "Ultra Ball");
            mapper.AssertAreEqual("bag.balls.1.quantity", 0x227EE9E, [5, 0], 5);
            mapper.AssertAreEqual("bag.balls.2.item", 0x227EEA0, [1, 0], "Master Ball");
            mapper.AssertAreEqual("bag.balls.2.quantity", 0x227EEA2, [1, 0], 1);
            mapper.AssertAreEqual("bag.balls.3.item", 0x227EEA4, [7, 0], "Dive Ball");
            mapper.AssertAreEqual("bag.balls.3.quantity", 0x227EEA6, [1, 0], 1);
            mapper.AssertAreEqual("bag.balls.4.item", 0x227EEA8, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.4.quantity", 0x227EEAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.5.item", 0x227EEAC, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.5.quantity", 0x227EEAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.6.item", 0x227EEB0, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.6.quantity", 0x227EEB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.7.item", 0x227EEB4, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.7.quantity", 0x227EEB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.8.item", 0x227EEB8, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.8.quantity", 0x227EEBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.9.item", 0x227EEBC, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.9.quantity", 0x227EEBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.10.item", 0x227EEC0, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.10.quantity", 0x227EEC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.11.item", 0x227EEC4, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.11.quantity", 0x227EEC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.12.item", 0x227EEC8, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.12.quantity", 0x227EECA, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.13.item", 0x227EECC, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.13.quantity", 0x227EECE, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.14.item", 0x227EED0, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.14.quantity", 0x227EED2, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.15.item", 0x227EED4, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.15.quantity", 0x227EED6, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.16.item", 0x227EED8, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.16.quantity", 0x227EEDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.0.item", 0x227EB38, [77, 1], "TM06");
            mapper.AssertAreEqual("bag.tmhm.0.quantity", 0x227EB3A, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.1.item", 0x227EB3C, [78, 1], "TM07");
            mapper.AssertAreEqual("bag.tmhm.1.quantity", 0x227EB3E, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.2.item", 0x227EB40, [107, 1], "TM36");
            mapper.AssertAreEqual("bag.tmhm.2.quantity", 0x227EB42, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.3.item", 0x227EB44, [110, 1], "TM39");
            mapper.AssertAreEqual("bag.tmhm.3.quantity", 0x227EB46, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.4.item", 0x227EB48, [120, 1], "TM49");
            mapper.AssertAreEqual("bag.tmhm.4.quantity", 0x227EB4A, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.5.item", 0x227EB4C, [126, 1], "TM55");
            mapper.AssertAreEqual("bag.tmhm.5.quantity", 0x227EB4E, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.6.item", 0x227EB50, [128, 1], "TM57");
            mapper.AssertAreEqual("bag.tmhm.6.quantity", 0x227EB52, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.7.item", 0x227EB54, [143, 1], "TM72");
            mapper.AssertAreEqual("bag.tmhm.7.quantity", 0x227EB56, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.8.item", 0x227EB58, [148, 1], "TM77");
            mapper.AssertAreEqual("bag.tmhm.8.quantity", 0x227EB5A, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.9.item", 0x227EB5C, [157, 1], "TM86");
            mapper.AssertAreEqual("bag.tmhm.9.quantity", 0x227EB5E, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.10.item", 0x227EB60, [162, 1], "TM91");
            mapper.AssertAreEqual("bag.tmhm.10.quantity", 0x227EB62, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.11.item", 0x227EB64, [164, 1], "HM01");
            mapper.AssertAreEqual("bag.tmhm.11.quantity", 0x227EB66, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.12.item", 0x227EB68, [165, 1], "HM02");
            mapper.AssertAreEqual("bag.tmhm.12.quantity", 0x227EB6A, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.13.item", 0x227EB6C, [166, 1], "HM03");
            mapper.AssertAreEqual("bag.tmhm.13.quantity", 0x227EB6E, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.14.item", 0x227EB70, [167, 1], "HM04");
            mapper.AssertAreEqual("bag.tmhm.14.quantity", 0x227EB72, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.15.item", 0x227EB74, [168, 1], "HM05");
            mapper.AssertAreEqual("bag.tmhm.15.quantity", 0x227EB76, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.16.item", 0x227EB78, [169, 1], "HM06");
            mapper.AssertAreEqual("bag.tmhm.16.quantity", 0x227EB7A, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.17.item", 0x227EB7C, [170, 1], "HM07");
            mapper.AssertAreEqual("bag.tmhm.17.quantity", 0x227EB7E, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.18.item", 0x227EB80, [171, 1], "HM08");
            mapper.AssertAreEqual("bag.tmhm.18.quantity", 0x227EB82, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.19.item", 0x227EB84, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.19.quantity", 0x227EB86, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.20.item", 0x227EB88, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.20.quantity", 0x227EB8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.21.item", 0x227EB8C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.21.quantity", 0x227EB8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.22.item", 0x227EB90, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.22.quantity", 0x227EB92, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.23.item", 0x227EB94, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.23.quantity", 0x227EB96, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.24.item", 0x227EB98, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.24.quantity", 0x227EB9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.25.item", 0x227EB9C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.25.quantity", 0x227EB9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.26.item", 0x227EBA0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.26.quantity", 0x227EBA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.27.item", 0x227EBA4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.27.quantity", 0x227EBA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.28.item", 0x227EBA8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.28.quantity", 0x227EBAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.29.item", 0x227EBAC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.29.quantity", 0x227EBAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.30.item", 0x227EBB0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.30.quantity", 0x227EBB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.31.item", 0x227EBB4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.31.quantity", 0x227EBB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.32.item", 0x227EBB8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.32.quantity", 0x227EBBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.33.item", 0x227EBBC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.33.quantity", 0x227EBBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.34.item", 0x227EBC0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.34.quantity", 0x227EBC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.35.item", 0x227EBC4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.35.quantity", 0x227EBC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.36.item", 0x227EBC8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.36.quantity", 0x227EBCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.37.item", 0x227EBCC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.37.quantity", 0x227EBCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.38.item", 0x227EBD0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.38.quantity", 0x227EBD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.39.item", 0x227EBD4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.39.quantity", 0x227EBD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.40.item", 0x227EBD8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.40.quantity", 0x227EBDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.41.item", 0x227EBDC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.41.quantity", 0x227EBDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.42.item", 0x227EBE0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.42.quantity", 0x227EBE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.43.item", 0x227EBE4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.43.quantity", 0x227EBE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.44.item", 0x227EBE8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.44.quantity", 0x227EBEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.45.item", 0x227EBEC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.45.quantity", 0x227EBEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.46.item", 0x227EBF0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.46.quantity", 0x227EBF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.47.item", 0x227EBF4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.47.quantity", 0x227EBF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.48.item", 0x227EBF8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.48.quantity", 0x227EBFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.49.item", 0x227EBFC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.49.quantity", 0x227EBFE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.50.item", 0x227EC00, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.50.quantity", 0x227EC02, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.51.item", 0x227EC04, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.51.quantity", 0x227EC06, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.52.item", 0x227EC08, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.52.quantity", 0x227EC0A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.53.item", 0x227EC0C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.53.quantity", 0x227EC0E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.54.item", 0x227EC10, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.54.quantity", 0x227EC12, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.55.item", 0x227EC14, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.55.quantity", 0x227EC16, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.56.item", 0x227EC18, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.56.quantity", 0x227EC1A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.57.item", 0x227EC1C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.57.quantity", 0x227EC1E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.58.item", 0x227EC20, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.58.quantity", 0x227EC22, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.59.item", 0x227EC24, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.59.quantity", 0x227EC26, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.60.item", 0x227EC28, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.60.quantity", 0x227EC2A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.61.item", 0x227EC2C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.61.quantity", 0x227EC2E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.62.item", 0x227EC30, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.62.quantity", 0x227EC32, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.63.item", 0x227EC34, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.63.quantity", 0x227EC36, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.64.item", 0x227EC38, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.64.quantity", 0x227EC3A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.65.item", 0x227EC3C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.65.quantity", 0x227EC3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.66.item", 0x227EC40, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.66.quantity", 0x227EC42, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.67.item", 0x227EC44, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.67.quantity", 0x227EC46, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.68.item", 0x227EC48, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.68.quantity", 0x227EC4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.69.item", 0x227EC4C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.69.quantity", 0x227EC4E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.70.item", 0x227EC50, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.70.quantity", 0x227EC52, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.71.item", 0x227EC54, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.71.quantity", 0x227EC56, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.72.item", 0x227EC58, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.72.quantity", 0x227EC5A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.73.item", 0x227EC5C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.73.quantity", 0x227EC5E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.74.item", 0x227EC60, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.74.quantity", 0x227EC62, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.75.item", 0x227EC64, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.75.quantity", 0x227EC66, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.76.item", 0x227EC68, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.76.quantity", 0x227EC6A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.77.item", 0x227EC6C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.77.quantity", 0x227EC6E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.78.item", 0x227EC70, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.78.quantity", 0x227EC72, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.79.item", 0x227EC74, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.79.quantity", 0x227EC76, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.80.item", 0x227EC78, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.80.quantity", 0x227EC7A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.81.item", 0x227EC7C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.81.quantity", 0x227EC7E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.82.item", 0x227EC80, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.82.quantity", 0x227EC82, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.83.item", 0x227EC84, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.83.quantity", 0x227EC86, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.84.item", 0x227EC88, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.84.quantity", 0x227EC8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.85.item", 0x227EC8C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.85.quantity", 0x227EC8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.86.item", 0x227EC90, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.86.quantity", 0x227EC92, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.87.item", 0x227EC94, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.87.quantity", 0x227EC96, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.88.item", 0x227EC98, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.88.quantity", 0x227EC9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.89.item", 0x227EC9C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.89.quantity", 0x227EC9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.90.item", 0x227ECA0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.90.quantity", 0x227ECA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.91.item", 0x227ECA4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.91.quantity", 0x227ECA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.92.item", 0x227ECA8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.92.quantity", 0x227ECAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.93.item", 0x227ECAC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.93.quantity", 0x227ECAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.94.item", 0x227ECB0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.94.quantity", 0x227ECB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.95.item", 0x227ECB4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.95.quantity", 0x227ECB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.96.item", 0x227ECB8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.96.quantity", 0x227ECBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.97.item", 0x227ECBC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.97.quantity", 0x227ECBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.98.item", 0x227ECC0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.98.quantity", 0x227ECC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.99.item", 0x227ECC4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.99.quantity", 0x227ECC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.0.item", 0x227ED98, [149, 0], "Cheri Berry");
            mapper.AssertAreEqual("bag.berries.0.quantity", 0x227ED9A, [1, 0], 1);
            mapper.AssertAreEqual("bag.berries.1.item", 0x227ED9C, [150, 0], "Chesto Berry");
            mapper.AssertAreEqual("bag.berries.1.quantity", 0x227ED9E, [2, 0], 2);
            mapper.AssertAreEqual("bag.berries.2.item", 0x227EDA0, [151, 0], "Pecha Berry");
            mapper.AssertAreEqual("bag.berries.2.quantity", 0x227EDA2, [4, 0], 4);
            mapper.AssertAreEqual("bag.berries.3.item", 0x227EDA4, [155, 0], "Oran Berry");
            mapper.AssertAreEqual("bag.berries.3.quantity", 0x227EDA6, [2, 0], 2);
            mapper.AssertAreEqual("bag.berries.4.item", 0x227EDA8, [156, 0], "Persim Berry");
            mapper.AssertAreEqual("bag.berries.4.quantity", 0x227EDAA, [3, 0], 3);
            mapper.AssertAreEqual("bag.berries.5.item", 0x227EDAC, [158, 0], "Sitrus Berry");
            mapper.AssertAreEqual("bag.berries.5.quantity", 0x227EDAE, [1, 0], 1);
            mapper.AssertAreEqual("bag.berries.6.item", 0x227EDB0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.6.quantity", 0x227EDB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.7.item", 0x227EDB4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.7.quantity", 0x227EDB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.8.item", 0x227EDB8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.8.quantity", 0x227EDBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.9.item", 0x227EDBC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.9.quantity", 0x227EDBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.10.item", 0x227EDC0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.10.quantity", 0x227EDC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.11.item", 0x227EDC4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.11.quantity", 0x227EDC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.12.item", 0x227EDC8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.12.quantity", 0x227EDCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.13.item", 0x227EDCC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.13.quantity", 0x227EDCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.14.item", 0x227EDD0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.14.quantity", 0x227EDD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.15.item", 0x227EDD4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.15.quantity", 0x227EDD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.16.item", 0x227EDD8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.16.quantity", 0x227EDDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.17.item", 0x227EDDC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.17.quantity", 0x227EDDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.18.item", 0x227EDE0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.18.quantity", 0x227EDE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.19.item", 0x227EDE4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.19.quantity", 0x227EDE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.20.item", 0x227EDE8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.20.quantity", 0x227EDEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.21.item", 0x227EDEC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.21.quantity", 0x227EDEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.22.item", 0x227EDF0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.22.quantity", 0x227EDF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.23.item", 0x227EDF4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.23.quantity", 0x227EDF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.24.item", 0x227EDF8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.24.quantity", 0x227EDFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.25.item", 0x227EDFC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.25.quantity", 0x227EDFE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.26.item", 0x227EE00, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.26.quantity", 0x227EE02, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.27.item", 0x227EE04, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.27.quantity", 0x227EE06, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.28.item", 0x227EE08, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.28.quantity", 0x227EE0A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.29.item", 0x227EE0C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.29.quantity", 0x227EE0E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.30.item", 0x227EE10, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.30.quantity", 0x227EE12, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.31.item", 0x227EE14, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.31.quantity", 0x227EE16, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.32.item", 0x227EE18, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.32.quantity", 0x227EE1A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.33.item", 0x227EE1C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.33.quantity", 0x227EE1E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.34.item", 0x227EE20, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.34.quantity", 0x227EE22, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.35.item", 0x227EE24, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.35.quantity", 0x227EE26, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.36.item", 0x227EE28, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.36.quantity", 0x227EE2A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.37.item", 0x227EE2C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.37.quantity", 0x227EE2E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.38.item", 0x227EE30, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.38.quantity", 0x227EE32, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.39.item", 0x227EE34, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.39.quantity", 0x227EE36, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.40.item", 0x227EE38, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.40.quantity", 0x227EE3A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.41.item", 0x227EE3C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.41.quantity", 0x227EE3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.42.item", 0x227EE40, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.42.quantity", 0x227EE42, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.43.item", 0x227EE44, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.43.quantity", 0x227EE46, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.44.item", 0x227EE48, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.44.quantity", 0x227EE4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.45.item", 0x227EE4C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.45.quantity", 0x227EE4E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.46.item", 0x227EE50, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.46.quantity", 0x227EE52, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.47.item", 0x227EE54, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.47.quantity", 0x227EE56, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.48.item", 0x227EE58, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.48.quantity", 0x227EE5A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.49.item", 0x227EE5C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.49.quantity", 0x227EE5E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.50.item", 0x227EE60, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.50.quantity", 0x227EE62, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.51.item", 0x227EE64, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.51.quantity", 0x227EE66, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.52.item", 0x227EE68, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.52.quantity", 0x227EE6A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.53.item", 0x227EE6C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.53.quantity", 0x227EE6E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.54.item", 0x227EE70, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.54.quantity", 0x227EE72, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.55.item", 0x227EE74, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.55.quantity", 0x227EE76, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.56.item", 0x227EE78, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.56.quantity", 0x227EE7A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.57.item", 0x227EE7C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.57.quantity", 0x227EE7E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.58.item", 0x227EE80, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.58.quantity", 0x227EE82, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.59.item", 0x227EE84, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.59.quantity", 0x227EE86, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.60.item", 0x227EE88, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.60.quantity", 0x227EE8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.61.item", 0x227EE8C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.61.quantity", 0x227EE8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.62.item", 0x227EE90, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.62.quantity", 0x227EE92, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.63.item", 0x227EE94, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.63.quantity", 0x227EE96, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.0.item", 0x227EED4, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.0.quantity", 0x227EED6, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.1.item", 0x227EED8, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.1.quantity", 0x227EEDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.2.item", 0x227EEDC, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.2.quantity", 0x227EEDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.3.item", 0x227EEE0, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.3.quantity", 0x227EEE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.4.item", 0x227EEE4, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.4.quantity", 0x227EEE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.5.item", 0x227EEE8, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.5.quantity", 0x227EEEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.6.item", 0x227EEEC, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.6.quantity", 0x227EEEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.7.item", 0x227EEF0, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.7.quantity", 0x227EEF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.8.item", 0x227EEF4, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.8.quantity", 0x227EEF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.9.item", 0x227EEF8, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.9.quantity", 0x227EEFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.0.item", 0x227ECC8, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.0.quantity", 0x227ECCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.1.item", 0x227ECCC, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.1.quantity", 0x227ECCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.2.item", 0x227ECD0, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.2.quantity", 0x227ECD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.3.item", 0x227ECD4, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.3.quantity", 0x227ECD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.4.item", 0x227ECD8, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.4.quantity", 0x227ECDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.5.item", 0x227ECDC, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.5.quantity", 0x227ECDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.6.item", 0x227ECE0, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.6.quantity", 0x227ECE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.7.item", 0x227ECE4, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.7.quantity", 0x227ECE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.8.item", 0x227ECE8, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.8.quantity", 0x227ECEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.9.item", 0x227ECEC, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.9.quantity", 0x227ECEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.10.item", 0x227ECF0, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.10.quantity", 0x227ECF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.11.item", 0x227ECF4, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.11.quantity", 0x227ECF6, [0, 0], 0);
            mapper.AssertAreEqual("overworld.map_name", 0x227F42C, [88, 1], "Route 203 - Map 1");
            mapper.AssertAreEqual("overworld.map_index", 0x227F42C, [88, 1], 344);
            mapper.AssertAreEqual("overworld.x", 0x227F434, [204, 0, 0, 0], 204);
            mapper.AssertAreEqual("overworld.y", 0x227F438, [239, 2, 0, 0], 751);
            mapper.AssertAreEqual("overworld.encounter_rate", 30);
            mapper.AssertAreEqual("overworld.encounter_rates.walking", 0x22A157C, [30, 0, 0, 0], 30);
            mapper.AssertAreEqual("overworld.encounter_rates.surfing", 0x22A1648, [10, 0, 0, 0], 10);
            mapper.AssertAreEqual("overworld.encounter_rates.old_rod", 0x22A16A0, [25, 0, 0, 0], 25);
            mapper.AssertAreEqual("overworld.encounter_rates.good_rod", 0x22A16CC, [50, 0, 0, 0], 50);
            mapper.AssertAreEqual("overworld.encounter_rates.super_rod", 0x22A16F8, [75, 0, 0, 0], 75);
            mapper.AssertAreEqual("flags.new_game_1", 0x227F2C4, [25], true);
            mapper.AssertAreEqual("flags.new_game_2", 0x227F30D, [5], true);
            mapper.AssertAreEqual("flags.new_game_3", 0x227F30F, [1], true);
            mapper.AssertAreEqual("flags.new_game_overworld_rendered_1", 0x227F222, [228], true);
            mapper.AssertAreEqual("flags.new_game_overworld_rendered_2", 0x227F234, [29], true);
            mapper.AssertAreEqual("flags.player_room_talked_to_barry", 0x227F0A2, [1], true);
            mapper.AssertAreEqual("flags.player_house_talked_to_mom", 0x227F0A0, [7], 7);
            mapper.AssertAreEqual("flags.bumped_into_barry", 0x227F124, [1], true);
            mapper.AssertAreEqual("flags.barry_room_talked_to_barry", 0x227F0BE, [0], false);
            mapper.AssertAreEqual("flags.choosing_starter", 0x227F064, [4], 4);
            mapper.AssertAreEqual("flags.beat_barry_1a", 0x227EFF2, [9], true);
            mapper.AssertAreEqual("flags.beat_barry_1b", 0x227EFF2, [9], false);
            mapper.AssertAreEqual("flags.got_running_shoes", 0x227F4BA, [1], true);
            mapper.AssertAreEqual("flags.barry_follows_1", 0x227F2C4, [25], false);
            mapper.AssertAreEqual("flags.going_to_lake_valor", 0x227F2C4, [25], false);
            mapper.AssertAreEqual("flags.lake_valor_cyrus_scene_finished", 0x227F082, [1], true);
            mapper.AssertAreEqual("flags.route_201_mart_employee_potion", 0x227F1A5, [16], true);
            mapper.AssertAreEqual("flags.got_pokedex", 0x227F1AA, [15], true);
            mapper.AssertAreEqual("flags.lab_scene_ended", 0x227F0A4, [4], false);
            mapper.AssertAreEqual("flags.got_tm27_return", 0x227F1F0, [177], true);
            mapper.AssertAreEqual("flags.got_tour", 0x227F03A, [2], 2);
            mapper.AssertAreEqual("flags.mom_healed", 0x227F198, [0], false);
            mapper.AssertAreEqual("flags.got_journal", 0x227F2C4, [25], true);
            mapper.AssertAreEqual("flags.got_parcel", 0x227F1A9, [156], true);
            mapper.AssertAreEqual("flags.learned_to_catch_pokemon", 0x227F066, [1], true);
            mapper.AssertAreEqual("flags.beat_youngster_tristan", 0x227F242, [14], true);
            mapper.AssertAreEqual("flags.beat_lass_natalie", 0x227F242, [14], true);
            mapper.AssertAreEqual("flags.beat_youngster_logan", 0x227F242, [14], true);
            mapper.AssertAreEqual("flags.got_vs_recorder", 0x227F046, [4], false);
            mapper.AssertAreEqual("flags.got_town_map", 0x227F1B6, [14], false);
            mapper.AssertAreEqual("flags.jubilife_city_events", 0x227F126, [2], 2);
            mapper.AssertAreEqual("flags.poketch_coupon_1", 0x227F1B5, [230], true);
            mapper.AssertAreEqual("flags.poketch_coupon_2", 0x227F1B5, [230], true);
            mapper.AssertAreEqual("flags.poketch_coupon_3", 0x227F1B5, [230], true);
            mapper.AssertAreEqual("flags.got_poketch", 0x227F1B6, [14], true);
            mapper.AssertAreEqual("flags.beat_lass_sarah", 0x227F243, [84], true);
            mapper.AssertAreEqual("flags.beat_youngster_tyler", 0x227F243, [84], true);
            mapper.AssertAreEqual("flags.beat_lass_samantha", 0x227F243, [84], false);
            mapper.AssertAreEqual("flags.beat_barry_2", 0x227F068, [1], true);
            mapper.AssertAreEqual("flags.beat_youngster_dallas", 0x227F26E, [56], true);
            mapper.AssertAreEqual("flags.beat_youngster_sebastian", 0x227F26E, [56], true);
            mapper.AssertAreEqual("flags.beat_lass_kaitlin", 0x227F26A, [184], true);
            mapper.AssertAreEqual("flags.beat_picknicker_diana", 0x227F26B, [142], true);
            mapper.AssertAreEqual("flags.walked_to_gym", 0x227F04A, [3], true);
            mapper.AssertAreEqual("flags.oreburgh_mine_hidden_heart_scale", 0x227F213, [0], false);
            mapper.AssertAreEqual("flags.oreburgh_mine_dire_hit", 0x227F237, [2], false);
            mapper.AssertAreEqual("flags.oreburgh_mine_yellow_shard", 0x227F237, [2], false);
            mapper.AssertAreEqual("flags.oreburgh_mine_poke_ball", 0x227F234, [29], false);
            mapper.AssertAreEqual("flags.oreburgh_mine_escape_rope", 0x227F217, [32], true);
            mapper.AssertAreEqual("flags.oreburgh_mine_potion", 0x227F217, [32], false);
            mapper.AssertAreEqual("flags.beat_worker_colin", 0x227F25A, [5], false);
            mapper.AssertAreEqual("flags.beat_worker_mason", 0x227F25A, [5], false);
            mapper.AssertAreEqual("flags.talked_to_roark", 0x227F1A7, [39], true);
            mapper.AssertAreEqual("flags.got_rock_smash", 0x227F19C, [0], false);
            mapper.AssertAreEqual("flags.beat_youngster_jonathon", 0x227F260, [48], true);
            mapper.AssertAreEqual("flags.beat_youngster_darius", 0x227F260, [48], true);
            mapper.AssertAreEqual("flags.got_tm76_stealth_rock", 0x227F1A6, [50], true);
            mapper.AssertAreEqual("flags.jubilife_city_event_counter", 0x227F044, [2], false);
            mapper.AssertAreEqual("flags.got_fashion_case", 0x227F1B6, [14], true);
            mapper.AssertAreEqual("flags.got_tm39_rock_tomb", 0x227F218, [210], true);
            mapper.AssertAreEqual("flags.ravaged_path_potion", 0x227F236, [22], true);
            mapper.AssertAreEqual("flags.beat_aroma_laby_taylor", 0x227F243, [84], true);
            mapper.AssertAreEqual("flags.route_204_awakening", 0x227F236, [22], true);
            mapper.AssertAreEqual("flags.bug_catcher_brandon", 0x227F243, [84], false);
            mapper.AssertAreEqual("flags.got_quick_claw", 0x227F14F, [0], false);
            mapper.AssertAreEqual("flags.got_old_rod", 0x227F148, [0], false);
            mapper.AssertAreEqual("flags.route_202_potion", 0x227F1B6, [14], false);
            mapper.AssertAreEqual("flags.route_204_paralyze_heal", 0x227F1C1, [0], false);
            mapper.AssertAreEqual("flags.beat_youngster_michael", 0x227F1E2, [124], true);
            mapper.AssertAreEqual("flags.beat_lass_madeline", 0x227F26A, [184], false);
            mapper.AssertAreEqual("flags.route_203_poke_ball", 0x227F1B7, [0], false);
            mapper.AssertAreEqual("flags.route_203_repel", 0x227F1B6, [14], false);
            mapper.AssertAreEqual("flags.route_203_x_defend", 0x227F1D6, [126], true);
            mapper.AssertAreEqual("battle.mode", "Trainer");
            mapper.AssertAreEqual("battle.player.party_position", 0x22C5B3C, [0], 0);
            mapper.AssertAreEqual("battle.player.party_position_2", 0x22C5B48, [0], 0);
            mapper.AssertAreEqual("battle.player.team_count", 0x227E248, [6], 6);
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0x22C5750, [133, 1], "Torterra");
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0x22C5786, [62, 1, 65, 1, 51, 1, 49, 1, 255, 255, 98, 1, 88, 67, 165, 1, 204, 156, 121, 1, 255, 255], "TWIG");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0x22C5784, [84], 84);
            mapper.AssertAreEqual("battle.player.active_pokemon.exp", 0x22C57B4, [29, 154, 9, 0], 629277);
            mapper.AssertAreEqual("battle.player.active_pokemon.nature", 0x22C57B8, [192, 125, 239, 69], "Hardy");
            mapper.AssertAreEqual("battle.player.active_pokemon.friendship", 0x22C5785, [255], 255);
            mapper.AssertAreEqual("battle.player.active_pokemon.ability", 0x22C5777, [65], "Overgrow");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0x22C5774, [12], "Grass");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0x22C5775, [4], "Ground");
            mapper.AssertAreEqual("battle.player.active_pokemon.ot_name", 0x22C57A4, [61, 1, 45, 1, 57, 1, 62, 1], "SCOT");
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0x22C57C8, [253, 0], "Shell Bell");
            mapper.AssertAreEqual("battle.player.active_pokemon.status_condition", 0x22C57BC, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0x22C575C, [89, 0], "Earthquake");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0x22C577C, [10], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0x22C575E, [216, 0], "Return");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0x22C577D, [20], 20);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0x22C5760, [14, 0], "Swords Dance");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0x22C577E, [29], 29);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0x22C5762, [157, 0], "Rock Slide");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0x22C577F, [10], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0x22C579C, [37, 1], 293);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0x22C57A0, [37, 1], 293);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0x22C5752, [237, 0], 237);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0x22C5754, [217, 0], 217);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0x22C5756, [162, 0], 162);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0x22C5758, [175, 0], 175);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0x22C575A, [177, 0], 177);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0x22C5769, [7], 1);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0x22C576A, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0x22C576B, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0x22C576C, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0x22C576D, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0x22C576E, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0x22C576F, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.hp", 0x22C5764, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.attack", 0x22C5764, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.defense", 0x22C5764, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.speed", 0x22C5764, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_attack", 0x22C5764, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_defense", 0x22C5764, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.active_pokemon.internals.personality_value", 0x22C57B8, [192, 125, 239, 69], 1173323200);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.species", 0x22C58D0, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nickname", 0x22C5906, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.level", 0x22C5904, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.exp", 0x22C5934, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nature", 0x22C5938, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.friendship", 0x22C5905, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ability", 0x22C58F7, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_1", 0x22C58F4, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_2", 0x22C58F5, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ot_name", 0x22C5924, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.held_item", 0x22C5948, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_condition", 0x22C593C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.move", 0x22C58DC, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp", 0x22C58FC, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.move", 0x22C58DE, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp", 0x22C58FD, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.move", 0x22C58E0, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp", 0x22C58FE, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.move", 0x22C58E2, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp", 0x22C58FF, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp", 0x22C591C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp_max", 0x22C5920, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.attack", 0x22C58D2, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.defense", 0x22C58D4, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.speed", 0x22C58D6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_attack", 0x22C58D8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_defense", 0x22C58DA, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.attack", 0x22C58E9, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.defense", 0x22C58EA, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.speed", 0x22C58EB, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_attack", 0x22C58EC, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_defense", 0x22C58ED, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.accuracy", 0x22C58EE, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.evasion", 0x22C58EF, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.hp", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.attack", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.defense", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.speed", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_attack", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_defense", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.internals.personality_value", 0x22C5938, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.species", 0x8, [133, 1], "Torterra");
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0x8, [133, 1], 389);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0x48, [62, 1, 65, 1, 51, 1, 49, 1, 255, 255, 98, 1, 88, 67, 165, 1, 204, 156, 121, 1, 56, 184], "TWIG");
            mapper.AssertAreEqual("battle.player.team.0.level", 0x8C, [84], 84);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0x10, [29, 154, 9, 0], 629277);
            mapper.AssertAreEqual("battle.player.team.0.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("battle.player.team.0.ability", 0x15, [65], "Overgrow");
            mapper.AssertAreEqual("battle.player.team.0.nature", "Hardy");
            mapper.AssertAreEqual("battle.player.team.0.held_item", 0xA, [253, 0], "Shell Bell");
            mapper.AssertAreEqual("battle.player.team.0.friendship", 0x14, [255], 255);
            mapper.AssertAreEqual("battle.player.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0x28, [89, 0], "Earthquake");
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0x30, [10], 10);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0x2A, [216, 0], "Return");
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0x31, [20], 20);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0x2C, [14, 0], "Swords Dance");
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0x32, [29], 29);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0x2E, [157, 0], "Rock Slide");
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0x33, [10], 10);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0x8E, [37, 1], 293);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0x90, [37, 1], 293);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0x92, [237, 0], 237);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0x94, [217, 0], 217);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0x96, [162, 0], 162);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_attack", 0x98, [175, 0], 175);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_defense", 0x9A, [177, 0], 177);
            mapper.AssertAreEqual("battle.player.team.0.ivs.hp", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_attack", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_defense", 0x38, [255, 255, 255, 191], 31);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0x18, [65], 65);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0x19, [112], 112);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0x1A, [50], 50);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0x1B, [177], 177);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_attack", 0x1C, [88], 88);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_defense", 0x1D, [18], 18);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_egg", 0x38, [255, 255, 255, 191], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_nicknamed", 0x38, [255, 255, 255, 191], true);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.internals.personality_value", 1173323200);
            mapper.AssertAreEqual("battle.player.team.0.internals.checksum", 0x6, [239, 174], 44783);
            mapper.AssertAreEqual("battle.player.team.0.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("battle.player.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_location", 0x80, [16, 0], 16);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_level", 0x84, [5], 5);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.female_ot_gender", 0x84, [5], false);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.encounter_type", 0x85, [24], 24);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("battle.player.team.1.species", 0x8, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0x8, [143, 1], 399);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0x48, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0], "BIDOOF");
            mapper.AssertAreEqual("battle.player.team.1.level", 0x8C, [7], 7);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0x10, [94, 1, 0, 0], 350);
            mapper.AssertAreEqual("battle.player.team.1.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("battle.player.team.1.ability", 0x15, [109], "Unaware");
            mapper.AssertAreEqual("battle.player.team.1.nature", "Naughty");
            mapper.AssertAreEqual("battle.player.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.friendship", 0x14, [193], 193);
            mapper.AssertAreEqual("battle.player.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0x2A, [15, 0], "Cut");
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0x2C, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0x32, [40], 40);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0x8E, [27, 0], 27);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0x90, [27, 0], 27);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0x92, [12, 0], 12);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0x94, [10, 0], 10);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0x96, [10, 0], 10);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_attack", 0x98, [10, 0], 10);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_defense", 0x9A, [9, 0], 9);
            mapper.AssertAreEqual("battle.player.team.1.ivs.hp", 0x38, [153, 4, 133, 2], 25);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0x38, [153, 4, 133, 2], 4);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0x38, [153, 4, 133, 2], 1);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0x38, [153, 4, 133, 2], 10);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_attack", 0x38, [153, 4, 133, 2], 8);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_defense", 0x38, [153, 4, 133, 2], 1);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0x1A, [1], 1);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_defense", 0x1D, [1], 1);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_egg", 0x38, [153, 4, 133, 2], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_nicknamed", 0x38, [153, 4, 133, 2], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.internals.personality_value", 1251239079);
            mapper.AssertAreEqual("battle.player.team.1.internals.checksum", 0x6, [96, 163], 41824);
            mapper.AssertAreEqual("battle.player.team.1.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("battle.player.team.1.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_location", 0x80, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_level", 0x84, [2], 2);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.female_ot_gender", 0x84, [2], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.encounter_type", 0x85, [2], 2);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("battle.player.team.2.species", 0x8, [140, 1], "Starly");
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0x8, [140, 1], 396);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0x48, [63, 1, 56, 1, 54, 1, 63, 1, 45, 1, 53, 1, 67, 1, 255, 255, 0, 0, 0, 0, 0, 0], "UNLUCKY");
            mapper.AssertAreEqual("battle.player.team.2.level", 0x8C, [4], 4);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0x10, [96, 0, 0, 0], 96);
            mapper.AssertAreEqual("battle.player.team.2.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("battle.player.team.2.ability", 0x15, [51], "Keen Eye");
            mapper.AssertAreEqual("battle.player.team.2.nature", "Calm");
            mapper.AssertAreEqual("battle.player.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.friendship", 0x14, [185], 185);
            mapper.AssertAreEqual("battle.player.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0x2A, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0x31, [40], 40);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0x2C, [19, 0], "Fly");
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0x32, [15], 15);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0x2E, [176, 1], "Defog");
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0x33, [15], 15);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0x8E, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0x90, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0x92, [8, 0], 8);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0x94, [7, 0], 7);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0x96, [9, 0], 9);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_attack", 0x98, [8, 0], 8);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_defense", 0x9A, [7, 0], 7);
            mapper.AssertAreEqual("battle.player.team.2.ivs.hp", 0x38, [140, 45, 242, 140], 12);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0x38, [140, 45, 242, 140], 12);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0x38, [140, 45, 242, 140], 11);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0x38, [140, 45, 242, 140], 4);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_attack", 0x38, [140, 45, 242, 140], 15);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_defense", 0x38, [140, 45, 242, 140], 6);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_egg", 0x38, [140, 45, 242, 140], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_nicknamed", 0x38, [140, 45, 242, 140], true);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.internals.personality_value", 3428230445);
            mapper.AssertAreEqual("battle.player.team.2.internals.checksum", 0x6, [183, 54], 14007);
            mapper.AssertAreEqual("battle.player.team.2.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("battle.player.team.2.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_location", 0x80, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_level", 0x84, [4], 4);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.female_ot_gender", 0x84, [4], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.encounter_type", 0x85, [2], 2);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("battle.player.team.3.species", 0x8, [54, 0], "Psyduck");
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0x8, [54, 0], 54);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0x48, [44, 1, 43, 1, 54, 1, 54, 1, 61, 1, 255, 255, 53, 1, 255, 255, 0, 0, 0, 0, 0, 0], "BALLS");
            mapper.AssertAreEqual("battle.player.team.3.level", 0x8C, [10], 10);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0x10, [208, 4, 0, 0], 1232);
            mapper.AssertAreEqual("battle.player.team.3.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("battle.player.team.3.ability", 0x15, [6], "Damp");
            mapper.AssertAreEqual("battle.player.team.3.nature", "Relaxed");
            mapper.AssertAreEqual("battle.player.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.friendship", 0x14, [196], 196);
            mapper.AssertAreEqual("battle.player.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0x28, [90, 1], "Water Sport");
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0x30, [15], 15);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0x2A, [127, 0], "Waterfall");
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0x31, [15], 15);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0x2C, [39, 0], "Tail Whip");
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0x32, [30], 30);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0x2E, [57, 0], "Surf");
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0x33, [15], 15);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0x8E, [32, 0], 32);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0x90, [32, 0], 32);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0x92, [18, 0], 18);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0x94, [18, 0], 18);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0x96, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_attack", 0x98, [18, 0], 18);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_defense", 0x9A, [17, 0], 17);
            mapper.AssertAreEqual("battle.player.team.3.ivs.hp", 0x38, [125, 231, 134, 184], 29);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0x38, [125, 231, 134, 184], 27);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0x38, [125, 231, 134, 184], 25);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0x38, [125, 231, 134, 184], 13);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_attack", 0x38, [125, 231, 134, 184], 8);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_defense", 0x38, [125, 231, 134, 184], 28);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0x1B, [3], 3);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_egg", 0x38, [125, 231, 134, 184], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_nicknamed", 0x38, [125, 231, 134, 184], true);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.internals.personality_value", 4053449682);
            mapper.AssertAreEqual("battle.player.team.3.internals.checksum", 0x6, [123, 222], 56955);
            mapper.AssertAreEqual("battle.player.team.3.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("battle.player.team.3.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_location", 0x80, [59, 0], 59);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_level", 0x84, [6], 6);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.female_ot_gender", 0x84, [6], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.encounter_type", 0x85, [5], 5);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("battle.player.team.4.species", 0x8, [74, 0], "Geodude");
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0x8, [74, 0], 74);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0x48, [43, 1, 255, 255, 57, 1, 46, 1, 63, 1, 46, 1, 47, 1, 255, 255, 0, 0, 0, 0, 0, 0], "A");
            mapper.AssertAreEqual("battle.player.team.4.level", 0x8C, [8], 8);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0x10, [58, 1, 0, 0], 314);
            mapper.AssertAreEqual("battle.player.team.4.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("battle.player.team.4.ability", 0x15, [69], "Rock Head");
            mapper.AssertAreEqual("battle.player.team.4.nature", "Rash");
            mapper.AssertAreEqual("battle.player.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.friendship", 0x14, [187], 187);
            mapper.AssertAreEqual("battle.player.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0x28, [249, 0], "Rock Smash");
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0x30, [15], 15);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0x2A, [70, 0], "Strength");
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0x31, [15], 15);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0x2C, [175, 1], "Rock Climb");
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0x32, [20], 20);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0x2E, [141, 1], "Rock Polish");
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0x33, [20], 20);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0x8E, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0x90, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0x92, [19, 0], 19);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0x94, [23, 0], 23);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0x96, [8, 0], 8);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_attack", 0x98, [9, 0], 9);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_defense", 0x9A, [10, 0], 10);
            mapper.AssertAreEqual("battle.player.team.4.ivs.hp", 0x38, [76, 103, 17, 184], 12);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0x38, [76, 103, 17, 184], 26);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0x38, [76, 103, 17, 184], 25);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0x38, [76, 103, 17, 184], 2);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_attack", 0x38, [76, 103, 17, 184], 1);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_defense", 0x38, [76, 103, 17, 184], 28);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_egg", 0x38, [76, 103, 17, 184], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_nicknamed", 0x38, [76, 103, 17, 184], true);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.internals.personality_value", 3133829144);
            mapper.AssertAreEqual("battle.player.team.4.internals.checksum", 0x6, [101, 157], 40293);
            mapper.AssertAreEqual("battle.player.team.4.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("battle.player.team.4.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_location", 0x80, [46, 0], 46);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_level", 0x84, [8], 8);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.female_ot_gender", 0x84, [8], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.encounter_type", 0x85, [5], 5);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("battle.player.team.5.species", 0x8, [175, 0], "Togepi");
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0x8, [175, 0], 175);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0x48, [62, 1, 57, 1, 49, 1, 47, 1, 58, 1, 51, 1, 255, 255, 25, 192, 24, 179, 12, 2, 48, 55], "TOGEPI");
            mapper.AssertAreEqual("battle.player.team.5.level", 0x8C, [1], 1);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ot_name", 0x68, [61, 1, 45, 1, 57, 1, 62, 1, 62, 1, 255, 255, 0, 0, 0, 0], "SCOTT");
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0xC, [195, 155], 39875);
            mapper.AssertAreEqual("battle.player.team.5.ability", 0x15, [32], "Serene Grace");
            mapper.AssertAreEqual("battle.player.team.5.nature", "Docile");
            mapper.AssertAreEqual("battle.player.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.friendship", 0x14, [213], 213);
            mapper.AssertAreEqual("battle.player.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0x28, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0x30, [40], 40);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0x2A, [204, 0], "Charm");
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0x31, [20], 20);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0x8E, [11, 0], 11);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0x90, [11, 0], 11);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0x92, [5, 0], 5);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0x94, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0x96, [5, 0], 5);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_attack", 0x98, [5, 0], 5);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_defense", 0x9A, [6, 0], 6);
            mapper.AssertAreEqual("battle.player.team.5.ivs.hp", 0x38, [130, 189, 223, 30], 2);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0x38, [130, 189, 223, 30], 12);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0x38, [130, 189, 223, 30], 15);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0x38, [130, 189, 223, 30], 31);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_attack", 0x38, [130, 189, 223, 30], 13);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_defense", 0x38, [130, 189, 223, 30], 15);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_egg", 0x38, [130, 189, 223, 30], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_nicknamed", 0x38, [130, 189, 223, 30], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.internals.personality_value", 2971769981);
            mapper.AssertAreEqual("battle.player.team.5.internals.checksum", 0x6, [89, 222], 56921);
            mapper.AssertAreEqual("battle.player.team.5.internals.secret_id", 0xE, [182, 67], 17334);
            mapper.AssertAreEqual("battle.player.team.5.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_egg_received", 0x78, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.egg_location", 0x7E, [186, 11], 3002);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_location", 0x80, [53, 0], 53);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 0, 0, 0], 1);
            mapper.AssertAreEqual("battle.wild.0.species", 0x8, [122, 8], null);
            mapper.AssertAreEqual("battle.wild.0.dex_number", 0x8, [122, 8], 2170);
            mapper.AssertAreEqual("battle.wild.0.nickname", 0x48, [183, 226, 150, 98, 94, 154, 151, 163, 123, 20, 3, 110, 132, 57, 137, 170, 239, 219, 234, 195, 255, 138], "");
            mapper.AssertAreEqual("battle.wild.0.level", 0x8C, [198], 198);
            mapper.AssertAreEqual("battle.wild.0.exp", 0x10, [48, 134, 204, 226], -489912784);
            mapper.AssertAreEqual("battle.wild.0.ot_name", 0x68, [169, 243, 225, 191, 152, 115, 127, 0, 214, 72, 72, 200, 223, 183, 182, 56], "");
            mapper.AssertAreEqual("battle.wild.0.ot_id", 0xC, [7, 90], 23047);
            mapper.AssertAreEqual("battle.wild.0.ability", 0x15, [167], null);
            mapper.AssertAreEqual("battle.wild.0.nature", "Adamant");
            mapper.AssertAreEqual("battle.wild.0.held_item", 0xA, [126, 233], null);
            mapper.AssertAreEqual("battle.wild.0.friendship", 0x14, [171], 171);
            mapper.AssertAreEqual("battle.wild.0.pokerus", 0x82, [106], 106);
            mapper.AssertAreEqual("battle.wild.0.status_condition", 0x88, [221], null);
            mapper.AssertAreEqual("battle.wild.0.moves.0.move", 0x28, [140, 85], null);
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp", 0x30, [192], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp_up", 0x34, [19], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.1.move", 0x2A, [120, 145], null);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp_up", 0x35, [63], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.2.move", 0x2C, [240, 47], null);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp", 0x32, [184], 56);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp_up", 0x36, [128], 2);
            mapper.AssertAreEqual("battle.wild.0.moves.3.move", 0x2E, [141, 97], null);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp", 0x33, [207], 15);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp_up", 0x37, [48], 0);
            mapper.AssertAreEqual("battle.wild.0.stats.hp", 0x8E, [245, 68], 17653);
            mapper.AssertAreEqual("battle.wild.0.stats.hp_max", 0x90, [152, 71], 18328);
            mapper.AssertAreEqual("battle.wild.0.stats.attack", 0x92, [113, 91], 23409);
            mapper.AssertAreEqual("battle.wild.0.stats.defense", 0x94, [159, 44], 11423);
            mapper.AssertAreEqual("battle.wild.0.stats.speed", 0x96, [128, 229], 58752);
            mapper.AssertAreEqual("battle.wild.0.stats.special_attack", 0x98, [77, 238], 61005);
            mapper.AssertAreEqual("battle.wild.0.stats.special_defense", 0x9A, [137, 62], 16009);
            mapper.AssertAreEqual("battle.wild.0.ivs.hp", 0x38, [54, 72, 251, 72], 22);
            mapper.AssertAreEqual("battle.wild.0.ivs.attack", 0x38, [54, 72, 251, 72], 1);
            mapper.AssertAreEqual("battle.wild.0.ivs.defense", 0x38, [54, 72, 251, 72], 18);
            mapper.AssertAreEqual("battle.wild.0.ivs.speed", 0x38, [54, 72, 251, 72], 22);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_attack", 0x38, [54, 72, 251, 72], 15);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_defense", 0x38, [54, 72, 251, 72], 4);
            mapper.AssertAreEqual("battle.wild.0.evs.hp", 0x18, [89], 89);
            mapper.AssertAreEqual("battle.wild.0.evs.attack", 0x19, [244], 244);
            mapper.AssertAreEqual("battle.wild.0.evs.defense", 0x1A, [44], 44);
            mapper.AssertAreEqual("battle.wild.0.evs.speed", 0x1B, [239], 239);
            mapper.AssertAreEqual("battle.wild.0.evs.special_attack", 0x1C, [56], 56);
            mapper.AssertAreEqual("battle.wild.0.evs.special_defense", 0x1D, [244], 244);
            mapper.AssertAreEqual("battle.wild.0.flags.is_egg", 0x38, [54, 72, 251, 72], true);
            mapper.AssertAreEqual("battle.wild.0.flags.is_nicknamed", 0x38, [54, 72, 251, 72], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_1", 0x4, [126], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_2", 0x4, [126], true);
            mapper.AssertAreEqual("battle.wild.0.flags.is_bad_egg", 0x4, [126], true);
            mapper.AssertAreEqual("battle.wild.0.internals.personality_value", 2178);
            mapper.AssertAreEqual("battle.wild.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.internals.secret_id", 0xE, [176, 49], 12720);
            mapper.AssertAreEqual("battle.wild.0.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.wild.0.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.wild.0.misc.sheen", 0x23, [153], 153);
            mapper.AssertAreEqual("battle.wild.0.misc.hgss_ball", 0x86, [132], 132);
            mapper.AssertAreEqual("battle.wild.0.misc.performance", 0x87, [186], 186);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_egg_received", 0x78, [49, 152, 35], 2332721);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_met", 0x7B, [251, 37, 117], 7677435);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.egg_location", 0x7E, [52, 190], 48692);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_location", 0x80, [2, 210], 53762);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.pokeball", 0x83, [112], 112);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_level", 0x84, [59], 59);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.female_ot_gender", 0x84, [59], false);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.encounter_type", 0x85, [216], 216);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cool", 0x1E, [197], 197);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_beauty", 0x1F, [202], 202);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cute", 0x20, [180], 180);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_smart", 0x21, [227], 227);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_tough", 0x22, [61], 61);
            mapper.AssertAreEqual("battle.wild.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [226, 114, 167, 203], -878218526);
            mapper.AssertAreEqual("battle.wild.1.species", 0x8, [142, 7], null);
            mapper.AssertAreEqual("battle.wild.1.dex_number", 0x8, [142, 7], 1934);
            mapper.AssertAreEqual("battle.wild.1.nickname", 0x48, [195, 237, 150, 98, 34, 149, 151, 163, 15, 27, 3, 110, 232, 54, 137, 170, 251, 212, 234, 195, 227, 133], "");
            mapper.AssertAreEqual("battle.wild.1.level", 0x8C, [76], 76);
            mapper.AssertAreEqual("battle.wild.1.exp", 0x10, [196, 137, 204, 226], -489911868);
            mapper.AssertAreEqual("battle.wild.1.ot_name", 0x68, [157, 252, 225, 191, 164, 124, 127, 0, 226, 71, 72, 200, 243, 184, 182, 56], "");
            mapper.AssertAreEqual("battle.wild.1.ot_id", 0xC, [251, 85], 22011);
            mapper.AssertAreEqual("battle.wild.1.ability", 0x15, [168], null);
            mapper.AssertAreEqual("battle.wild.1.nature", "Quiet");
            mapper.AssertAreEqual("battle.wild.1.held_item", 0xA, [126, 233], null);
            mapper.AssertAreEqual("battle.wild.1.friendship", 0x14, [71], 71);
            mapper.AssertAreEqual("battle.wild.1.pokerus", 0x82, [106], 106);
            mapper.AssertAreEqual("battle.wild.1.status_condition", 0x88, [89], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.move", 0x28, [184, 90], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp", 0x30, [244], 52);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp_up", 0x34, [63], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.1.move", 0x2A, [120, 145], null);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp", 0x31, [17], 17);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp_up", 0x35, [48], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.2.move", 0x2C, [204, 32], null);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp", 0x32, [184], 56);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp_up", 0x36, [128], 2);
            mapper.AssertAreEqual("battle.wild.1.moves.3.move", 0x2E, [141, 97], null);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp", 0x33, [207], 15);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp_up", 0x37, [48], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.hp", 0x8E, [248, 214], 55032);
            mapper.AssertAreEqual("battle.wild.1.stats.hp_max", 0x90, [186, 0], 186);
            mapper.AssertAreEqual("battle.wild.1.stats.attack", 0x92, [80, 12], 3152);
            mapper.AssertAreEqual("battle.wild.1.stats.defense", 0x94, [75, 17], 4427);
            mapper.AssertAreEqual("battle.wild.1.stats.speed", 0x96, [246, 68], 17654);
            mapper.AssertAreEqual("battle.wild.1.stats.special_attack", 0x98, [223, 41], 10719);
            mapper.AssertAreEqual("battle.wild.1.stats.special_defense", 0x9A, [98, 208], 53346);
            mapper.AssertAreEqual("battle.wild.1.ivs.hp", 0x38, [34, 71, 251, 72], 2);
            mapper.AssertAreEqual("battle.wild.1.ivs.attack", 0x38, [34, 71, 251, 72], 25);
            mapper.AssertAreEqual("battle.wild.1.ivs.defense", 0x38, [34, 71, 251, 72], 17);
            mapper.AssertAreEqual("battle.wild.1.ivs.speed", 0x38, [34, 71, 251, 72], 22);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_attack", 0x38, [34, 71, 251, 72], 15);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_defense", 0x38, [34, 71, 251, 72], 4);
            mapper.AssertAreEqual("battle.wild.1.evs.hp", 0x18, [77], 77);
            mapper.AssertAreEqual("battle.wild.1.evs.attack", 0x19, [251], 251);
            mapper.AssertAreEqual("battle.wild.1.evs.defense", 0x1A, [44], 44);
            mapper.AssertAreEqual("battle.wild.1.evs.speed", 0x1B, [239], 239);
            mapper.AssertAreEqual("battle.wild.1.evs.special_attack", 0x1C, [36], 36);
            mapper.AssertAreEqual("battle.wild.1.evs.special_defense", 0x1D, [251], 251);
            mapper.AssertAreEqual("battle.wild.1.flags.is_egg", 0x38, [34, 71, 251, 72], true);
            mapper.AssertAreEqual("battle.wild.1.flags.is_nicknamed", 0x38, [34, 71, 251, 72], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_1", 0x4, [146], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_2", 0x4, [146], true);
            mapper.AssertAreEqual("battle.wild.1.flags.is_bad_egg", 0x4, [146], false);
            mapper.AssertAreEqual("battle.wild.1.internals.personality_value", 1942);
            mapper.AssertAreEqual("battle.wild.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.secret_id", 0xE, [176, 49], 12720);
            mapper.AssertAreEqual("battle.wild.1.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.wild.1.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.wild.1.misc.sheen", 0x23, [153], 153);
            mapper.AssertAreEqual("battle.wild.1.misc.hgss_ball", 0x86, [132], 132);
            mapper.AssertAreEqual("battle.wild.1.misc.performance", 0x87, [186], 186);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_egg_received", 0x78, [37, 151, 35], 2332453);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_met", 0x7B, [251, 57, 122], 8010235);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.egg_location", 0x7E, [52, 190], 48692);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_location", 0x80, [22, 221], 56598);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.pokeball", 0x83, [112], 112);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_level", 0x84, [215], 87);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.female_ot_gender", 0x84, [215], true);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.encounter_type", 0x85, [216], 216);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cool", 0x1E, [197], 197);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_beauty", 0x1F, [202], 202);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cute", 0x20, [160], 160);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_smart", 0x21, [236], 236);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_tough", 0x22, [61], 61);
            mapper.AssertAreEqual("battle.wild.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [206, 125, 167, 203], -878215730);
            mapper.AssertAreEqual("battle.ally.name", 0x22BFA38, [0, 0], "Pokemon Trainer  -");
            mapper.AssertAreEqual("battle.ally.trainer", 0x22BFA38, [0, 0], "Pokemon Trainer  -");
            mapper.AssertAreEqual("battle.ally.id", 0x22BFA38, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.enemy_bar_synced_hp", 0x22C591C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team_count", 0x22CA5A0, [0], 0);
            mapper.AssertAreEqual("battle.ally.party_position", 0x22C5B48, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.species", 0x22C58D0, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nickname", 0x22C5906, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.level", 0x22C5904, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.exp", 0x22C5934, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nature", 0x22C5938, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.active_pokemon.friendship", 0x22C5905, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ability", 0x22C58F7, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_1", 0x22C58F4, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_2", 0x22C58F5, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.ot_name", 0x22C5924, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.held_item", 0x22C5948, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_condition", 0x22C593C, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.move", 0x22C58DC, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp", 0x22C58FC, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.move", 0x22C58DE, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp", 0x22C58FD, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.move", 0x22C58E0, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp", 0x22C58FE, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.move", 0x22C58E2, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp", 0x22C58FF, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp", 0x22C591C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp_max", 0x22C5920, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.attack", 0x22C58D2, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.defense", 0x22C58D4, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.speed", 0x22C58D6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_attack", 0x22C58D8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_defense", 0x22C58DA, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.attack", 0x22C58E9, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.defense", 0x22C58EA, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.speed", 0x22C58EB, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_attack", 0x22C58EC, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_defense", 0x22C58ED, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.accuracy", 0x22C58EE, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.evasion", 0x22C58EF, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.hp", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.attack", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.defense", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.speed", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_attack", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_defense", 0x22C58E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.internals.personality_value", 0x22C5938, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.0.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.0.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.ally.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0x22BFA36, [4, 0], "Youngster Michael");
            mapper.AssertAreEqual("battle.opponent.trainer", 0x22BFA36, [4, 0], "Youngster Michael");
            mapper.AssertAreEqual("battle.opponent.id", 0x22BFA36, [4, 0], 4);
            mapper.AssertAreEqual("battle.opponent.enemy_bar_synced_hp", 0x22C585C, [22, 0], 22);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x22C9FF0, [2], 2);
            mapper.AssertAreEqual("battle.opponent.party_position", 0x22C5B42, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x22C5810, [145, 1], "Kricketot");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x22C5846, [53, 1, 60, 1, 51, 1, 45, 1, 53, 1, 47, 1, 62, 1, 57, 1, 62, 1, 255, 255, 255, 255], "KRICKETOT");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x22C5844, [7], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x22C5874, [236, 0, 0, 0], 236);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nature", 0x22C5878, [136, 46, 39, 0], "Mild");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x22C5845, [70], 70);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x22C5837, [61], "Shed Skin");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x22C5834, [6], "Bug");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x22C5835, [6], "Bug");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x22C5864, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x22C5888, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0x22C587C, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x22C581C, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x22C583C, [39], 39);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x22C581E, [117, 0], "Bide");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x22C583D, [10], 10);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x22C5820, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x22C583E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x22C5822, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x22C583F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x22C585C, [22, 0], 22);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x22C5860, [22, 0], 22);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x22C5812, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x22C5814, [9, 0], 9);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x22C5816, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x22C5818, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x22C581A, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x22C5829, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x22C582A, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x22C582B, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x22C582C, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x22C582D, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x22C582E, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x22C582F, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x22C5824, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x22C5824, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x22C5824, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x22C5824, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x22C5824, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x22C5824, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.internals.personality_value", 0x22C5878, [136, 46, 39, 0], 2567816);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x8, [145, 1], "Kricketot");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x8, [145, 1], 401);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x48, [53, 1, 60, 1, 51, 1, 45, 1, 53, 1, 47, 1, 62, 1, 57, 1, 62, 1, 255, 255, 0, 0], "KRICKETOT");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x8C, [7], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x10, [236, 0, 0, 0], 236);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xC, [204, 28], 7372);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x15, [61], "Shed Skin");
            mapper.AssertAreEqual("battle.opponent.team.0.nature", "Mild");
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x14, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x28, [45, 0], "Growl");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x30, [39], 39);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2A, [117, 0], "Bide");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x31, [10], 10);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x8E, [22, 0], 22);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x90, [22, 0], 22);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x92, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x94, [9, 0], 9);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x96, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x98, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x9A, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 2567816);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x6, [109, 200], 51309);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.secret_id", 0xE, [37, 68], 17445);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_level", 0x84, [7], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.female_ot_gender", 0x84, [7], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x8, [41, 0], "Zubat");
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x8, [41, 0], 41);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x48, [68, 1, 63, 1, 44, 1, 43, 1, 62, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "ZUBAT");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x8C, [6], 6);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x10, [216, 0, 0, 0], 216);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xC, [125, 235], 60285);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x15, [39], "Inner Focus");
            mapper.AssertAreEqual("battle.opponent.team.1.nature", "Careful");
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x14, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x28, [141, 0], "Leech Life");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x30, [15], 15);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2A, [48, 0], "Supersonic");
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x31, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x8E, [20, 0], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x90, [20, 0], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x92, [10, 0], 10);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x94, [9, 0], 9);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x96, [11, 0], 11);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x98, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x9A, [9, 0], 9);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 11527048);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x6, [169, 221], 56745);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.secret_id", 0xE, [252, 156], 40188);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_level", 0x84, [6], 6);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.female_ot_gender", 0x84, [6], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.trainer", 0x22BFA3A, [0, 0], "Pokemon Trainer  -");
            mapper.AssertAreEqual("battle.opponent_2.party_position", 0x22C5B4E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.enemy_bar_synced_hp", 0x22C591C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team_count", 0x22CA5A0, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.species", 0x22C5990, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nickname", 0x22C59C6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.level", 0x22C59C4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.exp", 0x22C59F4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nature", 0x22C59F8, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.friendship", 0x22C59C5, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ability", 0x22C59B7, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_1", 0x22C59B4, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_2", 0x22C59B5, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ot_name", 0x22C59E4, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.held_item", 0x22C5A08, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.status_condition", 0x22C59FC, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.move", 0x22C599C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp", 0x22C59BC, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.move", 0x22C599E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp", 0x22C59BD, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.move", 0x22C59A0, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp", 0x22C59BE, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.move", 0x22C59A2, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp", 0x22C59BF, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp", 0x22C59DC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp_max", 0x22C59E0, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.attack", 0x22C5992, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.defense", 0x22C5994, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.speed", 0x22C5996, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_attack", 0x22C5998, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_defense", 0x22C599A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.attack", 0x22C59A9, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.defense", 0x22C59AA, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.speed", 0x22C59AB, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_attack", 0x22C59AC, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_defense", 0x22C59AD, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.accuracy", 0x22C59AE, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.evasion", 0x22C59AF, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.hp", 0x22C59A4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.attack", 0x22C59A4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.defense", 0x22C59A4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.speed", 0x22C59A4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_attack", 0x22C59A4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_defense", 0x22C59A4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.internals.personality_value", 0x22C59F8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nature", "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.personality_value", 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x22C2B90, [0, 0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x22C2B94, [0], 0);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0x22C5B2F, [0], 0);
            mapper.AssertAreEqual("battle.other.to_battle_flag", 0x22C1D92, [0], 0);
            mapper.AssertAreEqual("rival.name", 0x2280994, [44, 1, 69, 1, 86, 1, 86, 1, 93, 1, 255, 255, 0, 0], "Barry");
            mapper.AssertAreEqual("screen.menu.scene", 0x22D3E77, [3], 3);
            mapper.AssertAreEqual("screen.menu.cursor.flag", 0x22D3EC8, [1], 1);
            mapper.AssertAreEqual("screen.menu.cursor.x", 0x22D3ECA, [0], 0);
            mapper.AssertAreEqual("screen.menu.cursor.y", 0x22D3EC9, [0], 0);
            mapper.AssertAreEqual("game_time.hours", 0x227E236, [9, 0], 9);
            mapper.AssertAreEqual("game_time.minutes", 0x227E238, [2], 2);
            mapper.AssertAreEqual("game_time.seconds", 0x227E239, [0], 0);
            mapper.AssertAreEqual("meta.generation", "4");
            mapper.AssertAreEqual("meta.game_name", "Platinum");
            mapper.AssertAreEqual("meta.game_type", "Third Version");
            mapper.AssertAreEqual("meta.state", "Battle");
            mapper.AssertAreEqual("meta.state_enemy", "Pokemon In Battle");
            mapper.AssertAreEqual("meta.global_pointer", 0x2101D2C, [184, 17, 39, 2], 36114872);
            mapper.AssertAreEqual("meta.enemy_pointer", 0x22A64AC, [220, 143, 42, 2], 36343772);
        }

    }
}
