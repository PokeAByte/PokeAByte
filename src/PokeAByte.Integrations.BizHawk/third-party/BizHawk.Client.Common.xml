<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizHawk.Client.Common</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ApiHawkExtensions.GetApi``1(BizHawk.Client.Common.IExternalApiProvider)">
            <returns>an instance of the <see cref="T:BizHawk.Client.Common.IExternalApi"/> <typeparamref name="T"/> iff available else <see langword="null"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.ApiHawkExtensions.HasApi``1(BizHawk.Client.Common.IExternalApiProvider)">
            <returns><see langword="true"/> iff an instance of the <see cref="T:BizHawk.Client.Common.IExternalApi"/> <typeparamref name="T"/> is available</returns>
        </member>
        <member name="T:BizHawk.Client.Common.ApiInjector">
            <summary>
            injects Apis into other classes
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ApiInjector.ClearApis(System.Object)">
            <summary>
            clears all Apis from a target
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ApiInjector.UpdateApis(System.Func{BizHawk.Client.Common.IExternalApiProvider},System.Object)">
            <summary>
            Feeds the target its required Apis.
            </summary>
            <returns>false if update failed</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ApiInjector.IsAvailable(System.Func{BizHawk.Client.Common.IExternalApiProvider},System.Type)">
            <summary>
            Determines whether a target is available, considering its dependencies
            and the Apis provided by the emulator core.
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.BizHawkExternalToolUsage">
            <summary>
            This enum describe how an external tool is handled
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.BizHawkExternalToolUsage.Global">
            <summary>
            General usage, works even with null emulator
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.BizHawkExternalToolUsage.EmulatorSpecific">
            <summary>
            Specific to an emulator (NES,SNES,etc...)
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.BizHawkExternalToolUsage.GameSpecific">
            <summary>
            Specific to a Game
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.EmulationApi.ForbiddenConfigReference">
            <summary>Using this property to get a reference to the global <see cref="T:BizHawk.Client.Common.Config"/> instance is a terrible, horrible, no good, very bad idea. That's why it's not in the <see cref="T:BizHawk.Client.Common.IEmulationApi">interface</see>.</summary>
        </member>
        <member name="M:BizHawk.Client.Common.MemoryApi.HashRegion(System.Int64,System.Int32,System.String)">
            <exception cref="T:System.ArgumentOutOfRangeException">range defined by <paramref name="addr"/> and <paramref name="count"/> extends beyond the bound of <paramref name="domain"/> (or <see cref="P:BizHawk.Client.Common.MemoryApi.Domain"/> if null)</exception>
        </member>
        <member name="M:BizHawk.Client.Common.UserDataApi.Set(System.String,System.Object)">
            <exception cref="T:System.InvalidOperationException">type of <paramref name="value"/> cannot be used in userdata</exception>
        </member>
        <member name="P:BizHawk.Client.Common.ClientWebSocketWrapper.State">
            <summary>calls <see cref="P:System.Net.WebSockets.ClientWebSocket.State"/> getter (unless closed/disposed, then <see cref="F:System.Net.WebSockets.WebSocketState.Closed"/> is always returned)</summary>
        </member>
        <member name="M:BizHawk.Client.Common.ClientWebSocketWrapper.Close(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>calls <see cref="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)"/></summary>
            <remarks>also calls <see cref="M:System.Net.WebSockets.ClientWebSocket.Dispose"/> (wrapper property <see cref="P:BizHawk.Client.Common.ClientWebSocketWrapper.State"/> will continue to work, method calls will throw <see cref="T:System.ObjectDisposedException"/>)</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.ClientWebSocketWrapper.Receive(System.ArraySegment{System.Byte},System.Nullable{System.Threading.CancellationToken})">
            <summary>calls <see cref="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)"/></summary>
        </member>
        <member name="M:BizHawk.Client.Common.ClientWebSocketWrapper.Receive(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>calls <see cref="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)"/></summary>
        </member>
        <member name="M:BizHawk.Client.Common.ClientWebSocketWrapper.Send(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>calls <see cref="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)"/></summary>
        </member>
        <member name="M:BizHawk.Client.Common.ClientWebSocketWrapper.Send(System.String,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>calls <see cref="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)"/></summary>
        </member>
        <member name="T:BizHawk.Client.Common.DisplaySurfaceIDParser">
            <remarks>should probably centralise these enum extensions and not-extensions somewhere... --yoshi</remarks>
        </member>
        <member name="T:BizHawk.Client.Common.ExternalToolApplicability.Always">
            <remarks>This class is not deprecated, do not remove it.</remarks>
        </member>
        <member name="F:BizHawk.Client.Common.ExternalToolEmbeddedIconAttribute.ResourcePath">
            <remarks>The full path, including the assembly name.</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.ExternalToolEmbeddedIconAttribute.#ctor(System.String)">
            <param name="resourcePath">The full path, including the assembly name.</param>
        </member>
        <member name="P:BizHawk.Client.Common.IExternalApiProvider.AvailableApis">
            <returns>a list of all currently registered <see cref="T:BizHawk.Client.Common.IExternalApi">APIs</see> that are available</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IExternalApiProvider.GetApi(System.Type)">
            <returns>an instance of the <see cref="T:BizHawk.Client.Common.IExternalApi"/> <paramref name="t"/> iff available else <see langword="null"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.IExternalApiProvider.HasApi(System.Type)">
            <returns><see langword="true"/> iff an instance of the <see cref="T:BizHawk.Client.Common.IExternalApi"/> <paramref name="t"/> is available</returns>
        </member>
        <member name="T:BizHawk.Client.Common.IExternalToolForm">
            <summary>
            Interface to implements in order to make a custom tool
            </summary>
        </member>
        <member name="E:BizHawk.Client.Common.IEmuClientApi.BeforeQuickLoad">
            <summary>
            Occurs before a quickload is done (just after user has pressed the shortcut button
            or has click on the item menu)
            </summary>
        </member>
        <member name="E:BizHawk.Client.Common.IEmuClientApi.BeforeQuickSave">
            <summary>
            Occurs before a quicksave is done (just after user has pressed the shortcut button
            or has click on the item menu)
            </summary>
        </member>
        <member name="E:BizHawk.Client.Common.IEmuClientApi.RomLoaded">
            <summary>
            Occurs when a ROM is successfully loaded
            </summary>
        </member>
        <member name="E:BizHawk.Client.Common.IEmuClientApi.StateLoaded">
            <summary>
            Occurs when a savestate is successfully loaded
            </summary>
        </member>
        <member name="E:BizHawk.Client.Common.IEmuClientApi.StateSaved">
            <summary>
            Occurs when a savestate is successfully saved
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.DoFrameAdvance">
            <summary>
            THE FrameAdvance stuff
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.DoFrameAdvanceAndUnpause">
            <summary>
            THE FrameAdvance stuff
            Auto unpause emulation
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.GetApproxFramerate">
            <returns>the (host) framerate, approximated from frame durations</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.InvisibleEmulation(System.Boolean)">
            <summary>
            Use with <see cref="M:BizHawk.Client.Common.IEmuClientApi.SeekFrame(System.Int32)"/> for CamHack.
            Refer to <c>MainForm.InvisibleEmulation</c> for the workflow details.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.LoadState(System.String)">
            <summary>
            Load a savestate specified by its name
            </summary>
            <param name="name">Savestate friendly name</param>
            <returns><see langword="true"/> iff succeeded</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.SaveState(System.String)">
            <summary>
            Save a state with specified name
            </summary>
            <param name="name">Savestate friendly name</param>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.SeekFrame(System.Int32)">
            <summary>
            Use with <see cref="M:BizHawk.Client.Common.IEmuClientApi.InvisibleEmulation(System.Boolean)"/> for CamHack.
            Refer to <c>MainForm.InvisibleEmulation</c> for the workflow details.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.SetClientExtraPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the extra padding added to the 'native' surface so that you can draw HUD elements in predictable placements
            </summary>
            <param name="left">Left padding</param>
            <param name="top">Top padding</param>
            <param name="right">Right padding</param>
            <param name="bottom">Bottom padding</param>
        </member>
        <member name="M:BizHawk.Client.Common.IEmuClientApi.SetGameExtraPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the extra padding added to the 'native' surface so that you can draw HUD elements in predictable placements
            </summary>
            <param name="left">Left padding</param>
            <param name="top">Top padding</param>
            <param name="right">Right padding</param>
            <param name="bottom">Bottom padding</param>
        </member>
        <member name="M:BizHawk.Client.Common.IEmulationApi.Disassemble(System.UInt32,System.String)">
            <returns>disassembly and opcode width, or <c>(string.Empty, 0)</c> on failure</returns>
        </member>
        <member name="T:BizHawk.Client.Common.IExternalApi">
            <summary>
            This interface specifies that a client exposes a given interface, such as <see cref="T:BizHawk.Emulation.Common.IDebuggable"/>,
            for use by external tools.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IGuiApi.DrawString(System.Int32,System.Int32,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{BizHawk.Client.Common.DisplaySurfaceID})">
            <remarks>exposed to Lua as <c>gui.drawString</c> and alias <c>gui.drawText</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IGuiApi.DrawText(System.Int32,System.Int32,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.String,System.Nullable{BizHawk.Client.Common.DisplaySurfaceID})">
            <remarks>exposed to Lua as <c>gui.pixelText</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IGuiApi.PixelText(System.Int32,System.Int32,System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.String,System.Nullable{BizHawk.Client.Common.DisplaySurfaceID})">
            <remarks>exposed to Lua as <c>gui.pixelText</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IGuiApi.Text(System.Int32,System.Int32,System.String,System.Nullable{System.Drawing.Color},System.String)">
            <remarks>exposed to Lua as <c>gui.text</c></remarks>
        </member>
        <member name="T:BizHawk.Client.Common.IInputApi">
            <summary>for querying host input</summary>
            <seealso cref="T:BizHawk.Client.Common.IJoypadApi"/>
        </member>
        <member name="M:BizHawk.Client.Common.IInputApi.Get">
            <returns>
            Map of key/button names (of host) to their pressed state.<br/>
            Only pressed buttons will appear (with a value of <see langword="true"/>), unpressed buttons are omitted.
            </returns>
            <remarks>
            Includes gamepad axes (<c>!axis.isNeutral</c>, with sticks as 4 "buttons" suffixed <c>"Up"</c>/<c>"Down"</c>/<c>"Left"</c>/<c>"Right"</c>).<br/>
            Includes mouse buttons, but not axes (cursor position and wheel rotation).
            Unlike <see cref="M:BizHawk.Client.Common.IInputApi.GetMouse"/>, these have the names <c>"WMouse L"</c>, <c>"WMouse R"</c>, <c>"WMouse C"</c>, <c>"WMouse 1"</c>, and <c>"WMouse 2"</c> for LMB, RMB, MMB, Mouse4, and Mouse5, respectively.<br/>
            See <see cref="T:BizHawk.Client.Common.DistinctKey"/> for keyboard key names, though some are overridden by <see cref="T:BizHawk.Client.Common.DistinctKeyNameOverrides"/> (check the source).
            </remarks>
            <seealso cref="M:BizHawk.Client.Common.IInputApi.GetPressedButtons"/>
        </member>
        <member name="M:BizHawk.Client.Common.IInputApi.GetMouse">
            <returns>
            Map of (host) mouse button/axis names to their state:
            either <see cref="T:System.Boolean"/> for a button (<c>button.isPressed</c>), or <see cref="T:System.Int32"/> for an axis.
            </returns>
            <remarks>
            Buttons are <c>"Left"</c>, <c>"Right"</c>, <c>"Middle"</c>, <c>"XButton1"</c>, and <c>"XButton2"</c> for LMB, RMB, MMB, Mouse4, and Mouse5, respectively.
            Mouse position is axes <c>"X"</c> and <c>"Y"</c>. Mouse wheel rotation is the <c>"Wheel"</c> axis.
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IInputApi.GetPressedAxes">
            <returns>
            Map of (host) axis names to their state.<br/>
            Axes may not appear if they have never been seen with a value other than <c>0</c>
            (for example, if the gamepad has been set down on a table since launch, or if it was recently reconnected).
            </returns>
            <remarks>
            Includes mouse cursor position axes, but not mouse wheel rotation.
            Unlike <see cref="M:BizHawk.Client.Common.IInputApi.GetMouse"/>, these have the names <c>"WMouse X"</c> and <c>"WMouse Y"</c>.
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IInputApi.GetPressedButtons">
            <returns>
            List of (host) key/button names which are pressed
            (i.e. were pressed when EmuHawk last polled; this is distinct from virtual gamepad polling/latching).
            Unpressed buttons are omitted.
            </returns>
            <remarks>
            Includes gamepad axes (<c>!axis.isNeutral</c>, with sticks as 4 "buttons" suffixed <c>"Up"</c>/<c>"Down"</c>/<c>"Left"</c>/<c>"Right"</c>).<br/>
            Includes mouse buttons, but not axes (cursor position and wheel rotation).
            Unlike <see cref="M:BizHawk.Client.Common.IInputApi.GetMouse"/>, these have the names <c>"WMouse L"</c>, <c>"WMouse R"</c>, <c>"WMouse C"</c>, <c>"WMouse 1"</c>, and <c>"WMouse 2"</c> for LMB, RMB, MMB, Mouse4, and Mouse5, respectively.<br/>
            See <see cref="T:BizHawk.Client.Common.DistinctKey"/> for keyboard key names, though some are overridden by <see cref="T:BizHawk.Client.Common.DistinctKeyNameOverrides"/> (check the source).
            </remarks>
        </member>
        <member name="T:BizHawk.Client.Common.IJoypadApi">
            <summary>for querying or modifying virtual input</summary>
            <seealso cref="T:BizHawk.Client.Common.IInputApi"/>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieApi.PlayFromStart(System.String)">
            <summary>
            Resets the core to frame 0 with the currently loaded movie in playback mode.
            If <paramref name="path"/> is specified, attempts to load it, then continues with playback if it was successful.
            </summary>
            <returns>true iff successful</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ISaveStateApi.Load(System.String,System.Boolean)">
            <param name="path">absolute path to <c>.State</c> file</param>
            <returns><see langword="true"/> iff succeeded</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ISaveStateApi.LoadSlot(System.Int32,System.Boolean)">
            <param name="slotNum"><c>1..10</c></param>
            <returns><see langword="true"/> iff succeeded</returns>
        </member>
        <member name="M:BizHawk.Client.Common.SocketServer.ReceiveString(System.Text.Encoding)">
            <remarks>
            Since BizHawk 2.6.2, all responses must be of the form <c>$"{msg.Length:D} {msg}"</c> i.e. prefixed with the length in base-10 and a space.
            </remarks>
        </member>
        <member name="T:BizHawk.Client.Common.ArgParser">
            <summary>
            Parses command line flags from a string array into various instance fields.
            </summary>
            <remarks>
            If a flag is given multiple times, the last is taken.<br/>
            If a flag that isn't recognised is given, it is parsed as a filename. As noted above, the last filename is taken.
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.ArgParser.ParseArguments(BizHawk.Client.Common.ParsedCLIFlags@,System.String[])">
            <exception cref="T:BizHawk.Client.Common.ArgParser.ArgParserException"><c>--socket_ip</c> passed without specifying <c>--socket_port</c> or vice-versa</exception>
        </member>
        <member name="T:BizHawk.Client.Common.cheats.GbGgGameGenieDecoder">
            <summary>
            Decodes Gameboy and Game Gear Game Genie codes
            </summary>
            <remarks><see href="https://www.devrs.com/gb/files/gg.html"/></remarks>
        </member>
        <member name="T:BizHawk.Client.Common.cheats.IDecodeResult">
            <summary>
            Represents a decoded cheat value
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.AnalogBind.Value">
            <summary>the physical stick that we're bound to</summary>
        </member>
        <member name="F:BizHawk.Client.Common.AnalogBind.Mult">
            <summary>sensitivity and flip</summary>
        </member>
        <member name="F:BizHawk.Client.Common.AnalogBind.Deadzone">
            <summary>portion of axis to ignore</summary>
        </member>
        <member name="F:BizHawk.Client.Common.Config.CorePickerUIData">
            <remarks>
            <c>CoreNames[0]</c> is the default (out-of-the-box) core.<br/>
            <c>AppliesTo</c> are concatenated to make the submenu's label, and
            <c>Config.PreferredCores[AppliesTo[0]]</c> (lookup on global <see cref="T:BizHawk.Client.Common.Config"/> instance) determines which option is shown as checked.<br/>
            The order within submenus and the order of the submenus themselves are determined by the declaration order here.
            </remarks>
        </member>
        <member name="P:BizHawk.Client.Common.Config.PreferredPlatformsForExtensions">
            <summary>
            Used to determine the system a rom is classified as (and thus which core to use) for the times when our romloading autodetect magic can't determine a system.
            Keys are file extensions, include the leading period in each, and use lowercase;
            values are system IDs, use <see cref="F:System.String.Empty"/> for unset (though <see langword="null"/> should also work, omitting will remove from UI).
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Config.BackupSaveram">
            <summary>
            Makes a .bak file before any saveram-writing operation (could be extended to make timestamped backups)
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Config.AutosaveSaveRAM">
            <summary>
            Whether to make AutoSave files at periodic intervals
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Config.FlushSaveRamFrames">
            <summary>
            Intervals at which to make AutoSave files
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Config.VSync">
            <summary>
            Use vsync when presenting all 3d accelerated windows.
            For the main window, if VSyncThrottle = false, this will try to use vsync without throttling to it
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Config.DispAllowTearing">
            <summary>
            Allows non-vsync'd video to tear, this is needed for VFR monitors reportedly
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Config.SoundEnabled">
            <value>iff <see langword="false"/>, cores may skip processing audio</value>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledNormal"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledRWFF"/>
            <seealso cref="P:BizHawk.Client.Common.Config.MuteFrameAdvance"/>
        </member>
        <member name="P:BizHawk.Client.Common.Config.SoundEnabledNormal">
            <value>whether to pass audio through to the host while emulating to normal throttle</value>
            <remarks>separate from <see cref="P:BizHawk.Client.Common.Config.SoundVolume"/> so that the config UI can "remember" the previous value</remarks>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundVolume"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabled"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledRWFF"/>
            <seealso cref="P:BizHawk.Client.Common.Config.MuteFrameAdvance"/>
        </member>
        <member name="P:BizHawk.Client.Common.Config.SoundEnabledRWFF">
            <value>whether to pass audio through to the host while rewinding or fast-forwarding</value>
            <remarks>separate from <see cref="P:BizHawk.Client.Common.Config.SoundVolumeRWFF"/> so that the config UI can "remember" the previous value</remarks>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundVolumeRWFF"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabled"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledNormal"/>
            <seealso cref="P:BizHawk.Client.Common.Config.MuteFrameAdvance"/>
        </member>
        <member name="P:BizHawk.Client.Common.Config.MuteFrameAdvance">
            <value>whether to pass audio through to the host when doing a frame advance while paused</value>
            <remarks>
            sets sample amplitude multiplier to 0x iff <see langword="true"/>,
            otherwise the main <see cref="P:BizHawk.Client.Common.Config.SoundVolume"/> has effect
            </remarks>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabled"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledNormal"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledRWFF"/>
        </member>
        <member name="P:BizHawk.Client.Common.Config.SoundVolume">
            <value>
            volume level; interpreted as a percentage (i.e. scaled down to 0.0..1.0)
            and passed to the platform audio implementation, which should use it as a simple multiplier on each sample;<br/>
            so <c>0</c> is scale each sample by 0x (mute),<c>100</c> is scale each sample by 1x (preserve full volume),
            <c>50</c> is scale each sample by 0.5x (≈ -3 dB), and <c>25</c> is scale each sample by 0.25x (≈ -6 dB)
            </value>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundVolumeRWFF"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledNormal"/>
        </member>
        <member name="P:BizHawk.Client.Common.Config.SoundVolumeRWFF">
            <value>
            when rewinding or fast-forwarding, the sample amplitude multiplier is <i>multiplied by this value</i>
            (after conversion from percentage), or in other words, <see cref="P:BizHawk.Client.Common.Config.SoundVolume"/> remains in effect
            </value>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundVolume"/>
            <seealso cref="P:BizHawk.Client.Common.Config.SoundEnabledRWFF"/>
        </member>
        <member name="P:BizHawk.Client.Common.Config.GbAsSgb">
            <remarks>as this setting spans multiple cores and doesn't actually affect the behavior of any core, it hasn't been absorbed into the new system</remarks>
        </member>
        <member name="P:BizHawk.Client.Common.Config.OSDMessageDuration">
            <remarks>in seconds</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.GetCoreSettings(BizHawk.Client.Common.Config,System.Type,System.Type)">
            <summary>
            Returns the core settings for a core
            </summary>
            <returns>null if no settings were saved, or there was an error deserializing</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.GetCoreSettings``2(BizHawk.Client.Common.Config)">
            <summary>
            Returns the core settings for a core
            </summary>
            <returns>null if no settings were saved, or there was an error deserializing</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.PutCoreSettings(BizHawk.Client.Common.Config,System.Object,System.Type)">
            <summary>
            saves the core settings for a core
            </summary>
            <param name="o">null to remove settings for that core instead</param>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.GetCoreSyncSettings(BizHawk.Client.Common.Config,System.Type,System.Type)">
            <summary>
            Returns the core syncsettings for a core
            </summary>
            <returns>null if no settings were saved, or there was an error deserializing</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.GetCoreSyncSettings``2(BizHawk.Client.Common.Config)">
            <summary>
            Returns the core syncsettings for a core
            </summary>
            <returns>null if no settings were saved, or there was an error deserializing</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.PutCoreSyncSettings(BizHawk.Client.Common.Config,System.Object,System.Type)">
            <summary>
            saves the core syncsettings for a core
            </summary>
            <param name="o">null to remove settings for that core instead</param>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigExtensions.TryGetChosenSystemForFileExt(BizHawk.Client.Common.Config,System.String,System.String@)">
            <param name="fileExt">file extension, including the leading period and in lowercase</param>
            <remarks><paramref name="systemID"/> will be <see langword="null"/> if returned value is <see langword="false"/></remarks>
        </member>
        <member name="T:BizHawk.Client.Common.ConfigPersistAttribute">
            <summary>Indicates that a property is to be saved to config for persistence.</summary>
        </member>
        <member name="M:BizHawk.Client.Common.ConfigService.Load``1(System.String)">
            <exception cref="T:System.InvalidOperationException">internal error</exception>
        </member>
        <member name="F:BizHawk.Client.Common.FeedbackBind.Channels">
            <remarks>may be a '+'-delimited list (e.g. <c>"Left+Right"</c>), which will be passed through the input pipeline to <see cref="M:BizHawk.Client.Common.Controller.PrepareHapticsForHost(BizHawk.Client.Common.SimpleController)"/></remarks>
        </member>
        <member name="F:BizHawk.Client.Common.FeedbackBind.GamepadPrefix">
            <remarks>"X# "/"J# " (with the trailing space)</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.PathEntryExtensions.BaseFor(BizHawk.Client.Common.PathEntryCollection,System.String)">
            <summary>
            Returns the base path of the given system.
            If the system can not be found, an empty string is returned
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.PathEntryExtensions.EntryWithFallback(BizHawk.Client.Common.PathEntryCollection,System.String,System.String)">
            <summary>
            Returns an entry for the given system and pathType (ROM, screenshot, etc)
            but falls back to the base system or global system if it fails
            to find pathType or systemId
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.PathEntryExtensions.AbsolutePathFor(BizHawk.Client.Common.PathEntryCollection,System.String,System.String)">
            <summary>
            Returns an absolute path for the given relative path.
            If provided, the systemId will be used to generate the path.
            Wildcards are supported.
            Logic will fallback until an absolute path is found,
            using Global Base as a last resort
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.PathEntryExtensions.TryMakeRelative(BizHawk.Client.Common.PathEntryCollection,System.String,System.String)">
            <summary>
            Takes an absolute path and attempts to convert it to a relative, based on the system,
            or global base if no system is supplied, if it is not a subfolder of the base, it will return the path unaltered
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.PathEntryExtensions.RefreshTempPath(BizHawk.Client.Common.PathEntryCollection)">
            <summary>
            Puts the currently configured temp path into the environment for use as actual temp directory
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.RestoreDefaultsAttribute">
            <summary>Indicates which method of an <see cref="T:BizHawk.Client.Common.IToolFormAutoConfig"/> is to be called when the generated <c>Restore Defaults</c> menu item is clicked.</summary>
            <remarks>If not present on any instance method, the menu item will do nothing. If present on multiple, the first will be called.</remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.UseCompression">
            <summary>
            Gets a value indicating whether or not to compress savestates before storing them
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.UseDelta">
            <summary>
            Gets a value indicating whether or not to delta compress savestates before storing them
            </summary>
            <value></value>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.BufferSize">
            <summary>
            Buffer space to use in MB
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.UseFixedRewindInterval">
            <summary>
            Specifies whether TargetFrameLength or TargetRewindInterval is used.
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.TargetFrameLength">
            <summary>
            Desired frame length (number of emulated frames you can go back before running out of buffer)
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.TargetRewindInterval">
            <summary>
            Desired rewind interval (number of emulated frames you can go back per rewind)
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IRewindSettings.AllowOutOfOrderStates">
            <summary>
            Specifies if the rewinder should accept states that are given out of order.
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ToolDialogSettings.TopLeft">
            <value>the top-left corner of the <see cref="T:BizHawk.Client.Common.IToolFormAutoConfig"/>, equivalent to the combined values of <see cref="P:BizHawk.Client.Common.ToolDialogSettings.Wndx"/> and <see cref="P:BizHawk.Client.Common.ToolDialogSettings.Wndy"/></value>
            <exception cref="T:System.InvalidOperationException">either <see cref="P:BizHawk.Client.Common.ToolDialogSettings.Wndx"/> or <see cref="P:BizHawk.Client.Common.ToolDialogSettings.Wndy"/> is null (it is expected to check for this before using this property)</exception>
        </member>
        <member name="M:BizHawk.Client.Common.Controller.LatchFromPhysical(BizHawk.Emulation.Common.IController)">
            <summary>
            uses the bindings to latch our own logical button state from the source controller's button state (which are assumed to be the physical side of the binding).
            this will clobber any existing data (use OR_* or other functions to layer in additional input sources)
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Controller.OR_FromLogical(BizHawk.Emulation.Common.IController)">
            <summary>
            merges pressed logical buttons from the supplied controller, effectively ORing it with the current state
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutofireController.AxisValue(System.String)">
            <exception cref="T:System.NotImplementedException">always</exception>
        </member>
        <member name="M:BizHawk.Client.Common.AutofireController.LatchFromPhysical(BizHawk.Emulation.Common.IController)">
            <summary>
            uses the bindings to latch our own logical button state from the source controller's button state (which are assumed to be the physical side of the binding).
            this will clobber any existing data (use OR_* or other functions to layer in additional input sources)
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.ClickyVirtualPadController">
            <summary>
            Will hold buttons for 1 frame and then release them.
            (Calling Click() from your button click is what you want to do)
            TODO - should the duration be controllable?
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ClickyVirtualPadController.FrameTick">
            <summary>
            Call this once per frame to do the timekeeping for the hold and release
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ClickyVirtualPadController.Click(System.String)">
            <summary>
            Call this to hold the button down for one frame
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.SimpleController">
            <summary>
            A basic implementation of IController
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ModalMessageBox(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon})">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent, with the given <paramref name="text"/>,
            and with the given <paramref name="caption"/> and <paramref name="icon"/> if they're specified.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ModalMessageBox2(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon},System.Boolean)">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent, with the given <paramref name="text"/>,
            and with the given <paramref name="caption"/> and <paramref name="icon"/> if they're specified.
            </summary>
            <returns><see langword="true"/> iff "Yes"/"OK" was chosen</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ModalMessageBox3(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon})">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent, with the given <paramref name="text"/>,
            and with the given <paramref name="caption"/> and <paramref name="icon"/> if they're specified.
            </summary>
            <returns><see langword="true"/> if "Yes" was chosen, <see langword="false"/> if "No" was chosen, or <see langword="null"/> if "Cancel" was chosen</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowFileOpenDialog(BizHawk.Client.Common.IDialogParent,System.String,System.Boolean,BizHawk.Client.Common.FilesystemFilterSet,System.String)">
            <summary>Creates and shows a <c>System.Windows.Forms.OpenFileDialog</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent</summary>
            <param name="discardCWDChange"><c>OpenFileDialog.RestoreDirectory</c> (isn't this useless when specifying <paramref name="initDir"/>? keeping it for backcompat)</param>
            <param name="filter"><c>OpenFileDialog.Filter</c></param>
            <param name="initDir"><c>OpenFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="initFileName"><c>OpenFileDialog.FileName</c>; pre-selected file (overrides <paramref name="initDir"/>?)</param>
            <returns>filename of selected file, or <see langword="null"/> iff cancelled</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowFileOpenDialog(BizHawk.Client.Common.IDialogParent,BizHawk.Client.Common.FilesystemFilterSet,System.Int32@,System.String,System.String)">
            <summary>Creates and shows a <c>System.Windows.Forms.OpenFileDialog</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent</summary>
            <param name="filter"><c>OpenFileDialog.Filter</c></param>
            <param name="filterIndex"><c>OpenFileDialog.FilterIndex</c>; initially selected entry in <paramref name="filter"/></param>
            <param name="initDir"><c>OpenFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="windowTitle"><c>OpenFileDialog.Title</c></param>
            <returns>filename of selected file, or <see langword="null"/> iff cancelled</returns>
            <remarks>only used from MainForm, but don't move it there</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowFileOpenDialog(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.String)">
            <summary>Creates and shows a <c>System.Windows.Forms.OpenFileDialog</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent</summary>
            <param name="filterStr"><c>OpenFileDialog.Filter</c></param>
            <param name="initDir"><c>OpenFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="initFileName"><c>OpenFileDialog.FileName</c>; pre-selected file (overrides <paramref name="initDir"/>?)</param>
            <returns>filename of selected file, or <see langword="null"/> iff cancelled</returns>
            <remarks>only used from Lua, but don't move it there</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowFileSaveDialog(BizHawk.Client.Common.IDialogParent,System.String,System.Boolean,System.String,BizHawk.Client.Common.FilesystemFilterSet,System.String,System.Boolean)">
            <summary>Creates and shows a <c>System.Windows.Forms.SaveFileDialog</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent</summary>
            <param name="discardCWDChange"><c>SaveFileDialog.RestoreDirectory</c> (renamed for clarity without inverting value; isn't this useless when specifying <paramref name="initDir"/>? keeping it for backcompat)</param>
            <param name="fileExt"><c>SaveFileDialog.DefaultExt</c>; used only when the user's chosen filename doesn't have an extension (omit leading '.')</param>
            <param name="filter"><c>SaveFileDialog.Filter</c></param>
            <param name="initDir"><c>SaveFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="initFileName"><c>SaveFileDialog.FileName</c>; pre-selected file (overrides <paramref name="initDir"/>?)</param>
            <param name="muteOverwriteWarning"><c>SaveFileDialog.OverwritePrompt</c> (renamed for clarity with inverted value)</param>
            <returns>filename of selected destination, or <see langword="null"/> iff cancelled</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowMessageBox(BizHawk.Client.Common.IDialogController,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon})">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent without a parent, with the given <paramref name="text"/>,
            and with the given <paramref name="caption"/> and <paramref name="icon"/> if they're specified.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowMessageBox2(BizHawk.Client.Common.IDialogController,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon},System.Boolean)">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent without a parent, with the given <paramref name="text"/>,
            and with the given <paramref name="caption"/> and <paramref name="icon"/> if they're specified.
            </summary>
            <returns><see langword="true"/> iff "Yes"/"OK" was chosen</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowMessageBox3(BizHawk.Client.Common.IDialogController,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon})">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent without a parent, with the given <paramref name="text"/>,
            and with the given <paramref name="caption"/> and <paramref name="icon"/> if they're specified.
            </summary>
            <returns><see langword="true"/> if "Yes" was chosen, <see langword="false"/> if "No" was chosen, or <see langword="null"/> if "Cancel" was chosen</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowFileMultiOpenDialog(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>Creates and shows a <c>System.Windows.Forms.OpenFileDialog</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent</summary>
            <param name="discardCWDChange"><c>OpenFileDialog.RestoreDirectory</c> (renamed for clarity without inverting value; isn't this useless when specifying <paramref name="initDir"/>? keeping it for backcompat)</param>
            <param name="filterStr"><c>OpenFileDialog.Filter</c> (call <c>ToString</c> on a <see cref="T:BizHawk.Client.Common.FilesystemFilter"/>/<see cref="T:BizHawk.Client.Common.FilesystemFilterSet"/>)</param>
            <param name="initDir"><c>OpenFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="initFileName"><c>OpenFileDialog.FileName</c>; pre-selected file (overrides <paramref name="initDir"/>?)</param>
            <param name="maySelectMultiple"><c>OpenFileDialog.Multiselect</c></param>
            <returns>filenames of selected files, or <see langword="null"/> iff cancelled</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DialogControllerExtensions.ShowFileMultiOpenDialog(BizHawk.Client.Common.IDialogParent,System.String,System.Boolean,BizHawk.Client.Common.FilesystemFilterSet)">
            <summary>Creates and shows a <c>System.Windows.Forms.OpenFileDialog</c> or equivalent with the receiver (<paramref name="dialogParent"/>) as its parent</summary>
            <param name="discardCWDChange"><c>OpenFileDialog.RestoreDirectory</c> (isn't this useless when specifying <paramref name="initDir"/>? keeping it for backcompat)</param>
            <param name="filter"><c>OpenFileDialog.Filter</c></param>
            <param name="initDir"><c>OpenFileDialog.InitialDirectory</c>; initial browse location</param>
            <returns>filenames of selected files, or <see langword="null"/> iff cancelled</returns>
        </member>
        <member name="T:BizHawk.Client.Common.DisplayManagerBase">
            <summary>
            A DisplayManager is destined forevermore to drive the PresentationPanel it gets initialized with.
            Its job is to receive OSD and emulator outputs, and produce one single buffer (BitmapBuffer? Texture2d?) for display by the PresentationPanel.
            Details TBD
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DisplayManagerBase.GameExtraPadding">
            <summary>
            additional pixels added at the unscaled level for the use of lua drawing. essentially increases the input video provider dimensions
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DisplayManagerBase.ClientExtraPadding">
            <summary>
            additional pixels added at the native level for the use of lua drawing. essentially just gets tacked onto the final calculated window sizes.
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DisplayManagerBase.CustomFonts">
            <summary>
            custom fonts that don't need to be installed on the user side
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.UntransformPoint(System.Drawing.Point)">
            <summary>
            Using the current filter program, turn a mouse coordinate from window space to the original emulator screen space.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.TransformPoint(System.Drawing.Point)">
            <summary>
            Using the current filter program, turn a emulator screen space coordinate to a window coordinate (suitable for lua layer drawing)
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.UpdateSource(BizHawk.Emulation.Common.IVideoProvider)">
            <summary>
            This will receive an emulated output frame from an IVideoProvider and run it through the complete frame processing pipeline
            Then it will stuff it into the bound PresentationPanel.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.RenderOffscreen(BizHawk.Emulation.Common.IVideoProvider,System.Boolean)">
            <summary>
            Does the entire display process to an offscreen buffer, suitable for a 'client' screenshot.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.RenderOffscreenLua(BizHawk.Emulation.Common.IVideoProvider)">
            <summary>
            Does the display process to an offscreen buffer, suitable for a Lua-inclusive movie.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.CalculateClientSize(BizHawk.Emulation.Common.IVideoProvider,System.Int32)">
            <summary>
            Attempts to calculate a good client size with the given zoom factor, considering the user's DisplayManager preferences
            TODO - this needs to be redone with a concept different from zoom factor.
            basically, each increment of a 'zoom-like' factor should definitely increase the viewable area somehow, even if it isnt strictly by an entire zoom level.
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.DisplayManagerBase.JobInfo.IncludeUserFilters">
            <summary>
            This has been changed a bit to mean "not raw".
            Someone needs to rename it, but the sense needs to be inverted and some method args need renaming too
            Suggested: IsRaw (with inverted sense)
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DisplayManagerBase.GetApiHawk2DRenderer(BizHawk.Client.Common.DisplaySurfaceID)">
            <summary>
            Gets an ApiHawk 2D renderer, suitable for drawing with Gui/lua apis and such
            The size of this surface might change between different calls
            Implicitly, if the size changes the surface will be cleared
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.FilterManager.FilterProgram.UntransformPoint(System.String,System.Numerics.Vector2)">
            <summary>
            Receives a point in the coordinate space of the output of the filter program and untransforms it back to input points
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.FilterManager.FilterProgram.TransformPoint(System.String,System.Numerics.Vector2)">
            <summary>
            Receives a point in the input space of the filter program and transforms it through to output points
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Filters.BaseFilter.DeclareInput(BizHawk.Client.Common.FilterManager.SurfaceDisposition,System.String)">
            <summary>
            Indicate a 'RenderTarget' disposition if you want to draw directly to the input
            Indicate a 'Texture' disposition if you want to use it to draw to a newly allocated render target
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Filters.LetterboxingLogic">
            <summary>
            applies letterboxing logic to figure out how to fit the source dimensions into the target dimensions.
            In the future this could also apply rules like integer-only scaling, etc.
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.LetterboxingLogic.vx">
            <summary>
            the location within the destination region of the output content (scaled and translated)
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.LetterboxingLogic.vy">
            <summary>
            the location within the destination region of the output content (scaled and translated)
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.LetterboxingLogic.vw">
            <summary>
            the location within the destination region of the output content (scaled and translated)
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.LetterboxingLogic.vh">
            <summary>
            the location within the destination region of the output content (scaled and translated)
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.LetterboxingLogic.WidthScale">
            <summary>
            the scale factor eventually used
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.LetterboxingLogic.HeightScale">
            <summary>
            the scale factor eventually used
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Filters.LetterboxingLogic.#ctor">
            <summary>
            In case you want to do it yourself
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Filters.ScreenControlNDS">
            <summary>
            special screen control features for NDS
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Filters.ScreenControl3DS">
            <summary>
            special screen control features for 3DS
            in practice, this is only for correcting mouse input
            as the core internally handles screen drawing madness anyways
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.FinalPresentation.Padding">
            <summary>
            only use with Config_PadOnly
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Filters.RetroShaderChain.Available">
            <summary>Whether this shader chain is available (it wont be available if some resources failed to load or compile)</summary>
        </member>
        <member name="M:BizHawk.Client.Common.Filters.RetroShaderPreset.#ctor(System.IO.Stream)">
            <summary>
            Parses an instance from a stream to a CGP file
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Filters.Render">
            <summary>
            transforms an input texture to an output render target (by rendering it)
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.IBlitter">
            <summary>
            This is an old abstracted rendering class that the OSD system is using to get its work done.
            We should probably just use a GuiRenderer (it was designed to do that) although wrapping it with
            more information for OSDRendering could be helpful I suppose
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.OSDManager.DrawScreenInfo(BizHawk.Client.Common.IBlitter)">
            <summary>
            Display all screen info objects like fps, frame counter, lag counter, and input display
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.RenderTargetFrugalizer">
            <summary>
            Recycles a pair of temporary render targets, as long as the dimensions match.
            When the dimensions don't match, a new one will be allocated
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.TextureFrugalizer">
            <summary>
            Recycles a pair of temporary textures (in case double-buffering helps any) to contain a BitmapBuffer's contents, as long as the dimensions match.
            When the dimensions don't match, a new one will be allocated
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Bk2InputDisplayGenerator">
            <summary>
            An implementation of <see cref="T:BizHawk.Emulation.Common.IInputDisplayGenerator"/> that
            uses .bk2 mnemonics as the basis for display
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.Bk2InputDisplayGenerator._cachedInputSpecs">
            <remarks>either <c>Range</c> or <c>Mnemonic</c> is always non-null</remarks>
        </member>
        <member name="T:BizHawk.Client.Common.EMsgBoxIcon">
            <remarks>based on <c>System.Windows.Forms.MessageBoxIcon</c></remarks>
        </member>
        <member name="T:BizHawk.Client.Common.BeforeQuickLoadEventArgs">
            <summary>
            This class holds event data for BeforeQuickLoad event
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.BeforeQuickLoadEventArgs.Handled">
            <summary>
            Gets or sets value that defined if saved has been handled or not
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.BeforeQuickLoadEventArgs.Name">
            <summary>
            Gets quicksave name
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.BeforeQuickLoadEventArgs.Slot">
            <summary>
            Gets slot used for quicksave
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.BeforeQuickSaveEventArgs">
            <summary>
            This class holds event data for BeforeQuickSave event
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.BeforeQuickSaveEventArgs.Handled">
            <summary>
            Gets or sets value that defined if saved has been handled or not
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.BeforeQuickSaveEventArgs.Name">
            <summary>
            Gets quicksave name
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.BeforeQuickSaveEventArgs.Slot">
            <summary>
            Gets slot used for quicksave
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.StateLoadedEventArgs">
            <summary>
            This class holds event data for StateLoaded event
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.StateLoadedEventArgs.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.Common.StateLoadedEventArgs"/>
            </summary>
            <param name="stateName">User friendly name of loaded state</param>
        </member>
        <member name="P:BizHawk.Client.Common.StateLoadedEventArgs.Name">
            <summary>
            Gets user friendly name of the loaded savestate
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.StateSavedEventArgs">
            <summary>
            This class holds event data for StateSaved event
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.StateSavedEventArgs.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.Common.StateSavedEventArgs"/>
            </summary>
            <param name="stateName">User friendly name of loaded state</param>
        </member>
        <member name="P:BizHawk.Client.Common.StateSavedEventArgs.Name">
            <summary>
            Gets user friendly name of the loaded savestate
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.BeforeQuickLoadEventHandler">
            <summary>
            Represent a method that will handle the event raised before a quickload is done
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.Common.BeforeQuickSaveEventHandler">
            <summary>
            Represent a method that will handle the event raised before a quicksave is done
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.Common.StateLoadedEventHandler">
            <summary>
            Represent a method that will handle the event raised when a savestate is loaded
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.Common.StateSavedEventHandler">
            <summary>
            Represent a method that will handle the event raised when a savestate is saved
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:BizHawk.Client.Common.FilesystemFilter.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Boolean)">
            <remarks>When <see cref="F:BizHawk.Common.VersionInfo.DeveloperBuild"/> is set to <see langword="false"/> for release, this behaves identically to <see cref="M:BizHawk.Client.Common.FilesystemFilter.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean)">the other ctor</see>.
            On dev builds, <paramref name="devBuildExtraExts"/> are appended to <paramref name="extensions"/>.
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.FilesystemFilter.ToString">
            <summary>delegated to <see cref="M:BizHawk.Client.Common.FilesystemFilter.SerializeEntry(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})"/></summary>
            <remarks>return value is a valid <c>Filter</c> for <c>Save-</c>/<c>OpenFileDialog</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.FilesystemFilter.SerializeEntry(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <remarks>return value is a valid <c>Filter</c> for <c>Save-</c>/<c>OpenFileDialog</c></remarks>
        </member>
        <member name="F:BizHawk.Client.Common.FirmwareManager._firmwareSizes">
            <summary>a list of expected file sizes, used as a simple filter to speed up scanning</summary>
        </member>
        <member name="M:BizHawk.Client.Common.FirmwareManager.Resolve(BizHawk.Client.Common.PathEntryCollection,System.Collections.Generic.IDictionary{System.String,System.String},BizHawk.Emulation.Common.FirmwareRecord,System.Boolean)">
            <remarks>
            Sometimes this is called from a loop in <c>FirmwaresConfig.DoScan</c>.
            In that case, we don't want to call <see cref="M:BizHawk.Client.Common.FirmwareManager.DoScanAndResolve(BizHawk.Client.Common.PathEntryCollection,System.Collections.Generic.IDictionary{System.String,System.String})"/> repeatedly, so we use <paramref name="forbidScan"/> to skip it.
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.FirmwareManager.CanFileBeImported(System.String)">
            <summary>
            Test to determine whether the supplied firmware file matches something in the firmware database
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.RealFirmwareFile">
            <summary>represents a file found on disk in the user's firmware directory matching a file in our database</summary>
        </member>
        <member name="M:BizHawk.Client.Common.IDialogController.ShowFileMultiOpenDialog(BizHawk.Client.Common.IDialogParent,System.String,System.Int32@,System.String,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>Creates and shows a <c>System.Windows.Forms.OpenFileDialog</c> or equivalent</summary>
            <param name="dialogParent">parent window</param>
            <param name="discardCWDChange"><c>OpenFileDialog.RestoreDirectory</c> (renamed for clarity without inverting value; isn't this useless when specifying <paramref name="initDir"/>? keeping it for backcompat)</param>
            <param name="filterStr"><c>OpenFileDialog.Filter</c> (call <c>ToString</c> on a <see cref="T:BizHawk.Client.Common.FilesystemFilter"/>/<see cref="T:BizHawk.Client.Common.FilesystemFilterSet"/>)</param>
            <param name="filterIndex"><c>OpenFileDialog.FilterIndex</c>; initially selected entry in <paramref name="filterStr"/></param>
            <param name="initDir"><c>OpenFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="initFileName"><c>OpenFileDialog.FileName</c>; pre-selected file (overrides <paramref name="initDir"/>?)</param>
            <param name="maySelectMultiple"><c>OpenFileDialog.Multiselect</c></param>
            <param name="windowTitle"><c>OpenFileDialog.Title</c></param>
            <returns>filenames of selected files, or <see langword="null"/> iff cancelled</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IDialogController.ShowFileSaveDialog(BizHawk.Client.Common.IDialogParent,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Creates and shows a <c>System.Windows.Forms.SaveFileDialog</c> or equivalent</summary>
            <param name="dialogParent">parent window</param>
            <param name="discardCWDChange"><c>SaveFileDialog.RestoreDirectory</c> (renamed for clarity without inverting value; isn't this useless when specifying <paramref name="initDir"/>? keeping it for backcompat)</param>
            <param name="fileExt"><c>SaveFileDialog.DefaultExt</c>; used only when the user's chosen filename doesn't have an extension (omit leading '.')</param>
            <param name="filterStr"><c>SaveFileDialog.Filter</c> (call <c>ToString</c> on a <see cref="T:BizHawk.Client.Common.FilesystemFilter"/>/<see cref="T:BizHawk.Client.Common.FilesystemFilterSet"/>)</param>
            <param name="initDir"><c>SaveFileDialog.InitialDirectory</c>; initial browse location</param>
            <param name="initFileName"><c>SaveFileDialog.FileName</c>; pre-selected file (overrides <paramref name="initDir"/>?)</param>
            <param name="muteOverwriteWarning"><c>SaveFileDialog.OverwritePrompt</c> (renamed for clarity with inverted value)</param>
            <returns>filename of selected destination, or <see langword="null"/> iff cancelled</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IDialogController.ShowMessageBox(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon})">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent with the given <paramref name="text"/>,
            and with the given <paramref name="owner"/>, <paramref name="caption"/>, and <paramref name="icon"/> if they're specified.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IDialogController.ShowMessageBox2(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon},System.Boolean)">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent with the given <paramref name="text"/>,
            and with the given <paramref name="owner"/>, <paramref name="caption"/>, and <paramref name="icon"/> if they're specified.
            </summary>
            <returns><see langword="true"/> iff "Yes"/"OK" was chosen</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IDialogController.ShowMessageBox3(BizHawk.Client.Common.IDialogParent,System.String,System.String,System.Nullable{BizHawk.Client.Common.EMsgBoxIcon})">
            <summary>
            Creates and shows a <c>System.Windows.Forms.MessageBox</c> or equivalent with the given <paramref name="text"/>,
            and with the given <paramref name="owner"/>, <paramref name="caption"/>, and <paramref name="icon"/> if they're specified.
            </summary>
            <returns><see langword="true"/> if "Yes" was chosen, <see langword="false"/> if "No" was chosen, or <see langword="null"/> if "Cancel" was chosen</returns>
        </member>
        <member name="T:BizHawk.Client.Common.IDialogParent">
            <remarks>In a WinForms app, inheritors must also inherit <c>System.Windows.Forms.IWin32Window</c>.</remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.CheatList">
            <remarks>only referenced from <c>ClientLuaLibrary</c></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.DesktopLocation">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.Emulator">
            <remarks>only referenced from <c>ClientLuaLibrary</c></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.InvisibleEmulation">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.IsSeeking">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.IsTurboing">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.NetworkingHelpers">
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.CommApi"/></remarks>
        </member>
        <member name="P:BizHawk.Client.Common.IMainFormForApi.PauseAvi">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.ClearHolds">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.ClickSpeedItem(System.Int32)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.CloseEmulator(System.Nullable{System.Int32})">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.CloseRom(System.Boolean)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.EnableRewind(System.Boolean)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.FlushSaveRAM(System.Boolean)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.FrameAdvance(System.Boolean)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.GetApproxFramerate">
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.EmuClientApi"/></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.LoadMovie(System.String,System.String)">
            <summary>
            essentially <c>return MainForm.StartNewMovie(MovieSession.Get(filename), record: false);</c>,
            but also ensures a rom is loaded, and defers to TAStudio
            </summary>
            <param name="archive">unused</param>
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.MovieApi"/></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.LoadQuickSave(System.Int32,System.Boolean)">
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.SaveStateApi"/></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.LoadRom(System.String,BizHawk.Client.Common.LoadRomArgs)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.PauseEmulator">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.RebootCore">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.Render">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.RestartMovie">
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.MovieApi"/></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.SaveQuickSave(System.Int32,System.Boolean,System.Boolean)">
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.SaveStateApi"/></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.StepRunLoop_Throttle">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.StopMovie(System.Boolean)">
            <remarks>only referenced from <see cref="T:BizHawk.Client.Common.MovieApi"/></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.TakeScreenshot">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.TakeScreenshot(System.String)">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.TakeScreenshotToClipboard">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.TogglePause">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IMainFormForApi.ToggleSound">
            <remarks>only referenced from <c>EmuClientApi</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternBool.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.AutoPatternBool"/> class.
            A simple on/off pattern.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternBool.GetNextValue(System.Boolean)">
            <summary>
            Gets the next value and increments index.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternBool.PeekNextValue">
            <summary>
            Gets the next value without incrementing index.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.AutoPatternAxis"/> class.
            Defaults to 0.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternAxis.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.AutoPatternAxis"/> class.
            Simple on/off pattern, using the given values as on/off.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternAxis.GetNextValue(System.Boolean)">
            <summary>
            Gets the next value and increments index.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.AutoPatternAxis.PeekNextValue">
            <summary>
            Gets the next value without incrementing index.
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.CopyControllerAdapter">
            <summary>
            Just copies source to sink, or returns whatever a NullController would if it is disconnected. useful for immovable hard-points.
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.IInputAdapter">
            <summary>
            Represents an input adapter, that can take in a source, manipulate it as needed
            and then represent the resulting state as an <see cref="T:BizHawk.Emulation.Common.IController"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.InputAdapterExtensions.And(BizHawk.Emulation.Common.IController,BizHawk.Emulation.Common.IController)">
            <summary>
            Creates a new IController that is in a state of a bitwise And of the source and target controllers
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.InputAdapterExtensions.Xor(BizHawk.Emulation.Common.IController,BizHawk.Emulation.Common.IController)">
            <summary>
            Creates a new IController that is in a state of a bitwise Xor of the source and target controllers
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.InputAdapterExtensions.Or(BizHawk.Emulation.Common.IController,BizHawk.Emulation.Common.IController)">
            <summary>
            Creates a new IController that is in a state of a bitwise Or of the source and target controllers
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.InputManager.StickyXorAdapter">
            <summary>
            provides an opportunity to mutate the player's input in an autohold style
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.InputManager.ButtonOverrideAdapter">
            <summary>
            Used to AND to another controller, used for <see cref="M:BizHawk.Client.Common.IJoypadApi.Set(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Boolean},System.Nullable{System.Int32})">JoypadApi.Set</see>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.InputManager.ClickyVirtualPadController">
            <summary>
            fire off one-frame logical button clicks here. useful for things like ti-83 virtual pad and reset buttons
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.OverrideAdapter">
            <summary>
            Used to pass into an Override method to manage the logic overriding input
            This only works with bool buttons!
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.OverrideAdapter.IsPressed(System.String)">
            <exception cref="T:System.InvalidOperationException"><paramref name="button"/> not overridden</exception>
        </member>
        <member name="T:BizHawk.Client.Common.UdlrControllerAdapter">
            <summary>
            Filters input for things called Up and Down while considering the client's AllowUD_LR option.
            This is a bit gross but it is unclear how to do it more nicely
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.DistinctKey">
            <summary>values are one-to-one with <c>System.Windows.Input.Key</c> except <see cref="F:BizHawk.Client.Common.DistinctKey.NumPadEnter"/> and <see cref="F:BizHawk.Client.Common.DistinctKey.Unknown"/> which were added for this project</summary>
            <remarks>copied from MIT-licensed WPF source: https://github.com/dotnet/wpf/blob/49bb41ad83abeb5ae22e4c59d0f43c1287acac00/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/Input/Key.cs</remarks>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.None">
            <summary>No key pressed.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Cancel">
            <summary>The CANCEL key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Back">
            <summary>The BACKSPACE key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Tab">
            <summary>The TAB key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LineFeed">
            <summary>The LineFeed key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Clear">
            <summary>The CLEAR key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Return">
            <summary>The RETURN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Enter">
            <summary>The ENTER key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Pause">
            <summary>The PAUSE key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Capital">
            <summary>The CAPS LOCK key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.CapsLock">
            <summary>The CAPS LOCK key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.KanaMode">
            <summary>The IME Kana mode key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.HangulMode">
            <summary>The IME Hangul mode key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.JunjaMode">
            <summary>The IME Junja mode key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.FinalMode">
            <summary>The IME Final mode key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.HanjaMode">
            <summary>The IME Hanja mode key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.KanjiMode">
            <summary>The IME Kanji mode key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Escape">
            <summary>The ESC key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.ImeConvert">
            <summary>The IME Convert key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.ImeNonConvert">
            <summary>The IME NonConvert key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.ImeAccept">
            <summary>The IME Accept key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.ImeModeChange">
            <summary>The IME Mode change request.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Space">
            <summary>The SPACEBAR key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Prior">
            <summary>The PAGE UP key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.PageUp">
            <summary>The PAGE UP key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Next">
            <summary>The PAGE DOWN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.PageDown">
            <summary>The PAGE DOWN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.End">
            <summary>The END key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Home">
            <summary>The HOME key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Left">
            <summary>The LEFT ARROW key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Up">
            <summary>The UP ARROW key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Right">
            <summary>The RIGHT ARROW key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Down">
            <summary>The DOWN ARROW key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Select">
            <summary>The SELECT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Print">
            <summary>The PRINT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Execute">
            <summary>The EXECUTE key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Snapshot">
            <summary>The PRINT SCREEN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.PrintScreen">
            <summary>The PRINT SCREEN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Insert">
            <summary>The INS key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Delete">
            <summary>The DEL key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Help">
            <summary>The HELP key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D0">
            <summary>The 0 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D1">
            <summary>The 1 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D2">
            <summary>The 2 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D3">
            <summary>The 3 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D4">
            <summary>The 4 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D5">
            <summary>The 5 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D6">
            <summary>The 6 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D7">
            <summary>The 7 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D8">
            <summary>The 8 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D9">
            <summary>The 9 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.A">
            <summary>The A key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.B">
            <summary>The B key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.C">
            <summary>The C key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.D">
            <summary>The D key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.E">
            <summary>The E key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F">
            <summary>The F key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.G">
            <summary>The G key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.H">
            <summary>The H key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.I">
            <summary>The I key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.J">
            <summary>The J key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.K">
            <summary>The K key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.L">
            <summary>The L key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.M">
            <summary>The M key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.N">
            <summary>The N key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.O">
            <summary>The O key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.P">
            <summary>The P key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Q">
            <summary>The Q key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.R">
            <summary>The R key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.S">
            <summary>The S key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.T">
            <summary>The T key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.U">
            <summary>The U key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.V">
            <summary>The V key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.W">
            <summary>The W key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.X">
            <summary>The X key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Y">
            <summary>The Y key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Z">
            <summary>The Z key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LWin">
            <summary>The left Windows logo key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.RWin">
            <summary>The right Windows logo key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Apps">
            <summary>The Application key (Microsoft Natural Keyboard).</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Sleep">
            <summary>The Computer Sleep key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad0">
            <summary>The 0 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad1">
            <summary>The 1 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad2">
            <summary>The 2 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad3">
            <summary>The 3 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad4">
            <summary>The 4 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad5">
            <summary>The 5 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad6">
            <summary>The 6 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad7">
            <summary>The 7 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad8">
            <summary>The 8 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPad9">
            <summary>The 9 key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Multiply">
            <summary>The Multiply key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Add">
            <summary>The Add key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Separator">
            <summary>The Separator key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Subtract">
            <summary>The Subtract key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Decimal">
            <summary>The Decimal key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Divide">
            <summary>The Divide key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F1">
            <summary>The F1 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F2">
            <summary>The F2 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F3">
            <summary>The F3 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F4">
            <summary>The F4 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F5">
            <summary>The F5 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F6">
            <summary>The F6 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F7">
            <summary>The F7 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F8">
            <summary>The F8 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F9">
            <summary>The F9 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F10">
            <summary>The F10 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F11">
            <summary>The F11 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F12">
            <summary>The F12 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F13">
            <summary>The F13 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F14">
            <summary>The F14 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F15">
            <summary>The F15 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F16">
            <summary>The F16 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F17">
            <summary>The F17 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F18">
            <summary>The F18 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F19">
            <summary>The F19 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F20">
            <summary>The F20 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F21">
            <summary>The F21 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F22">
            <summary>The F22 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F23">
            <summary>The F23 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.F24">
            <summary>The F24 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumLock">
            <summary>The NUM LOCK key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Scroll">
            <summary>The SCROLL LOCK key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LeftShift">
            <summary>The left SHIFT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.RightShift">
            <summary>The right SHIFT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LeftCtrl">
            <summary>The left CTRL key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.RightCtrl">
            <summary>The right CTRL key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LeftAlt">
            <summary>The left ALT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.RightAlt">
            <summary>The right ALT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserBack">
            <summary>The Browser Back key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserForward">
            <summary>The Browser Forward key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserRefresh">
            <summary>The Browser Refresh key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserStop">
            <summary>The Browser Stop key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserSearch">
            <summary>The Browser Search key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserFavorites">
            <summary>The Browser Favorites key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.BrowserHome">
            <summary>The Browser Home key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.VolumeMute">
            <summary>The Volume Mute key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.VolumeDown">
            <summary>The Volume Down key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.VolumeUp">
            <summary>The Volume Up key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.MediaNextTrack">
            <summary>The Media Next Track key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.MediaPreviousTrack">
            <summary>The Media Previous Track key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.MediaStop">
            <summary>The Media Stop key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.MediaPlayPause">
            <summary>The Media Play Pause key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LaunchMail">
            <summary>The Launch Mail key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.SelectMedia">
            <summary>The Select Media key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LaunchApplication1">
            <summary>The Launch Application1 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.LaunchApplication2">
            <summary>The Launch Application2 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem1">
            <summary>The Oem 1 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemSemicolon">
            <summary>The Oem Semicolon key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemPlus">
            <summary>The Oem plus key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemComma">
            <summary>The Oem comma key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemMinus">
            <summary>The Oem Minus key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemPeriod">
            <summary>The Oem Period key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem2">
            <summary>The Oem 2 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemQuestion">
            <summary>The Oem Question key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem3">
            <summary>The Oem 3 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemTilde">
            <summary>The Oem tilde key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.AbntC1">
            <summary>The ABNT_C1 Portuguese (Brazilian) key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.AbntC2">
            <summary>The ABNT_C2 Portuguese (Brazilian) key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem4">
            <summary>The Oem 4 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemOpenBrackets">
            <summary>The Oem Open Brackets key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem5">
            <summary>The Oem 5 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemPipe">
            <summary>The Oem Pipe key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem6">
            <summary>The Oem 6 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemCloseBrackets">
            <summary>The Oem Close Brackets key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem7">
            <summary>The Oem 7 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemQuotes">
            <summary>The Oem Quotes key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem8">
            <summary>The Oem8 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Oem102">
            <summary>The Oem 102 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemBackslash">
            <summary>The Oem Backslash key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.ImeProcessed">
            <summary>A special key masking the real key being processed by an IME.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.System">
            <summary>A special key masking the real key being processed as a system key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemAttn">
            <summary>The OEM_ATTN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeAlphanumeric">
            <summary>The DBE_ALPHANUMERIC key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemFinish">
            <summary>The OEM_FINISH key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeKatakana">
            <summary>The DBE_KATAKANA key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemCopy">
            <summary>The OEM_COPY key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeHiragana">
            <summary>The DBE_HIRAGANA key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemAuto">
            <summary>The OEM_AUTO key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeSbcsChar">
            <summary>The DBE_SBCSCHAR key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemEnlw">
            <summary>The OEM_ENLW key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeDbcsChar">
            <summary>The DBE_DBCSCHAR key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemBackTab">
            <summary>The OEM_BACKTAB key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeRoman">
            <summary>The DBE_ROMAN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Attn">
            <summary>The ATTN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeNoRoman">
            <summary>The DBE_NOROMAN key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.CrSel">
            <summary>The CRSEL key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeEnterWordRegisterMode">
            <summary>The DBE_ENTERWORDREGISTERMODE key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.ExSel">
            <summary>The EXSEL key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeEnterImeConfigureMode">
            <summary>The DBE_ENTERIMECONFIGMODE key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.EraseEof">
            <summary>The ERASE EOF key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeFlushString">
            <summary>The DBE_FLUSHSTRING key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Play">
            <summary>The PLAY key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeCodeInput">
            <summary>The DBE_CODEINPUT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Zoom">
            <summary>The ZOOM key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeNoCodeInput">
            <summary>The DBE_NOCODEINPUT key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NoName">
            <summary>A constant reserved for future use.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeDetermineString">
            <summary>The DBE_DETERMINESTRING key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Pa1">
            <summary>The PA1 key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DbeEnterDialogConversionMode">
            <summary>The DBE_ENTERDLGCONVERSIONMODE key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.OemClear">
            <summary>The CLEAR key.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.DeadCharProcessed">
            <summary>Indicates the key is part of a dead-key composition</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.NumPadEnter">
            <summary>The ENTER key on the numeric keypad.</summary>
        </member>
        <member name="F:BizHawk.Client.Common.DistinctKey.Unknown">
            <summary>Indicates a key which is not present in this enum</summary>
        </member>
        <member name="T:BizHawk.Client.Common.IHostInputAdapter">
            <remarks>this was easier than trying to make static classes instantiable...</remarks>
            TODO: Reconsider if we want to hand over the main form handle
            This is only used in DirectInput, and it would work just as fine if a hidden window was created internally in its place
        </member>
        <member name="M:BizHawk.Client.Common.IHostInputAdapter.GetHapticsChannels">
            <remarks>keys are pad prefixes "X# "/"J# " (with the trailing space)</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.IHostInputAdapter.SetHaptics(System.Collections.Generic.IReadOnlyCollection{System.ValueTuple{System.String,System.Int32}})">
            <remarks>implementors may store this for use during the next <see cref="M:BizHawk.Client.Common.IHostInputAdapter.ProcessHostGamepads(System.Action{System.String,System.Boolean,BizHawk.Client.Common.ClientInputFocus},System.Action{System.String,System.Int32})"/> call</remarks>
        </member>
        <member name="F:BizHawk.Client.Common.LogicalButton._getEffectiveModListCallback">
            <remarks>pretty sure these are always consumed during the same iteration of the main program loop, but ¯\_(ツ)_/¯ better safe than sorry --yoshi</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.PolarRectConversion.PolarToRectLookup(System.UInt16,System.UInt16)">
            <param name="r">radial displacement in range <c>0..181</c> (this is not asserted)</param>
            <param name="θ">angle (in degrees) in range <c>0..359</c> (this is not asserted)</param>
            <returns>rectangular (Cartesian) coordinates <c>(x, y)</c>. <c>x</c> and/or <c>y</c> may be outside the range <c>-128..127</c>.</returns>
            <seealso cref="M:BizHawk.Client.Common.PolarRectConversion.RectToPolarLookup(System.SByte,System.SByte)"/>
        </member>
        <member name="M:BizHawk.Client.Common.PolarRectConversion.RectToPolarLookup(System.SByte,System.SByte)">
            <param name="x">horizontal component of rectangular (Cartesian) coordinates <c>(x, y)</c>, in range <c>-128..127</c> (this is not asserted)</param>
            <param name="y">vertical component, as <paramref name="x"/></param>
            <returns>polar coordinates <c>(r, θ)</c> where <c>r</c> is radial displacement in range <c>0..181</c> and <c>θ</c> is angle (in degrees) in range <c>0..359</c> (from <c>+x</c> towards <c>+y</c>)</returns>
            <seealso cref="M:BizHawk.Client.Common.PolarRectConversion.PolarToRectLookup(System.UInt16,System.UInt16)"/>
        </member>
        <member name="T:BizHawk.Client.Common.PolarRectConversionData">
            <remarks>This is separate from <see cref="T:BizHawk.Client.Common.PolarRectConversion"/> because its large size slows or prevents design-time code analysis.</remarks>
        </member>
        <member name="F:BizHawk.Client.Common.PolarRectConversionData._rθ2x">
            <remarks>generated with ruby: <c>def f(r, θ) (r * Math.cos(θ * Math::PI / 180)).round end; puts (0..181).map {|r| "{" + (0..359).map {|θ| f(r, θ)} * ", " + "}"} * ",\n"</c></remarks>
        </member>
        <member name="F:BizHawk.Client.Common.PolarRectConversionData._rθ2y">
            <remarks>generated with ruby: <c>def f(r, θ) (r * Math.sin(θ * Math::PI / 180)).round end; puts (0..181).map {|r| "{" + (0..359).map {|θ| f(r, θ)} * ", " + "}"} * ",\n"</c></remarks>
        </member>
        <member name="F:BizHawk.Client.Common.PolarRectConversionData._xy2r">
            <remarks>generated with ruby: <c>def f(x, y) Math.hypot(x &lt; 128 ? x : x - 256, y &lt; 128 ? y : y - 256).round end; puts (0..255).map {|x| "{" + (0..255).map {|y| f(x, y)} * ", " + "}"} * ",\n"</c></remarks>
        </member>
        <member name="F:BizHawk.Client.Common.PolarRectConversionData._xy2θ">
            <remarks>generated with ruby: <c>def f(x, y) x1 = x &lt; 128 ? x : x - 256; (180 * (y &lt; 128 ? Math.atan2(y, x1) / Math::PI : Math.atan2(y - 256, x1) / Math::PI + 2)).round end; puts (0..255).map {|x| "{ " + (0..255).map {|y| f(x, y)} * ", " + " }"} * ",\n"</c></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.GuiLuaLibrary.DrawText(System.Int32,System.Int32,System.String,System.Object,System.Object,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <remarks>TODO do this in Lua binding code?</remarks>
        </member>
        <member name="P:BizHawk.Client.Common.ILuaLibraries.IsRebootingCore">
            <remarks>pretty hacky... we don't want a lua script to be able to restart itself by rebooting the core</remarks>
        </member>
        <member name="P:BizHawk.Client.Common.ILuaLibraries.IsInInputOrMemoryCallback">
            <remarks>not really sure if this is the right place to put it, multiple different places need this...</remarks>
        </member>
        <member name="M:BizHawk.Client.Common.LuaFileList.#ctor(System.Collections.Generic.IReadOnlyCollection{BizHawk.Client.Common.LuaFile},System.Action)">
            <remarks><paramref name="onChanged"/> will not be called when initialising from given <paramref name="collection"/>, only on subsequent mutations</remarks>
        </member>
        <member name="T:BizHawk.Client.Common.NESLuaLibrary">
            <remarks>
            TODO: perhaps with the new core config system, one could automatically bring out all of the settings to a lua table, with names.
            that would be completely arbitrary and would remove the whole requirement for this mess
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.GetAllowMoreThanEightSprites">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.GetBottomScanline(System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.GetClipLeftAndRight">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.GetDisplayBackground">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.GetDisplaySprites">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.GetTopScanline(System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.SetAllowMoreThanEightSprites(System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.SetClipLeftAndRight(System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.SetDisplayBackground(System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.SetDisplaySprites(System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.NESLuaLibrary.SetScanlines(System.Int32,System.Int32,System.Boolean)">
            <exception cref="T:System.InvalidOperationException">loaded core is not NESHawk or QuickNes</exception>
        </member>
        <member name="M:BizHawk.Client.Common.LuaLibraryBase.Restarted">
            <remarks>for implementors to reset any fields whose value depends on <see cref="P:BizHawk.Client.Common.LuaLibraryBase.APIs"/> or a <see cref="T:BizHawk.Emulation.Common.IEmulatorService">service</see></remarks>
        </member>
        <member name="M:BizHawk.Client.Common.LuaLibraryBase.SetCurrentThread(BizHawk.Client.Common.LuaFile)">
            <exception cref="T:System.InvalidOperationException">attempted to have Lua running in two host threads at once</exception>
        </member>
        <member name="M:BizHawk.Client.Common.LuaSandbox.CoolSetCurrentDirectory(System.String,System.String)">
            <summary>
            Sets the OS's current working directory, with some speed hacks.
            </summary>
            <param name="path">The path which the current directory will be set to.</param>
            <param name="currDirSpeedHack">This method will not set the current directory if it is already set to path.
            If given, it will use this value instead of getting the current directory from the OS.</param>
            <returns>True if the current directory was sucessfully set. Otherwise, false.</returns>
        </member>
        <member name="M:BizHawk.Client.Common.LuaSandbox.GetSandbox(NLua.LuaThread)">
            <exception cref="T:System.InvalidOperationException">could not get sandbox reference for thread (<see cref="M:BizHawk.Client.Common.LuaSandbox.CreateSandbox(NLua.LuaThread,System.String)"/> has not been called)</exception>
        </member>
        <member name="P:BizHawk.Client.Common.NamedLuaFunction.LuaLibraries">
            <summary>
            HACK
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Bk2LogEntryGenerator.EmptyEntry">
            <summary>
            Gets an input log entry that is considered empty. (booleans will be false, axes will be 0)
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Bk2LogEntryGenerator.GenerateLogEntry">
            <summary>
            Generates an input log entry for the current state of Source
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Bk2LogEntryGenerator.GenerateLogKey(BizHawk.Emulation.Common.ControllerDefinition)">
            <summary>
            Generates a human readable key that will specify the names of the
            buttons and the order they are in. This is intended to simply be
            documentation of the meaning of the mnemonics and not to be used to
            enforce the mnemonic values
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Bk2LogEntryGenerator.Map">
            <summary>
            Generates a dictionary of button names to their corresponding mnemonic values
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.StreamStringLog">
            <summary>
            A dumb IStringLog with storage on disk with no provision for recovering lost space, except upon Clear()
            The purpose here is to avoid having too complicated buggy logic or a dependency on SQLite or such.
            It should be faster than those alternatives, but wasteful of disk space.
            It should also be easier to add new IList&lt;string&gt;-like methods than dealing with a database
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.movie.import.FmvImport">
            <summary>For Famtasia's <see href="https://tasvideos.org/EmulatorResources/Famtasia/FMV"><c>.fmv</c> format</see></summary>
        </member>
        <member name="T:BizHawk.Client.Common.movie.import.LsmvImport">
            <summary>For lsnes' <see href="https://tasvideos.org/Lsnes/Movieformat"><c>.lsmv</c> format</see></summary>
        </member>
        <member name="T:BizHawk.Client.Common.movie.import.MmvImport">
            <summary>For Dega's <see href="https://tasvideos.org/EmulatorResources/MMV"><c>.mmv</c> format</see></summary>
        </member>
        <member name="T:BizHawk.Client.Common.movie.import.SmvImport">
            <summary>For Snes9x's <see href="https://tasvideos.org/EmulatorResources/Snes9x/SMV"><c>.smv</c> format</see></summary>
        </member>
        <member name="M:BizHawk.Client.Common.BkmControllerAdapter.SetControllersAsMnemonic(System.String)">
            <summary>
            latches all buttons from the supplied mnemonic string
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.MovieImporter.PromptForRom(BizHawk.Client.Common.MovieImporter.MatchesMovieHash)">
            <summary>
            Prompts the user for a ROM file that matches the original movie file's hash
            and returns a SHA1 hash of that ROM file.
            </summary>
            <param name="matchesMovieHash">Function that checks whether the ROM data matches the original hash</param>
            <returns>SHA1 hash of the selected ROM file</returns>
        </member>
        <member name="M:BizHawk.Client.Common.MovieImport.IsValidMovieExtension(System.String)">
            <summary>
            Returns a value indicating whether or not there is an importer for the given extension
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IBasicMovieInfo.FrameCount">
            <summary>
            Gets the total number of frames that count towards the completion time of the movie
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IBasicMovieInfo.TimeLength">
            <summary>
            Gets the actual length of time a movie lasts for. For subframe cores, this will be different then the above two options
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IBasicMovieInfo.FrameRate">
            <summary>
            Gets the frame rate in frames per second for the movie's system.
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IBasicMovieInfo.Hash">
            <value>either CRC32, MD5, or SHA1, hex-encoded, unprefixed</value>
        </member>
        <member name="P:BizHawk.Client.Common.IBasicMovieInfo.HeaderEntries">
            <summary>
            Gets the header key value pairs stored in the movie file
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IBasicMovieInfo.Load">
            <summary>
            Tells the movie to load the contents of Filename
            </summary>
            <returns>Return whether or not the file was successfully loaded</returns>
        </member>
        <member name="F:BizHawk.Client.Common.MovieMode.Inactive">
            <summary>
            There is no movie loaded
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.MovieMode.Play">
            <summary>
            The movie is in playback mode
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.MovieMode.Record">
            <summary>
            The movie is currently recording
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.MovieMode.Finished">
            <summary>
            The movie has played past the end, but is still loaded in memory
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovie.Mode">
            <summary>
            Gets the current movie mode
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovie.InputLogLength">
            <summary>
            Gets the actual length of the input log, should only be used by code that needs the input log length
            specifically, not the frame count
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovie.PreferredExtension">
            <summary>
            Gets the file extension for the current <see cref="T:BizHawk.Client.Common.IMovie"/> implementation
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovie.SyncSettingsJson">
            <summary>
            Gets or sets the Sync Settings from the Core
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.SaveBackup">
            <summary>
            Forces the creation of a backup file of the current movie state
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.LogGeneratorInstance(BizHawk.Emulation.Common.IController)">
            <summary>
            Creates a log generator using the given input source
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.Save">
            <summary>
            Instructs the movie to save the current contents to Filename
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.SetCycleValues">
            <summary>updates the <see cref="F:BizHawk.Client.Common.HeaderKeys.CycleCount"/> and <see cref="F:BizHawk.Client.Common.HeaderKeys.ClockRate"/> headers from the currently loaded core</summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.WriteInputLog(System.IO.TextWriter)">
            <summary>
            Writes the input log directly to the stream, bypassing the need to load it all into ram as a string
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.GetInputLogEntry(System.Int32)">
            <summary>
            Gets one frame from the input log.
            </summary>
            <param name="frame">The frame to get.</param>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.CheckTimeLines(System.IO.TextReader,System.String@)">
            <summary>
            Compares the input log inside reader with the movie's current input to see if the reader's input belongs to the same timeline,
            in other words, if reader's input is completely contained in the movie's input, then it is considered in the same timeline
            </summary>
            <param name="reader">The reader containing the contents of the input log</param>
            <param name="errorMessage">Returns an error message, if any</param>
            <returns>Returns whether or not the input log in reader is in the same timeline as the movie</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.ExtractInputLog(System.IO.TextReader,System.String@)">
            <summary>
            Takes reader and extracts the input log, then replaces the movies input log with it
            </summary>
            <param name="reader">The reader containing the contents of the input log</param>
            <param name="errorMessage">Returns an error message, if any</param>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.StartNewRecording">
            <summary>
            Tells the movie to start recording from the beginning.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.StartNewPlayback">
            <summary>
            Tells the movie to start playback from the beginning
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.Stop(System.Boolean)">
            <summary>
            Sets the movie to inactive (note that it will still be in memory)
            The saveChanges flag will tell the movie to save its contents to disk
            </summary>
            <param name="saveChanges">if true, will save to disk</param>
            <returns>Whether or not the movie was saved</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.SwitchToRecord">
            <summary>
            Switches to record mode
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.SwitchToPlay">
            <summary>
            Switches to playback mode
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.FinishedMode">
            <summary>
            Tells the movie to go into "Finished" mode, where the user resumes control of input but the movie is still loaded in memory
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.AppendFrame(BizHawk.Emulation.Common.IController)">
            <summary>
            Adds the given input to the movie
            Note: this edits the input log without the normal movie recording logic applied
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.PokeFrame(System.Int32,BizHawk.Emulation.Common.IController)">
            <summary>
            Replaces the input at the given frame with the given input
            Note: this edits the input log without the normal movie recording logic applied
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.RecordFrame(System.Int32,BizHawk.Emulation.Common.IController)">
            <summary>
            Records the given input into the given frame,
            This is subject to normal movie recording logic
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.Truncate(System.Int32)">
            <summary>
            Instructs the movie to remove all input from its input log starting with the input at frame.
            </summary>
            <param name="frame">The frame at which to truncate</param>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.GetInputState(System.Int32)">
            <summary>
            Gets a single frame of input via a controller state
            </summary>
            <param name="frame">The frame of input to be retrieved</param>
            <returns>A controller state representing the specified frame of input, if frame is out of range, will return null</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IMovie.Attach(BizHawk.Emulation.Common.IEmulator)">
            <summary>
            Attaches a core to the given movie instance, this must be done and
            it must be done only once, a movie can not and should not exist for more
            than the lifetime of the core
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if attempting to attach a core when one is already attached
            or if the given core does not meet all required dependencies
            </exception>
        </member>
        <member name="P:BizHawk.Client.Common.IMovie.Emulator">
            <summary>
            The currently attached core or null if not yet attached
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovie.Session">
            <summary>
            The current movie session
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.MovieExtensions.IsAtEnd(BizHawk.Client.Common.IMovie)">
            <summary>
            Emulation is currently right after the movie's last input frame,
            but no further frames have been emulated.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.MovieExtensions.ProcessSavestate(BizHawk.Client.Common.IMovie,BizHawk.Emulation.Common.IEmulator)">
            <summary>
            If the given movie contains a savestate it will be loaded if
            the given core has savestates, and a framebuffer populated
            if it is contained in the state and the given core supports it
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.MovieExtensions.ProcessSram(BizHawk.Client.Common.IMovie,BizHawk.Emulation.Common.IEmulator)">
            <summary>
            Sets the given <paramref name="emulator"/> save ram if the movie contains save ram
            and the core supports save ram
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieController.SetFrom(BizHawk.Emulation.Common.IController)">
            <summary>
            Latches to the given <see cref="T:BizHawk.Emulation.Common.IController" />
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieController.SetFromSticky(BizHawk.Client.Common.IStickyAdapter)">
            <summary>
            Latches to the given <see cref="T:BizHawk.Client.Common.IStickyAdapter" />
            For buttons it latches autohold state, for axes it latches neutral value.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieController.SetFromMnemonic(System.String)">
            <summary>
            Sets the controller to the state represented by the given mnemonic string
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieController.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the given boolean button to the given value
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieController.SetAxis(System.String,System.Int32)">
            <summary>
            Sets the given axis button to the given value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovieSession.NewMovieQueued">
            <summary>
            Gets a value indicating whether or not a new movie is queued for loading
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovieSession.QueuedSyncSettings">
            <summary>
            Gets the sync settings from a queued movie, if a movie is queued
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovieSession.QueuedCoreName">
            <value>The Core header of the queued movie iff one is queued, else <see langword="null"/></value>
        </member>
        <member name="P:BizHawk.Client.Common.IMovieSession.StickySource">
            <summary>
            Provides a source for sticky controls ot use when recording
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovieSession.MovieIn">
            <summary>
            Represents the input source that is fed to
            the movie for the purpose of recording, if active,
            or to simply pass through if inactive
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IMovieSession.MovieOut">
            <summary>
            Represents the movie input in the input chain
            Is a pass through when movies are not active,
            otherwise they handle necessary movie logic
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieSession.GenerateMovieController(BizHawk.Emulation.Common.ControllerDefinition)">
            <summary>
            Creates a <see cref="T:BizHawk.Client.Common.IMovieController" /> instance based on the
            given button definition if provided else the
            current <see cref="P:BizHawk.Client.Common.IMovieSession.MovieController" /> button definition
            will be used
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieSession.QueueNewMovie(BizHawk.Client.Common.IMovie,System.String,System.String,BizHawk.Client.Common.PathEntryCollection,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Queues up a movie for loading
            When initializing a movie, it will be stored until Rom loading processes have been completed, then it will be moved to the Movie property
            If an existing movie is still active, it will remain in the Movie property while the new movie is queued
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieSession.RunQueuedMovie(System.Boolean,BizHawk.Emulation.Common.IEmulator)">
            <summary>
            Sets the Movie property with the QueuedMovie, clears the queued movie, and starts the new movie
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieSession.AbortQueuedMovie">
            <summary>clears the queued movie</summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieSession.ConvertToTasProj">
            <summary>
            If a movie is active, it will be converted to a <see cref="T:BizHawk.Client.Common.ITasMovie" />
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IMovieSession.Get(System.String,System.Boolean)">
            <summary>
            Create a new (Tas)Movie with the given path as filename. If <paramref name="loadMovie"/> is true,
            will also attempt to load an existing movie from <paramref name="path"/>.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ITasMovie.ClearFrame(System.Int32)">
            <summary>
            Replaces the given frame's input with an empty frame
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.MovieService.MovieExtensions">
            <summary>
            Gets a list of extensions for all <see cref="T:BizHawk.Client.Common.IMovie"/> implementations
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.MovieSession.QueueNewMovie(BizHawk.Client.Common.IMovie,System.String,System.String,BizHawk.Client.Common.PathEntryCollection,System.Collections.Generic.IDictionary{System.String,System.String})">
            <exception cref="T:BizHawk.Client.Common.MoviePlatformMismatchException"><paramref name="movie"/>.<see cref="P:BizHawk.Client.Common.IBasicMovieInfo.SystemID"/> does not match <paramref name="systemId"/>.<see cref="P:BizHawk.Emulation.Common.IEmulator.SystemId"/></exception>
        </member>
        <member name="P:BizHawk.Client.Common.IStateManager.Item(System.Int32)">
            <summary>
            Retrieves the savestate for the given frame,
            If this frame does not have a state currently, will return an empty array.false
            Try not to use this as it is not fast.
            </summary>
            <returns>A savestate for the given frame or an empty array if there isn't one</returns>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.Capture(System.Int32,BizHawk.Emulation.Common.IStatable,System.Boolean)">
            <summary>
            Requests that the current emulator state be captured
            Unless force is true, the state may or may not be captured depending on the logic employed by "green-zone" management
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.EvictReserved(System.Int32)">
            <summary>
            Commands the state manager to remove a reserved state for the given frame, if it is exists
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.InvalidateAfter(System.Int32)">
            <summary>
            Clears out all savestates after the given frame number
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.GetStateClosestToFrame(System.Int32)">
            <summary>
            Get a nearby state.  The returned frame must be less than or equal to the passed frame.
            This may not fail; the StateManager strongly holds a frame 0 state to ensure there's always a possible result.
            </summary>
            <returns>This stream may be consumed only once, and before any other calls to statemanager occur</returns>
        </member>
        <member name="P:BizHawk.Client.Common.IStateManager.Count">
            <value>the total number of states currently held by the state manager</value>
        </member>
        <member name="P:BizHawk.Client.Common.IStateManager.Last">
            <value>the most recent frame number that the state manager possesses</value>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.UpdateSettings(BizHawk.Client.Common.ZwinderStateManagerSettings,System.Boolean)">
            <summary>
            Updates the internal state saving logic settings
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.SaveStateHistory(System.IO.BinaryWriter)">
            <summary>
            Serializes the current state of the instance for persisting to disk
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IStateManager.Engage(System.Byte[])">
            <summary>
            Enables the instance to be used. An instance of <see cref="T:BizHawk.Client.Common.IStateManager"/> should not
            be useable until this method is called
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovie.#ctor(BizHawk.Client.Common.IMovieSession,System.String)">
            <exception cref="T:System.InvalidOperationException">loaded core does not implement <see cref="T:BizHawk.Emulation.Common.IStatable"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovie.DisplayValue(System.Int32,System.String)">
            <summary>
            Returns the mnemonic value for boolean buttons, and actual value for axes,
            for a given frame and button.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovie.RemoveFrames(System.Int32,System.Int32)">
            <summary>
            Remove all frames between removeStart and removeUpTo (excluding removeUpTo).
            </summary>
            <param name="removeStart">The first frame to remove.</param>
            <param name="removeUpTo">The frame after the last frame to remove.</param>
        </member>
        <member name="P:BizHawk.Client.Common.TasMovieChangeLog.IsRecording">
            <summary>
            Gets or sets a value indicating whether the movie is recording action history.
            This is not intended to turn off the ChangeLog, but to disable the normal recording process.
            Use this to manually control the ChangeLog. (Useful for disabling the ChangeLog during undo/redo).
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieChangeLog.BeginNewBatch(System.String,System.Boolean)">
            <summary>
            All changes made between calling Begin and End will be one Undo.
            If already recording in a batch, calls EndBatch.
            </summary>
            <param name="name">The name of the batch</param>
            <param name="keepOldBatch">If set and a batch is in progress, a new batch will not be created.</param>
            <returns>Returns true if a new batch was started; otherwise false.</returns>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieChangeLog.EndBatch">
            <summary>
            Ends the current undo batch. Future changes will be one undo each.
            If not already recording a batch, does nothing.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieChangeLog.Undo">
            <summary>
            Undoes the most recent action batch, if any exist.
            </summary>
            <returns>Returns the frame which the movie needs to rewind to.</returns>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieChangeLog.Redo">
            <summary>
            Redoes the most recent undo, if any exist.
            </summary>
            <returns>Returns the frame which the movie needs to rewind to.</returns>
        </member>
        <member name="T:BizHawk.Client.Common.TasMovieMarker">
            <summary>
            Represents a TasMovie Marker
            A marker is a tagged frame with a message
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieMarker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.TasMovieMarker"/> class from a line of text
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieMarker.ShiftTo(System.Int32)">
            <summary>
            Shifts the marker's position directly.
            Should be used sparingly and only while considering the surrounding frames.
            Intended for moving binded markers during frame inserts/deletions.
            </summary>
            <param name="offset">Amount to shift marker by.</param>
        </member>
        <member name="M:BizHawk.Client.Common.TasMovieMarkerList.TruncateAt(System.Int32)">
            <summary>
            Deletes all markers at or below the given start frame.
            </summary>
            <param name="startFrame">The first frame for markers to be deleted.</param>
            <returns>Number of markers deleted.</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderStateManager.#ctor(System.Func{System.Int32,System.Boolean})">
            <param name="reserveCallback">Called when deciding to evict a state for the given frame, if true is returned, the state will be reserved</param>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderStateManager.AllStates">
            <summary>
            Enumerate all states in reverse order
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderStateManagerSettings.CurrentUseCompression">
            <summary>
            Buffer settings when navigating near now
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderStateManagerSettings.RecentUseCompression">
            <summary>
            Buffer settings when navigating directly before the Current buffer
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderStateManagerSettings.GapsUseCompression">
            <summary>
            Priority States for special use cases
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IOpenAdvanced.SimplePath">
            <summary>
            returns a sole path to use for opening a rom (not sure if this is a good idea)
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.QuickBmpFile.BITMAPFILEHEADER.FromStream(System.IO.Stream)">
            <exception cref="T:System.InvalidOperationException">misformatted data</exception>
        </member>
        <member name="M:BizHawk.Client.Common.QuickBmpFile.BITMAPINFOHEADER.FromStream(System.IO.Stream)">
            <exception cref="T:System.InvalidOperationException">misformatted data</exception>
        </member>
        <member name="T:BizHawk.Client.Common.QuickBmpFile.LoadedBMP">
            <summary>
            if passed to QuickBMPFile.Load(), will size itself to match the incoming bmp
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.QuickBmpFile.LoadedBMP.VsyncNumerator">
            <exception cref="T:System.InvalidOperationException">always</exception>
        </member>
        <member name="P:BizHawk.Client.Common.QuickBmpFile.LoadedBMP.VsyncDenominator">
            <exception cref="T:System.InvalidOperationException">always</exception>
        </member>
        <member name="P:BizHawk.Client.Common.RecentFiles.Frozen">
            <summary>
            If true, the list can not change, or be cleared
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IRewinder.Rewind(System.Int32)">
            <summary>
            Rewind 1 or 2 saved frames, avoiding frameToAvoid if possible.
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.ZeldaWinder">
            <summary>
            A rewinder that uses Zelda compression, built on top of a ring buffer
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZeldaWinder.Count">
            <summary>
            How many states are actually in the state ringbuffer
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZeldaWinder.Size">
            <summary>
            Total size of the _buffer
            </summary>
            <value></value>
        </member>
        <member name="P:BizHawk.Client.Common.ZeldaWinder.RewindFrequency">
            <summary>
            TODO: This is not a frequency, it's the reciprocal
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Zwinder">
            <summary>
            A simple ring buffer rewinder
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Zwinder.Count">
            <summary>
            How many states are actually in the state ringbuffer
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Zwinder.Used">
            <summary>
            total number of bytes used
            </summary>
            <value></value>
        </member>
        <member name="P:BizHawk.Client.Common.Zwinder.Size">
            <summary>
            Total size of the _buffer
            </summary>
            <value></value>
        </member>
        <member name="P:BizHawk.Client.Common.Zwinder.RewindFrequency">
            <summary>
            TODO: This is not a frequency, it's the reciprocal
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.ZwinderBuffer.STATEMASK">
            <summary>
            Number of states that could be in the state ringbuffer, Mask for the state ringbuffer
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderBuffer.Count">
            <summary>
            How many states are actually in the state ringbuffer
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderBuffer.Used">
            <value>total number of bytes used</value>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderBuffer.Size">
            <value>Total size of the buffer</value>
        </member>
        <member name="P:BizHawk.Client.Common.ZwinderBuffer.RewindFrequency">
            <summary>
            TODO: This is not a frequency, it's the reciprocal
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderBuffer.WouldCapture(System.Int32)">
            <summary>
            Predict whether Capture() would capture a state, assuming a particular frame delta.
            </summary>
            <param name="frameDelta">The assumed frame delta.  Normally this will be equal to `nextStateFrame - GetState(Count - 1).Frame`.</param>
            <returns>Whether Capture(nextStateFrame) would actually capture, assuming the frameDelta matched.</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderBuffer.Capture(System.Int32,System.Action{System.IO.Stream},System.Action{System.Int32},System.Boolean)">
            <summary>
            Maybe captures a state, if the conditions are favorable
            </summary>
            <param name="frame">frame number to capture</param>
            <param name="callback">will be called with the stream if capture is to be performed</param>
            <param name="indexInvalidated">
            If provided, will be called with the index of states that are about to be removed.  This will happen during
            calls to Write() inside `callback`, and any reading of the old state must be finished before this returns.
            </param>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderBuffer.GetState(System.Int32)">
            <summary>
            Retrieve information about a state from 0..Count - 1.
            The information contained within is valid only until the collection is modified.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderBuffer.InvalidateEnd(System.Int32)">
            <summary>
            Invalidate states from GetState(index) on to the end of the buffer, so that Count == index afterwards
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ZwinderBuffer.SaveStateStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Func{System.Int64})">
             <summary>
            
             </summary>
             <param name="backingStore">The ringbuffer to write into</param>
             <param name="offset">Offset into the buffer to start writing (and treat as position 0 in the stream)</param>
             <param name="mask">Buffer size mask, used to wrap values in the ringbuffer correctly</param>
             <param name="notifySize">
             If the stream will exceed this size, notifySizeReached must be called before clobbering any data
             </param>
             <param name="notifySizeReached">
             The callback that will be called when notifySize is about to be exceeded.  Can either return a new larger notifySize,
             or abort processing with an IOException.  This must fail if size is going to exceed buffer.Length, as nothing else
             is preventing that case.
             </param>
        </member>
        <member name="M:BizHawk.Client.Common.RomGame.#ctor(BizHawk.Common.HawkFile,System.String)">
            <exception cref="T:System.Exception"><paramref name="file"/> does not exist</exception>
        </member>
        <member name="M:BizHawk.Client.Common.RomGame.StripSNESDumpHeader(System.ReadOnlySpan{System.Byte})">
            <remarks>https://snes.nesdev.org/wiki/ROM_file_formats#Detecting_Headered_ROM</remarks>
        </member>
        <member name="T:BizHawk.Client.Common.RomLoader.RomFileExtensions">
            <remarks>roms ONLY; when an archive is loaded with a single file whose extension is one of these, the user prompt is skipped</remarks>
        </member>
        <member name="F:BizHawk.Client.Common.RomLoader.RomFilter">
            <remarks>TODO add and handle <see cref="F:BizHawk.Client.Common.FilesystemFilter.LuaScripts"/> (you can drag-and-drop scripts and there are already non-rom things in this list, so why not?)</remarks>
        </member>
        <member name="T:BizHawk.Client.Common.IndexedStateLump">
            <summary>
            describes a BinaryStateLump virtual name that has a numerical index
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.SavestateFile">
            <summary>
            Represents an aggregated savestate file that includes core, movie, and other related data
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ZipStateLoader.GetLump(BizHawk.Client.Common.BinaryStateLump,System.Boolean,System.Action{System.IO.Stream,System.Int64},System.Boolean)">
            <param name="lump">lump to retrieve</param>
            <param name="abort">pass true to throw exception instead of returning false</param>
            <param name="callback">function to call with the desired stream</param>
            <param name="isZstdCompressed">lump is zstd compressed</param>
            <returns>true iff stream was loaded</returns>
            <exception cref="T:System.Exception">stream not found and <paramref name="abort"/> is <see langword="true"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.ZipStateLoader.GetCoreState(System.Action{System.IO.BinaryReader},System.Action{System.IO.TextReader})">
            <exception cref="T:System.Exception">couldn't find Binary or Text savestate</exception>
        </member>
        <member name="T:BizHawk.Client.Common.SharpCompressArchiveFile">
            <see cref="T:BizHawk.Client.Common.SharpCompressDearchivalMethod"/>
        </member>
        <member name="T:BizHawk.Client.Common.SharpCompressDearchivalMethod">
            <summary>A <see cref="T:BizHawk.Common.IFileDearchivalMethod`1">dearchival method</see> for <see cref="T:BizHawk.Common.HawkFile"/> implemented using <c>SharpCompress</c> from NuGet.</summary>
        </member>
        <member name="P:BizHawk.Client.Common.IBufferedSoundProvider.BaseSoundProvider">
            <summary>
            The source audio provider.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IBufferedSoundProvider.DiscardSamples">
            <summary>
            Clears any internally buffered samples, and discards samples from the base provider (if set).
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.BufferedAsync.RecalculateMagic(System.Double)">
            <summary>
            recalculates some internal parameters based on the IEmulator's framerate
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.BufferedAsync.GetSamplesAsync(System.Int16[])">
            <exception cref="T:System.InvalidOperationException"><see cref="P:BizHawk.Client.Common.BufferedAsync.BaseSoundProvider"/>.<see cref="P:BizHawk.Emulation.Common.ISoundProvider.SyncMode"/> is not <see cref="F:BizHawk.Emulation.Common.SyncSoundMode.Async"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.BufferedAsync.SetSyncMode(BizHawk.Emulation.Common.SyncSoundMode)">
            <exception cref="T:System.NotSupportedException"><paramref name="mode"/> is not <see cref="F:BizHawk.Emulation.Common.SyncSoundMode.Async"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.BufferedAsync.GetSamplesSync(System.Int16[]@,System.Int32@)">
            <exception cref="T:System.InvalidOperationException">always</exception>
        </member>
        <member name="P:BizHawk.Client.Common.SoundOutputProvider.MaxSamplesDeficit">
            <exception cref="T:System.InvalidOperationException">(from setter) constructed in standalone mode</exception>
        </member>
        <member name="M:BizHawk.Client.Common.SoundOutputProvider.GetSamples(System.Int16[])">
            <exception cref="T:System.InvalidOperationException">not constructed in standalone mode</exception>
        </member>
        <member name="M:BizHawk.Client.Common.SoundOutputProvider.GetSamples(System.Int32,System.Int16[]@,System.Int32@)">
            <exception cref="T:System.InvalidOperationException">constructed in standalone mode</exception>
        </member>
        <member name="M:BizHawk.Client.Common.SyncToAsyncProvider.SetSyncMode(BizHawk.Emulation.Common.SyncSoundMode)">
            <exception cref="T:System.NotSupportedException"><paramref name="mode"/> is not <see cref="F:BizHawk.Emulation.Common.SyncSoundMode.Async"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.SyncToAsyncProvider.GetSamplesSync(System.Int16[]@,System.Int32@)">
            <exception cref="T:System.InvalidOperationException">always</exception>
        </member>
        <member name="M:BizHawk.Client.Common.CheatCollection.AttemptToLoadCheatFile(BizHawk.Emulation.Common.IMemoryDomains)">
            <summary>
            Looks for a .cht file that matches the ROM loaded based on the default filename for a given ROM
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.CheatCollection.Add(BizHawk.Client.Common.Cheat)">
            <exception cref="T:System.ArgumentNullException"><paramref name="cheat"/> is null</exception>
        </member>
        <member name="F:BizHawk.Client.Common.ToolFormUpdateType.General">
            <summary>
            Called by other tools and other events outside of a frame loop
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.ToolFormUpdateType.PreFrame">
            <summary>
            Called before a frame emulates
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.ToolFormUpdateType.PostFrame">
            <summary>
            Called after a frame emulates
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IToolForm.UpdateValues(BizHawk.Client.Common.ToolFormUpdateType)">
            <summary>
            Directs the tool to update, with an indicator of the type of update
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IToolForm.Restart">
            <summary>
            Will be called anytime the dialog needs to be restarted, such as when a new ROM is loaded
            The tool implementing this needs to account for a Game and Core change
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.IToolForm.AskSaveChanges">
            <summary>
            This gives the opportunity for the tool dialog to ask the user to save changes (such is necessary when
            This tool dialog edits a file.  Returning false will tell the client the user wants to cancel the given action,
            Return false to tell the client to back out of an action (such as closing the emulator)
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IToolForm.IsActive">
            <summary>
            Returns a value indicating whether or not the current tool is active and running
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.IToolForm.IsLoaded">
            <summary>
            Gets a value indicating whether a tool is actually open.
            This value should be the same as <see cref="P:BizHawk.Client.Common.IToolForm.IsActive"/>
            except for tools that can be closed/hidden,
            where the tool can be active but not loaded
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.IToolFormAutoConfig">
            <summary>
            toolform that takes automatic common configuration infrastructure
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.RamSearchEngine.IMiniWatch">
            <summary>
            Represents a Ram address for watching in the <see cref="T:BizHawk.Client.Common.RamSearchEngine.RamSearchEngine" />
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.RamSearchEngine.RamSearchEngine.Item(System.Int32)">
            <summary>
            Exposes the current watch state based on index
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.RamSearchEngine.RamSearchEngine.CompareTo">
            <exception cref="T:System.InvalidOperationException">(from setter) <see cref="P:BizHawk.Client.Common.RamSearchEngine.RamSearchEngine.Mode"/> is <see cref="F:BizHawk.Client.Common.RamSearchEngine.SearchMode.Fast"/> and <paramref name="value"/> is not <see cref="F:BizHawk.Client.Common.RamSearchEngine.Compare.Changes"/></exception>
        </member>
        <member name="P:BizHawk.Client.Common.RamSearchEngine.RamSearchEngine.DifferentBy">
            <remarks>
            zero 07-sep-2014 - this isn't ideal. but don't bother changing it (to a long, for instance) until it can support floats. maybe store it as a double here.<br/>
            it already supported floats by way of reinterpret-cast, it just wasn't implemented correctly on this side --yoshi
            </remarks>
        </member>
        <member name="M:BizHawk.Client.Common.RamSearchEngine.RamSearchEngine.RemoveSmallWatchRange(System.Collections.Generic.IEnumerable{BizHawk.Client.Common.Watch})">
            <summary>
            Remove a set of watches
            However, this should not be used with large data sets (100k or more) as it uses a contains logic to perform the task
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.ByteWatch">
            <summary>
            This class holds a byte (8 bits) <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ByteWatch.#ctor(BizHawk.Emulation.Common.MemoryDomain,System.Int64,BizHawk.Client.Common.WatchDisplayType,System.Boolean,System.String,System.Byte,System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.ByteWatch"/> class.
            </summary>
            <param name="domain"><see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> where you want to track</param>
            <param name="address">The address you want to track</param>
            <param name="type">How you you want to display the value See <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></param>
            <param name="bigEndian">Specify the endianess. true for big endian</param>
            <param name="note">A custom note about the <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="value">Current value</param>
            <param name="previous">Previous value</param>
            <param name="changeCount">How many times value has changed</param>
            <exception cref="T:System.ArgumentException">Occurs when a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> is incompatible with <see cref="F:BizHawk.Client.Common.WatchSize.Byte"/></exception>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.ValidTypes">
            <summary>
            Gets an enumeration of <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> that are valid for a <see cref="T:BizHawk.Client.Common.ByteWatch"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ByteWatch.AvailableTypes">
            <summary>
            Get a list a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> that can be used for this <see cref="T:BizHawk.Client.Common.ByteWatch"/>
            </summary>
            <returns>An enumeration that contains all valid <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.ByteWatch.ResetPrevious">
            <summary>
            Reset the previous value; set it to the current one
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.ByteWatch.Poke(System.String)">
            <summary>
            Try to sets the value into the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            at the current <see cref="T:BizHawk.Client.Common.Watch"/> address
            </summary>
            <param name="value">Value to set</param>
            <returns>True if value successfully sets; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.ByteWatch.Update(BizHawk.Client.Common.PreviousType)">
            <summary>
            Update the Watch (read it from <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.Diff">
            <summary>
            Get a string representation of difference
            between current value and the previous one
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.IsValid">
            <summary>
            Returns true if the Watch is valid, false otherwise
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.MaxValue">
            <summary>
            Get the maximum possible value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.Value">
            <summary>
            Get the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.ValueString">
            <summary>
            Get a string representation of the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.Previous">
            <summary>
            Get the previous value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.ByteWatch.PreviousStr">
            <summary>
            Get a string representation of the previous value
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.DWordWatch">
            <summary>
            This class holds a double word (32 bits) <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DWordWatch.#ctor(BizHawk.Emulation.Common.MemoryDomain,System.Int64,BizHawk.Client.Common.WatchDisplayType,System.Boolean,System.String,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.DWordWatch"/> class
            </summary>
            <param name="domain"><see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> where you want to track</param>
            <param name="address">The address you want to track</param>
            <param name="type">How you you want to display the value See <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></param>
            <param name="bigEndian">Specify the endianess. true for big endian</param>
            <param name="note">A custom note about the <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="value">Current value</param>
            <param name="previous">Previous value</param>
            <param name="changeCount">How many times value has changed</param>
            <exception cref="T:System.ArgumentException">Occurs when a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> is incompatible with <see cref="F:BizHawk.Client.Common.WatchSize.DWord"/></exception>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.ValidTypes">
            <summary>
            Gets a list of <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> for a <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DWordWatch.AvailableTypes">
            <summary>
            Get a list of <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> that can be used for a <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            </summary>
            <returns>An enumeration that contains all valid <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.DWordWatch.ResetPrevious">
            <summary>
            Reset the previous value; set it to the current one
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.DWordWatch.Poke(System.String)">
            <summary>
            Try to sets the value into the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            at the current <see cref="T:BizHawk.Client.Common.Watch"/> address
            </summary>
            <param name="value">Value to set</param>
            <returns>True if value successfully sets; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.DWordWatch.Update(BizHawk.Client.Common.PreviousType)">
            <summary>
            Update the Watch (read it from <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.Diff">
            <summary>
            Get a string representation of difference
            between current value and the previous one
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.IsValid">
            <summary>
            Returns true if the Watch is valid, false otherwise
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.MaxValue">
            <summary>
            Get the maximum possible value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.Value">
            <summary>
            Get the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.ValueString">
            <summary>
            Get a string representation of the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.Previous">
            <summary>
            Get the previous value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.DWordWatch.PreviousStr">
            <summary>
            Get a string representation of the previous value
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.SeparatorWatch">
            <summary>
            This class holds a separator for RamWatch
            Use the static property Instance to get it
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.SeparatorWatch"/> class.
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.Instance">
            <summary>
            Gets the separator instance
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.AvailableTypes">
            <summary>
            Get the appropriate WatchDisplayType
            </summary>
            <returns>WatchDisplayType.Separator nothing else</returns>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.Value">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.Previous">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.ValueString">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.PreviousStr">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.ToDisplayString">
            <summary>
            TTransform the current instance into a displayable (short representation) string
            It's used by the "Display on screen" option in the RamWatch window
            </summary>
            <returns>A well formatted string representation</returns>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.ToString">
            <summary>
            Transforms the current instance into a string
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the current <see cref="T:BizHawk.Client.Common.Watch"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.Poke(System.String)">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.ResetPrevious">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.IsValid">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.Diff">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.SeparatorWatch.MaxValue">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.SeparatorWatch.Update(BizHawk.Client.Common.PreviousType)">
            <summary>
            Ignore that stuff
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.Watch">
            <summary>
            This class holds a watch i.e. something inside a <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> identified by an address
            with a specific size (8, 16 or 32bits).
            This is an abstract class
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.#ctor(BizHawk.Emulation.Common.MemoryDomain,System.Int64,BizHawk.Client.Common.WatchSize,BizHawk.Client.Common.WatchDisplayType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.Watch"/> class
            </summary>
            <param name="domain"><see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> where you want to track</param>
            <param name="address">The address you want to track</param>
            <param name="size">A <see cref="T:BizHawk.Client.Common.WatchSize"/> (byte, word, double word)</param>
            <param name="type">How you you want to display the value See <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></param>
            <param name="bigEndian">Specify the endianess. true for big endian</param>
            <param name="note">A custom note about the <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <exception cref="T:System.ArgumentException">Occurs when a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> is incompatible with the <see cref="T:BizHawk.Client.Common.WatchSize"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.FromString(System.String,BizHawk.Emulation.Common.IMemoryDomains)">
            <summary>
            Generate sa <see cref="T:BizHawk.Client.Common.Watch"/> from a given string
            String is tab separate
            </summary>
            <param name="line">Entire string, tab separated for each value Order is:
            <list type="number">
            <item>
            <term>0x00</term>
            <description>Address in hexadecimal</description>
            </item>
            <item>
            <term>b,w or d</term>
            <description>The <see cref="T:BizHawk.Client.Common.WatchSize"/>, byte, word or double word</description>
            <term>s, u, h, b, 1, 2, 3, f</term>
            <description>The <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> signed, unsigned,etc...</description>
            </item>
            <item>
            <term>0 or 1</term>
            <description>Big endian or not</description>
            </item>
            <item>
            <term>RDRAM,ROM,...</term>
            <description>The <see cref="T:BizHawk.Emulation.Common.IMemoryDomains"/></description>
            </item>
            <item>
            <term>Plain text</term>
            <description>Notes</description>
            </item>
            </list>
            </param>
            <param name="domains"><see cref="T:BizHawk.Client.Common.Watch"/>'s memory domain</param>
            <returns>A brand new <see cref="T:BizHawk.Client.Common.Watch"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.GenerateWatch(BizHawk.Emulation.Common.MemoryDomain,System.Int64,BizHawk.Client.Common.WatchSize,BizHawk.Client.Common.WatchDisplayType,System.Boolean,System.String,System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates a new <see cref="T:BizHawk.Client.Common.Watch"/> instance
            Can be either <see cref="T:BizHawk.Client.Common.ByteWatch"/>, <see cref="T:BizHawk.Client.Common.WordWatch"/>, <see cref="T:BizHawk.Client.Common.DWordWatch"/> or <see cref="T:BizHawk.Client.Common.SeparatorWatch"/>
            </summary>
            <param name="domain">The <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> where you want to watch</param>
            <param name="address">The address into the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/></param>
            <param name="size">The size</param>
            <param name="type">How the watch will be displayed</param>
            <param name="bigEndian">Endianess (true for big endian)</param>
            <param name="note">A custom note about the <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="value">The current watch value</param>
            <param name="prev">Previous value</param>
            <param name="changeCount">Number of changes occurs in current <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>New <see cref="T:BizHawk.Client.Common.Watch"/> instance. True type is depending of size parameter</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_Equality(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Equality operator between two <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="a">First watch</param>
            <param name="b">Second watch</param>
            <returns>True if both watch are equals; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_Equality(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Cheat)">
            <summary>
            Equality operator between a <see cref="T:BizHawk.Client.Common.Watch"/> and a <see cref="T:BizHawk.Client.Common.Cheat"/>
            </summary>
            <param name="a">The watch</param>
            <param name="b">The cheat</param>
            <returns>True if they are equals; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_Inequality(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Inequality operator between two <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="a">First watch</param>
            <param name="b">Second watch</param>
            <returns>True if both watch are different; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_Inequality(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Cheat)">
            <summary>
            Inequality operator between a <see cref="T:BizHawk.Client.Common.Watch"/> and a <see cref="T:BizHawk.Client.Common.Cheat"/>
            </summary>
            <param name="a">The watch</param>
            <param name="b">The cheat</param>
            <returns>True if they are different; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_LessThan(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compare two <see cref="T:BizHawk.Client.Common.Watch"/> together
            </summary>
            <param name="a">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="b">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>True if first is lesser than b; otherwise, false</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when you try to compare two <see cref="T:BizHawk.Client.Common.Watch"/> throughout different <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_GreaterThan(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compare two <see cref="T:BizHawk.Client.Common.Watch"/> together
            </summary>
            <param name="a">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="b">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>True if first is greater than b; otherwise, false</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when you try to compare two <see cref="T:BizHawk.Client.Common.Watch"/> throughout different <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_LessThanOrEqual(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compare two <see cref="T:BizHawk.Client.Common.Watch"/> together
            </summary>
            <param name="a">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="b">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>True if first is lesser or equals to b; otherwise, false</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when you try to compare two <see cref="T:BizHawk.Client.Common.Watch"/> throughout different <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.op_GreaterThanOrEqual(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compare two <see cref="T:BizHawk.Client.Common.Watch"/> together
            </summary>
            <param name="a">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="b">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>True if first is greater or equals to b; otherwise, false</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when you try to compare two <see cref="T:BizHawk.Client.Common.Watch"/> throughout different <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.AvailableTypes">
            <summary>
            Gets a list a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> that can be used for this <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <returns>An enumeration that contains all valid <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.ResetPrevious">
            <summary>
            Resets the previous value; set it to the current one
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.Update(BizHawk.Client.Common.PreviousType)">
            <summary>
            Updates the Watch (read it from <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.ClearChangeCount">
            <summary>
            Sets the number of changes to 0
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.Equals(BizHawk.Client.Common.Watch)">
            <summary>
            Determines if this <see cref="T:BizHawk.Client.Common.Watch"/> is equals to another
            </summary>
            <param name="other">The <see cref="T:BizHawk.Client.Common.Watch"/> to compare</param>
            <returns>True if both object are equals; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.Equals(BizHawk.Client.Common.Cheat)">
            <summary>
            Determines if this <see cref="T:BizHawk.Client.Common.Watch"/> is equals to an instance of <see cref="T:BizHawk.Client.Common.Cheat"/>
            </summary>
            <param name="other">The <see cref="T:BizHawk.Client.Common.Cheat"/> to compare</param>
            <returns>True if both object are equals; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.CompareTo(BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> together and determine which one comes first.
            First we look the address and then the size
            </summary>
            <param name="other">The other <see cref="T:BizHawk.Client.Common.Watch"/> to compare to</param>
            <returns>0 if they are equals, 1 if the other is greater, -1 if the other is lesser</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when you try to compare two <see cref="T:BizHawk.Client.Common.Watch"/> throughout different <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/></exception>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.Equals(System.Object)">
            <summary>
            Determines if this object is Equals to another
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if both object are equals; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.GetHashCode">
            <summary>
            Hash the current watch and gets a unique value
            </summary>
            <returns><see cref="T:System.Int32"/> that can serves as a unique representation of current Watch</returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.IsDisplayTypeAvailable(BizHawk.Client.Common.WatchDisplayType)">
            <summary>
            Determines if the specified <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> can be
            used for the current <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="type"><see cref="T:BizHawk.Client.Common.WatchDisplayType"/> you want to check</param>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.ToString">
            <summary>
            Transforms the current instance into a string
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the current <see cref="T:BizHawk.Client.Common.Watch"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.ToDisplayString">
            <summary>
            Transform the current instance into a displayable (short representation) string
            It's used by the "Display on screen" option in the RamWatch window
            </summary>
            <returns>A well formatted string representation</returns>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Diff">
            <summary>
            Gets a string representation of difference
            between current value and the previous one
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.MaxValue">
            <summary>
            Gets the maximum possible value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Value">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.ValueString">
            <summary>
            Gets a string representation of the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.IsValid">
            <summary>
            Returns true if the Watch is valid, false otherwise
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.Watch.Poke(System.String)">
            <summary>
            Try to sets the value into the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            at the current <see cref="T:BizHawk.Client.Common.Watch"/> address
            </summary>
            <param name="value">Value to set</param>
            <returns>True if value successfully sets; otherwise, false</returns>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Previous">
            <summary>
            Gets the previous value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.PreviousStr">
            <summary>
            Gets a string representation of the previous value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Address">
            <summary>
            Gets the address in the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.AddressString">
            <summary>
            Gets the address in the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> formatted as string
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.BigEndian">
            <summary>
            Gets or sets a value indicating the endianess of current <see cref="T:BizHawk.Client.Common.Watch"/>
            True for big endian, false for little endian
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.ChangeCount">
            <summary>
            Gets or sets the number of times that value of current <see cref="T:BizHawk.Client.Common.Watch"/> value has changed
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Type">
            <summary>
            Gets or sets the way current <see cref="T:BizHawk.Client.Common.Watch"/> is displayed
            </summary>
            <exception cref="T:System.ArgumentException">Occurs when a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> is incompatible with the <see cref="T:BizHawk.Client.Common.WatchSize"/></exception>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Domain">
            <value>the domain of <see cref="P:BizHawk.Client.Common.Watch.Address"/></value>
            <exception cref="T:System.InvalidOperationException">(from setter) <paramref name="value"/> does not have the same name as this property's value</exception>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.IsSeparator">
            <summary>
            Gets a value that defined if the current <see cref="T:BizHawk.Client.Common.Watch"/> is actually a <see cref="T:BizHawk.Client.Common.SeparatorWatch"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Notes">
            <summary>
            Gets or sets notes for current <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.Watch.Size">
            <summary>
            Gets the current size of the watch
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.WatchDisplayType">
            <summary>
            This enum is used to specify how you want your <see cref="T:BizHawk.Client.Common.Watch"/> to be displayed
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.Separator">
            <summary>
            Separator, only used by <see cref="T:BizHawk.Client.Common.SeparatorWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.Signed">
            <summary>
            Display the value as a signed integer
            Used by <see cref="T:BizHawk.Client.Common.ByteWatch"/>, <see cref="T:BizHawk.Client.Common.WordWatch"/> and <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.Unsigned">
            <summary>
            Display the value as an unsigned integer
            Used by <see cref="T:BizHawk.Client.Common.ByteWatch"/>, <see cref="T:BizHawk.Client.Common.WordWatch"/> and <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.Hex">
            <summary>
            Raw hexadecimal display
            Used by <see cref="T:BizHawk.Client.Common.ByteWatch"/>, <see cref="T:BizHawk.Client.Common.WordWatch"/> and <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.Binary">
            <summary>
            Raw binary display
            Used by <see cref="T:BizHawk.Client.Common.ByteWatch"/>, <see cref="T:BizHawk.Client.Common.WordWatch"/> and <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            If you can read it easily, you're probably a computer
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.FixedPoint_12_4">
            <summary>
            Display the value as fractional number. 12 before coma and 4 after
            Used only by <see cref="T:BizHawk.Client.Common.WordWatch"/> as it is 16 bits length
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.FixedPoint_20_12">
            <summary>
            Display the value as fractional number. 20 before coma and 12 after
            Used only by <see cref="T:BizHawk.Client.Common.DWordWatch"/> as it is 32 bits length
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.FixedPoint_16_16">
            <summary>
            Display the value as fractional number. 16 before coma and 16 after
            Used only by <see cref="T:BizHawk.Client.Common.DWordWatch"/> as it is 32 bits length
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchDisplayType.Float">
            <summary>
            The traditional float type as in C++ <see langword="float"/>
            Used only by <see cref="T:BizHawk.Client.Common.DWordWatch"/> as it is 32 bits length
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList">
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
            <summary>
            This class hold a collection <see cref="T:BizHawk.Client.Common.Watch"/>
            Different memory domain can be mixed
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchAddressComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on their address
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchAddressComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the domain and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchChangeCountComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on the number of changes
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchChangeCountComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the address and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchFullDisplayTypeComparer">
            <summary>
            Nested private class that defines how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>es based on their full display type
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchFullDisplayTypeComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/>es and determines which has greater size.
            If they are equal, comparison will done on the display type and then on endianness
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchDomainComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on their domain
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchDomainComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the address and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchEqualityComparer.Equals(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Determines if two <see cref="T:BizHawk.Client.Common.Watch"/> are equals
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>True if <see cref="T:BizHawk.Client.Common.Watch"/> are equal; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchEqualityComparer.GetHashCode(BizHawk.Client.Common.Watch)">
            <summary>
            Gets the hash value of specified <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="obj">Watch to get hash</param>
            <returns>int that can serves as a unique representation of current Watch</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.#cctor">
            <summary>
            Static constructor for the <see cref="T:BizHawk.Client.Common.WatchList"/> class.
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.#ctor(BizHawk.Emulation.Common.IMemoryDomains,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.WatchList"/> class
            that will contains a set of <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="core">All available memory domains</param>
            <param name="systemId">System identifier (NES, SNES, ...)</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.Add(BizHawk.Client.Common.Watch)">
            <summary>
            Adds a <see cref="T:BizHawk.Client.Common.Watch"/> into the current collection
            </summary>
            <param name="watch"><see cref="T:BizHawk.Client.Common.Watch"/> to add</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.Clear">
            <summary>
            Removes all item from the current collection
            Clear also the file name
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.Contains(BizHawk.Client.Common.Watch)">
            <summary>
            Determines if the current <see cref="T:BizHawk.Client.Common.WatchList"/> contains the
            specified <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="watch">The object to</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.CopyTo(BizHawk.Client.Common.Watch[],System.Int32)">
            <summary>
            Copies the elements of the current <see cref="T:BizHawk.Client.Common.WatchList"/>
            into an <see cref="T:System.Array"/> starting at a particular <see cref="T:System.Array"/> index
            </summary>
            <param name="array">The one-dimension <see cref="T:System.Array"/> that will serve as destination to copy</param>
            <param name="arrayIndex">Zero-based index where the copy should starts</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.Remove(BizHawk.Client.Common.Watch)">
            <summary>
            Removes the first of specified <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
            <param name="watch"><see cref="T:BizHawk.Client.Common.Watch"/> to remove</param>
            <returns>True if <see cref="T:BizHawk.Client.Common.Watch"/> successfully removed; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.IndexOf(BizHawk.Client.Common.Watch)">
            <summary>
            Determines the zero-base position of the specified <see cref="T:BizHawk.Client.Common.Watch"/>
            into the <see cref="T:BizHawk.Client.Common.WatchList"/>
            </summary>
            <param name="watch"><see cref="T:BizHawk.Client.Common.Watch"/> to look for</param>
            <returns>Zero-base position if <see cref="T:BizHawk.Client.Common.Watch"/> has been found; otherwise -1</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.Insert(System.Int32,BizHawk.Client.Common.Watch)">
            <summary>
            Insert a <see cref="T:BizHawk.Client.Common.Watch"/> at the specified index
            </summary>
            <param name="index">The zero-base index where the <see cref="T:BizHawk.Client.Common.Watch"/> should be inserted</param>
            <param name="watch"><see cref="T:BizHawk.Client.Common.Watch"/> to insert</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{BizHawk.Client.Common.Watch})">
            <param name="index">
            <c>0</c> to prepend, <see cref="P:BizHawk.Client.Common.WatchList.Count"/> to append, anything in-between to insert there
            (the first elem of <paramref name="collection"/> will end up at <paramref name="index"/>)
            </param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.RemoveAt(System.Int32)">
            <summary>
            Removes item at the specified index
            </summary>
            <param name="index">Zero-based index of the <see cref="T:BizHawk.Client.Common.Watch"/> to remove</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the current collection</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the current collection</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.AddRange(System.Collections.Generic.IEnumerable{BizHawk.Client.Common.Watch})">
            <summary>
            Add an existing collection of <see cref="T:BizHawk.Client.Common.Watch"/> into the current one
            </summary>
            <param name="watches"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of watch to merge</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.ClearChangeCounts">
            <summary>
            Clears change count of all <see cref="T:BizHawk.Client.Common.Watch"/> in the collection
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.OrderWatches(System.String,System.Boolean)">
            <summary>
            Sort the current list based on one of the column constants.
            </summary>
            <param name="column">The column to sort by.</param>
            <param name="reverse">Defines the order of the sort. Ascending (true) or descending (false)</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.RefreshDomains(BizHawk.Emulation.Common.IMemoryDomains,BizHawk.Client.Common.PreviousType)">
            <summary>
            Sets WatchList's domain list to a new one
            <see cref="T:BizHawk.Client.Common.Watch"/> domain will also be refreshed
            </summary>
            <param name="core">New domains</param>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.UpdateValues(BizHawk.Client.Common.PreviousType)">
            <summary>
            Updates all <see cref="T:BizHawk.Client.Common.Watch"/> in the current collection
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WatchList.Count">
            <summary>
            Gets the number of elements contained in this <see cref="T:BizHawk.Client.Common.WatchList"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WatchList.IsReadOnly">
            <summary>
            <see cref="T:BizHawk.Client.Common.WatchList"/> is always read-write
            so this value will be always false
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WatchList.Item(System.Int32)">
            <summary>
            Gets or sets element at the specified index
            </summary>
            <param name="index">The zero based index of the element you want to get or set</param>
            <returns><see cref="T:BizHawk.Client.Common.Watch"/> at the specified index</returns>
        </member>
        <member name="P:BizHawk.Client.Common.WatchList.Changes">
            <summary>
            Gets or sets a value indicating whether the collection has changed or not
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WatchList.CurrentFileName">
            <summary>
            Gets or sets current <see cref="T:BizHawk.Client.Common.WatchList"/>'s filename
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WatchList.WatchCount">
            <summary>
            Gets the number of <see cref="T:BizHawk.Client.Common.Watch"/> that are not <see cref="T:BizHawk.Client.Common.SeparatorWatch"/>
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchNoteComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on their note
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchNoteComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the address and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchPreviousValueComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on their previous value
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchPreviousValueComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the address and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchValueComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on their values
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchValueComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the address and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchList.WatchValueDifferenceComparer">
            <summary>
            Nested private class that define how to compare two <see cref="T:BizHawk.Client.Common.Watch"/>
            based on the difference between current and previous value
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WatchList.WatchValueDifferenceComparer.Compare(BizHawk.Client.Common.Watch,BizHawk.Client.Common.Watch)">
            <summary>
            Compares two <see cref="T:BizHawk.Client.Common.Watch"/> between them
            and determines which one comes first.
            If they are equals, comparison will done one the address and next on size
            </summary>
            <param name="x">First <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="y">Second <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <returns>0 for equality, 1 if x comes first; -1 if y comes first</returns>
        </member>
        <member name="T:BizHawk.Client.Common.WatchSize">
            <summary>
            This enum specify the size of a <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchSize.Byte">
            <summary>
            One byte (8 bits)
            Use this for <see cref="T:BizHawk.Client.Common.ByteWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchSize.Word">
            <summary>
            2 bytes (16 bits)
            Use this for <see cref="T:BizHawk.Client.Common.WordWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchSize.DWord">
            <summary>
            4 bytes (32 bits)
            Use this for <see cref="T:BizHawk.Client.Common.DWordWatch"/>
            </summary>
        </member>
        <member name="F:BizHawk.Client.Common.WatchSize.Separator">
            <summary>
            Special case used for a separator in ram tools
            Use this for <see cref="T:BizHawk.Client.Common.SeparatorWatch"/>
            </summary>
        </member>
        <member name="T:BizHawk.Client.Common.WordWatch">
            <summary>
            This class holds a word (16 bits) <see cref="T:BizHawk.Client.Common.Watch"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WordWatch.#ctor(BizHawk.Emulation.Common.MemoryDomain,System.Int64,BizHawk.Client.Common.WatchDisplayType,System.Boolean,System.String,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BizHawk.Client.Common.WordWatch"/> class
            </summary>
            <param name="domain"><see cref="T:BizHawk.Emulation.Common.MemoryDomain"/> where you want to track</param>
            <param name="address">The address you want to track</param>
            <param name="type">How you you want to display the value See <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></param>
            <param name="bigEndian">Specify the endianess. true for big endian</param>
            <param name="note">A custom note about the <see cref="T:BizHawk.Client.Common.Watch"/></param>
            <param name="value">Current value</param>
            <param name="previous">Previous value</param>
            <param name="changeCount">How many times value has changed</param>
            <exception cref="T:System.ArgumentException">Occurs when a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> is incompatible with <see cref="F:BizHawk.Client.Common.WatchSize.Word"/></exception>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.ValidTypes">
            <summary>
            Gets an Enumeration of <see cref="T:BizHawk.Client.Common.WatchDisplayType"/>s that are valid for a <see cref="T:BizHawk.Client.Common.WordWatch"/>
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WordWatch.AvailableTypes">
            <summary>
            Get a list a <see cref="T:BizHawk.Client.Common.WatchDisplayType"/> that can be used for this <see cref="T:BizHawk.Client.Common.WordWatch"/>
            </summary>
            <returns>An enumeration that contains all valid <see cref="T:BizHawk.Client.Common.WatchDisplayType"/></returns>
        </member>
        <member name="M:BizHawk.Client.Common.WordWatch.ResetPrevious">
            <summary>
            Reset the previous value; set it to the current one
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.WordWatch.Poke(System.String)">
            <summary>
            Try to sets the value into the <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            at the current <see cref="T:BizHawk.Client.Common.Watch"/> address
            </summary>
            <param name="value">Value to set</param>
            <returns>True if value successfully sets; otherwise, false</returns>
        </member>
        <member name="M:BizHawk.Client.Common.WordWatch.Update(BizHawk.Client.Common.PreviousType)">
            <summary>
            Update the Watch (read it from <see cref="T:BizHawk.Emulation.Common.MemoryDomain"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.Diff">
            <summary>
            Get a string representation of difference
            between current value and the previous one
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.IsValid">
            <summary>
            Returns true if the Watch is valid, false otherwise
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.MaxValue">
            <summary>
            Get the maximum possible value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.Value">
            <summary>
            Gets the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.ValueString">
            <summary>
            Get a string representation of the current value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.Previous">
            <summary>
            Get the previous value
            </summary>
        </member>
        <member name="P:BizHawk.Client.Common.WordWatch.PreviousStr">
            <summary>
            Get a string representation of the previous value
            </summary>
        </member>
        <member name="M:BizHawk.Client.Common.XmlGame.Create(BizHawk.Common.HawkFile)">
            <exception cref="T:System.InvalidOperationException">internal error</exception>
        </member>
        <member name="M:BizHawk.Client.Common.ReflectionCache.EmbeddedResourceStream(System.String)">
            <exception cref="T:System.ArgumentException">not found</exception>
        </member>
    </members>
</doc>
